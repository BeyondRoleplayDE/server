diff --git a/node_modules/@durtyfree/altv-nativeui/.github/FUNDING.yml b/node_modules/@durtyfree/altv-nativeui/.github/FUNDING.yml
deleted file mode 100644
index 976ef3f..0000000
--- a/node_modules/@durtyfree/altv-nativeui/.github/FUNDING.yml
+++ /dev/null
@@ -1,12 +0,0 @@
-# These are supported funding model platforms
-
-github: [DurtyFree]
-patreon: # Replace with a single Patreon username
-open_collective: # Replace with a single Open Collective username
-ko_fi: # Replace with a single Ko-fi username
-tidelift: # Replace with a single Tidelift platform-name/package-name e.g., npm/babel
-community_bridge: # Replace with a single Community Bridge project-name e.g., cloud-foundry
-liberapay: # Replace with a single Liberapay username
-issuehunt: # Replace with a single IssueHunt username
-otechie: # Replace with a single Otechie username
-custom: # Replace with up to 4 custom sponsorship URLs e.g., ['link1', 'link2']
diff --git a/node_modules/@durtyfree/altv-nativeui/.gitignore b/node_modules/@durtyfree/altv-nativeui/.gitignore
deleted file mode 100644
index 1391194..0000000
--- a/node_modules/@durtyfree/altv-nativeui/.gitignore
+++ /dev/null
@@ -1,5 +0,0 @@
-index.js
-dist/
-node_modules/
-package-lock.json
-.npmrc
diff --git a/node_modules/@durtyfree/altv-nativeui/.prettierignore b/node_modules/@durtyfree/altv-nativeui/.prettierignore
deleted file mode 100644
index af2eff1..0000000
--- a/node_modules/@durtyfree/altv-nativeui/.prettierignore
+++ /dev/null
@@ -1 +0,0 @@
-StringMeasurer.ts
\ No newline at end of file
diff --git a/node_modules/@durtyfree/altv-nativeui/examples/nativeUI-example/_keep.mjs b/node_modules/@durtyfree/altv-nativeui/examples/nativeUI-example/_keep.mjs
deleted file mode 100644
index e69de29..0000000
diff --git a/node_modules/@durtyfree/altv-nativeui/examples/nativeUI-example/client.js b/node_modules/@durtyfree/altv-nativeui/examples/nativeUI-example/client.js
deleted file mode 100644
index 298a36e..0000000
--- a/node_modules/@durtyfree/altv-nativeui/examples/nativeUI-example/client.js
+++ /dev/null
@@ -1,174 +0,0 @@
-import * as alt from 'alt-client';
-import * as game from 'natives';
-import * as NativeUI from './includes/NativeUI/NativeUI';
-const menu = new NativeUI.Menu("NativeUI Test", "Test Subtitle", new NativeUI.Point(50, 50));
-menu.GetTitle().Scale = 1.5;
-menu.GetTitle().DropShadow = true;
-let respectButton = new NativeUI.InstructionalButton("To pay respect", 0, "F");
-menu.AddInstructionalButton(respectButton);
-menu.AddItem(new NativeUI.UIMenuListItem("List Item", "Description for List Item", new NativeUI.ItemsCollection(["Item 1", "Item 2", "Item 3"])));
-menu.AddItem(new NativeUI.UIMenuSliderItem("Slider Item", ["Fugiat", "pariatur", "consectetur", "ex", "duis", "magna", "nostrud", "et", "dolor", "laboris"], 5, "Fugiat pariatur consectetur ex duis magna nostrud et dolor laboris est do pariatur amet sint.", true));
-menu.AddItem(new NativeUI.UIMenuCheckboxItem("Checkbox Item", false, "Fugiat pariatur consectetur ex duis magna nostrud et dolor laboris est do pariatur amet sint."));
-menu.AddItem(new NativeUI.UIMenuItem("Dumb menu item", "Just a menu item description"));
-const maxListItems = 100;
-let itemData = {
-    name: "test",
-    data: "great"
-};
-let autoListItem = new NativeUI.UIMenuAutoListItem('Auto list item: Write number', `I want to write ~y~${maxListItems}~s~ in console.`, -maxListItems, maxListItems, 0, itemData);
-autoListItem.PreCaptionText = '~HUD_COLOUR_RED~';
-menu.AddItem(autoListItem);
-const players = ["DurtyFree", "Kar", "Tuxick", "Hardy", "Neta"];
-var playerKickIndex = 0;
-function onDynamicPlayerKickItemChange(item, selectedValue, changeDirection) {
-    if (changeDirection == NativeUI.ChangeDirection.Right) {
-        playerKickIndex++;
-        if (playerKickIndex >= players.length)
-            playerKickIndex = 0;
-    }
-    else {
-        playerKickIndex--;
-        if (playerKickIndex < 0)
-            playerKickIndex = players.length - 1;
-    }
-    return players[playerKickIndex];
-}
-let dynamicKickPlayerItem = new NativeUI.UIMenuDynamicListItem('Kick Player:', onDynamicPlayerKickItemChange, `Choose player to kick.`, () => players[0]);
-dynamicKickPlayerItem.PreCaptionText = '~HUD_COLOUR_RED~';
-menu.AddItem(dynamicKickPlayerItem);
-const banners = [
-    { dict: "commonmenu", name: "interaction_bgd" },
-    { dict: "shopui_title_barber", name: "shopui_title_barber" },
-    { dict: "shopui_title_barber2", name: "shopui_title_barber2" },
-    { dict: "shopui_title_barber3", name: "shopui_title_barber3" },
-    { dict: "shopui_title_barber4", name: "shopui_title_barber4" },
-    { dict: "shopui_title_carmod", name: "shopui_title_carmod" },
-    { dict: "shopui_title_carmod2", name: "shopui_title_carmod2" },
-    { dict: "shopui_title_conveniencestore", name: "shopui_title_tennisstore" },
-    { dict: "shopui_title_conveniencestore", name: "shopui_title_conveniencestore" },
-    { dict: "shopui_title_darts", name: "shopui_title_darts" },
-    { dict: "shopui_title_gasstation", name: "shopui_title_gasstation" },
-    { dict: "shopui_title_golfshop", name: "shopui_title_golfshop" },
-    { dict: "shopui_title_graphics_franklin", name: "shopui_title_graphics_franklin" },
-    { dict: "shopui_title_graphics_micheal", name: "shopui_title_graphics_micheal" },
-    { dict: "shopui_title_graphics_trevor", name: "shopui_title_graphics_trevor" },
-    { dict: "shopui_title_gunclub", name: "shopui_title_gunclub" },
-    { dict: "shopui_title_highendfashion", name: "shopui_title_highendfashion" },
-    { dict: "shopui_title_highendsalon", name: "shopui_title_highendsalon" },
-    { dict: "shopui_title_liqourstore", name: "shopui_title_liqourstore" },
-    { dict: "shopui_title_liqourstore2", name: "shopui_title_liqourstore2" },
-    { dict: "shopui_title_liqourstore3", name: "shopui_title_liqourstore3" },
-    { dict: "shopui_title_lowendfashion", name: "shopui_title_lowendfashion" },
-    { dict: "shopui_title_lowendfashion2", name: "shopui_title_lowendfashion2" },
-    { dict: "shopui_title_midfashion", name: "shopui_title_midfashion" },
-    { dict: "shopui_title_movie_masks", name: "shopui_title_movie_masks" },
-    { dict: "shopui_title_tattoos", name: "shopui_title_tattoos" },
-    { dict: "shopui_title_tattoos2", name: "shopui_title_tattoos2" },
-    { dict: "shopui_title_tattoos3", name: "shopui_title_tattoos3" },
-    { dict: "shopui_title_tattoos4", name: "shopui_title_tattoos4" },
-    { dict: "shopui_title_tattoos5", name: "shopui_title_tattoos5" },
-    { dict: "shopui_title_tennis", name: "shopui_title_tennis" }
-];
-var bannerIndex = 0;
-function onDynamicBannerItemChange(item, selectedValue, changeDirection) {
-    if (changeDirection == NativeUI.ChangeDirection.Right) {
-        bannerIndex++;
-        if (bannerIndex >= banners.length)
-            bannerIndex = 0;
-    }
-    else {
-        bannerIndex--;
-        if (bannerIndex < 0)
-            bannerIndex = banners.length - 1;
-    }
-    let currentBanner = banners[bannerIndex];
-    menu.SetSpriteBannerType(new NativeUI.Sprite(currentBanner.dict, currentBanner.name, new NativeUI.Point(0, 0), new NativeUI.Size()));
-    return currentBanner.name;
-}
-let dynamicBannerItem = new NativeUI.UIMenuDynamicListItem('Banner:', onDynamicBannerItemChange, `Choose your menu banner.`, () => banners[0].name);
-dynamicBannerItem.PreCaptionText = '~HUD_COLOUR_GREEN~';
-menu.AddItem(dynamicBannerItem);
-function onDynamicListItemChange(item, selectedValue, changeDirection) {
-    if (changeDirection == NativeUI.ChangeDirection.Right) {
-        game.setEntityCoordsNoOffset(alt.Player.local.scriptID, alt.Player.local.pos.x + 0.01, alt.Player.local.pos.y, alt.Player.local.pos.z, false, false, false);
-    }
-    else {
-        game.setEntityCoordsNoOffset(alt.Player.local.scriptID, alt.Player.local.pos.x - 0.01, alt.Player.local.pos.y, alt.Player.local.pos.z, false, false, false);
-    }
-    return alt.Player.local.pos.x.toFixed(2);
-}
-let dynamicListItem = new NativeUI.UIMenuDynamicListItem('Player X Position:', onDynamicListItemChange, `Change Players X position.`, () => alt.Player.local.pos.x.toFixed(2));
-dynamicListItem.PreCaptionText = '~HUD_COLOUR_RED~';
-menu.AddItem(dynamicListItem);
-let menuItem = new NativeUI.UIMenuItem("Test Sub Menu", "Just a sub menu.");
-let niceButton = new NativeUI.InstructionalButton("Nice", NativeUI.Control.Sprint);
-niceButton.BindToItem(menuItem);
-menu.AddInstructionalButton(niceButton);
-menu.AddItem(menuItem);
-const subMenu = new NativeUI.Menu("NativeUI Sub Menu Test", "Sub Menu Subtitle", new NativeUI.Point(50, 50));
-subMenu.Visible = false;
-subMenu.GetTitle().Scale = 0.9;
-menu.AddSubMenu(subMenu, menuItem);
-subMenu.AddItem(new NativeUI.UIMenuItem("Sub menu item", "Just a sub menu item"));
-menu.ItemSelect.on((selectedItem, selectedItemIndex) => {
-    if (selectedItem instanceof NativeUI.UIMenuListItem) {
-        alt.log("[ItemSelect] " + selectedItemIndex, selectedItem.SelectedItem.DisplayText, selectedItem.SelectedItem.Data);
-    }
-    else if (selectedItem instanceof NativeUI.UIMenuSliderItem) {
-        alt.log("[ItemSelect] " + selectedItemIndex, selectedItem.Text, selectedItem.Index, selectedItem.IndexToItem(selectedItem.Index));
-    }
-    else if (selectedItem instanceof NativeUI.UIMenuCheckboxItem) {
-        alt.log("[ItemSelect] " + selectedItemIndex, selectedItem.Text, selectedItem.Checked);
-    }
-    else {
-        alt.log("[ItemSelect] " + selectedItemIndex, selectedItem.Text);
-    }
-});
-menu.ListChange.on((item, newListItemIndex) => {
-    alt.log("[ListChange] " + newListItemIndex, item.Text);
-});
-menu.AutoListChange.on((item, newListItemIndex, changeDirection) => {
-    alt.log("[AutoListChange] " + newListItemIndex, item.Text);
-    if (item == autoListItem) {
-        alt.log("[AutoListChange] " + changeDirection + " " + item.Data.name + " " + item.Data.data);
-        alt.log(newListItemIndex);
-    }
-});
-menu.DynamicListChange.on((item, newListItemIndex, changeDirection) => {
-    alt.log("[DynamicListChange] " + newListItemIndex, item.Text);
-    if (item == dynamicKickPlayerItem) {
-        alt.log("[DynamicListChange] " + changeDirection);
-    }
-});
-menu.IndexChange.on((newIndex) => {
-    alt.log("[IndexChange] " + "Current Selection: " + newIndex);
-});
-menu.SliderChange.on((item, itemIndex, sliderIndex) => {
-    alt.log("[SliderChange] " + item.Text, itemIndex, sliderIndex);
-});
-menu.CheckboxChange.on((item, checkedState) => {
-    alt.log("[CheckboxChange] " + item.Text, checkedState);
-});
-menu.MenuOpen.on(() => {
-    alt.log("[NativeUi] Menu opened");
-});
-menu.MenuClose.on(() => {
-    alt.log("[NativeUi] Menu closed");
-});
-menu.MenuChange.on((newMenu, enteredSubMenu) => {
-    alt.log("[MenuChange] " + newMenu.Id, enteredSubMenu);
-});
-alt.on('keyup', (key) => {
-    if (key === 0x4D) {
-        if (menu.Visible)
-            menu.Close();
-        else
-            menu.Open();
-        NativeUI.MidsizedMessage.ShowMidsizedShardMessage("Menu opened", "Awesome", NativeUI.HudColor.HUD_COLOUR_BLACK, true, true);
-    }
-    else if (key === 70 && menu.Visible) {
-        if (!NativeUI.BigMessage.IsVisible) {
-            NativeUI.BigMessage.ShowRankupMessage("You paid respect", "Well done sir", 1337);
-        }
-    }
-});
diff --git a/node_modules/@durtyfree/altv-nativeui/examples/nativeUI-example/client.ts b/node_modules/@durtyfree/altv-nativeui/examples/nativeUI-example/client.ts
deleted file mode 100644
index 314ff69..0000000
--- a/node_modules/@durtyfree/altv-nativeui/examples/nativeUI-example/client.ts
+++ /dev/null
@@ -1,281 +0,0 @@
-import * as alt from 'alt-client';
-import * as game from 'natives';
-import * as NativeUI from './includes/NativeUI/NativeUI';
-
-// Simple menu with default banner
-const menu = new NativeUI.Menu("NativeUI Test", "Test Subtitle", new NativeUI.Point(50, 50));
-
-// Use custom banner for menu
-// See https://pastebin.com/R5AbQJqb or https://github.com/jorjic/fivem-docs/wiki/Sprite-List for a full list of sprites
-//const menu = new NativeUI.Menu("", "You want that durty look?", new NativeUI.Point(50, 50));
-//var banner = new NativeUI.Sprite("shopui_title_barber", "shopui_title_barber", new NativeUI.Point(0, 0), new NativeUI.Size(0, 0));
-//menu.SetSpriteBannerType(banner);
-
-// Use custom banner with rectangle background
-//const menu = new NativeUI.Menu("Shop", "Shit you need, almost free", new NativeUI.Point(50, 50));
-//var rectangle = new NativeUI.ResRectangle(new NativeUI.Point(0, 0), new NativeUI.Size(0,0), new NativeUI.Color(0, 0, 0, 255)); 
-//menu.SetRectangleBannerType(rectangle);
-//var banner = new NativeUI.Sprite("mpshops", "shopui_title_graphics_sale", new NativeUI.Point(0, 0), new NativeUI.Size(0, 0));
-//menu.AddSpriteBannerType(banner);
-
-// Use rectangle banner for "plain colors"
-//const menu = new NativeUI.Menu("NativeUI Test", "Test plain menu", new NativeUI.Point(50, 50));
-////We only care about color for rectangle banner type, position & size is set automatically
-//var banner = new NativeUI.ResRectangle(new NativeUI.Point(0, 0), new NativeUI.Size(0,0), new NativeUI.Color(200, 200, 200, 255)); 
-//menu.SetRectangleBannerType(banner);
-
-// We can also have no banner at all
-//const menu = new NativeUI.Menu("", "Banner less menu", new NativeUI.Point(50, -57)); //Optional offset the menu -107 (banner height is 107) to have no offset at all
-//menu.SetNoBannerType();
-
-// Some customization
-//menu.Visible = false; //Menus are visible per default
-//menu.DisableInstructionalButtons(true); //Instructional Buttons are enabled per default
-menu.GetTitle().Scale = 1.5; // Change title scale
-menu.GetTitle().DropShadow = true;
-//menu.GetTitle().Color = new NativeUI.Color(42, 187, 155, 255); //Green Title
-
-// Instructional buttons
-let respectButton = new NativeUI.InstructionalButton("To pay respect", 0, "F");
-menu.AddInstructionalButton(respectButton);
-
-// Menu Items
-menu.AddItem(new NativeUI.UIMenuListItem(
-    "List Item",
-    "Description for List Item",
-    new NativeUI.ItemsCollection(["Item 1", "Item 2", "Item 3"])
-));
-
-menu.AddItem(new NativeUI.UIMenuSliderItem(
-    "Slider Item",
-    ["Fugiat", "pariatur", "consectetur", "ex", "duis", "magna", "nostrud", "et", "dolor", "laboris"],
-    5,
-    "Fugiat pariatur consectetur ex duis magna nostrud et dolor laboris est do pariatur amet sint.",
-    true
-));
-
-menu.AddItem(new NativeUI.UIMenuCheckboxItem(
-    "Checkbox Item",
-    false,
-    "Fugiat pariatur consectetur ex duis magna nostrud et dolor laboris est do pariatur amet sint."
-));
-
-menu.AddItem(new NativeUI.UIMenuItem(
-    "Dumb menu item",
-    "Just a menu item description"
-));
-
-const maxListItems = 100;
-let itemData = {
-    name: "test",
-    data: "great"
-};
-let autoListItem = new NativeUI.UIMenuAutoListItem(
-    'Auto list item: Write number',
-    `I want to write ~y~${maxListItems}~s~ in console.`,
-    -maxListItems,
-    maxListItems,
-    0,
-    itemData
-);
-autoListItem.PreCaptionText = '~HUD_COLOUR_RED~';
-menu.AddItem(autoListItem);
-
-//Example data, use for example alt.Player.all
-const players: string[] = ["DurtyFree", "Kar", "Tuxick", "Hardy", "Neta"];
-var playerKickIndex = 0;
-
-function onDynamicPlayerKickItemChange(item: NativeUI.UIMenuDynamicListItem, selectedValue: string, changeDirection: NativeUI.ChangeDirection): string {
-    if (changeDirection == NativeUI.ChangeDirection.Right) {
-        playerKickIndex++;
-        if (playerKickIndex >= players.length)
-            playerKickIndex = 0;
-    }
-    else {
-        playerKickIndex--;
-        if (playerKickIndex < 0)
-            playerKickIndex = players.length - 1;
-    }
-
-    //item.Data = playerId; //Set item.Data to player id for example, so you can kick him when menu item OnSelect is triggered
-    return players[playerKickIndex]; // Return players name as new selected value
-}
-
-let dynamicKickPlayerItem = new NativeUI.UIMenuDynamicListItem(
-    'Kick Player:',
-    onDynamicPlayerKickItemChange,
-    `Choose player to kick.`,
-    () => players[0] // First player name to be selected
-);
-dynamicKickPlayerItem.PreCaptionText = '~HUD_COLOUR_RED~';
-menu.AddItem(dynamicKickPlayerItem);
-
-const banners: { dict: string; name: string; }[] = [
-    { dict: "commonmenu", name: "interaction_bgd" },
-    { dict: "shopui_title_barber", name: "shopui_title_barber" },
-    { dict: "shopui_title_barber2", name: "shopui_title_barber2" },
-    { dict: "shopui_title_barber3", name: "shopui_title_barber3" },
-    { dict: "shopui_title_barber4", name: "shopui_title_barber4" },
-    { dict: "shopui_title_carmod", name: "shopui_title_carmod" },
-    { dict: "shopui_title_carmod2", name: "shopui_title_carmod2" },
-    { dict: "shopui_title_conveniencestore", name: "shopui_title_tennisstore" },
-    { dict: "shopui_title_conveniencestore", name: "shopui_title_conveniencestore" },
-    { dict: "shopui_title_darts", name: "shopui_title_darts" },
-    { dict: "shopui_title_gasstation", name: "shopui_title_gasstation" },
-    { dict: "shopui_title_golfshop", name: "shopui_title_golfshop" },
-    { dict: "shopui_title_graphics_franklin", name: "shopui_title_graphics_franklin" },
-    { dict: "shopui_title_graphics_micheal", name: "shopui_title_graphics_micheal" },
-    { dict: "shopui_title_graphics_trevor", name: "shopui_title_graphics_trevor" },
-    { dict: "shopui_title_gunclub", name: "shopui_title_gunclub" },
-    { dict: "shopui_title_highendfashion", name: "shopui_title_highendfashion" },
-    { dict: "shopui_title_highendsalon", name: "shopui_title_highendsalon" },
-    { dict: "shopui_title_liqourstore", name: "shopui_title_liqourstore" },
-    { dict: "shopui_title_liqourstore2", name: "shopui_title_liqourstore2" },
-    { dict: "shopui_title_liqourstore3", name: "shopui_title_liqourstore3" },
-    { dict: "shopui_title_lowendfashion", name: "shopui_title_lowendfashion" },
-    { dict: "shopui_title_lowendfashion2", name: "shopui_title_lowendfashion2" },
-    { dict: "shopui_title_midfashion", name: "shopui_title_midfashion" },
-    { dict: "shopui_title_movie_masks", name: "shopui_title_movie_masks" },
-    { dict: "shopui_title_tattoos", name: "shopui_title_tattoos" },
-    { dict: "shopui_title_tattoos2", name: "shopui_title_tattoos2" },
-    { dict: "shopui_title_tattoos3", name: "shopui_title_tattoos3" },
-    { dict: "shopui_title_tattoos4", name: "shopui_title_tattoos4" },
-    { dict: "shopui_title_tattoos5", name: "shopui_title_tattoos5" },
-    { dict: "shopui_title_tennis", name: "shopui_title_tennis" }
-];
-var bannerIndex = 0;
-
-function onDynamicBannerItemChange(item: NativeUI.UIMenuDynamicListItem, selectedValue: string, changeDirection: NativeUI.ChangeDirection): string {
-    if (changeDirection == NativeUI.ChangeDirection.Right) {
-        bannerIndex++;
-        if (bannerIndex >= banners.length)
-            bannerIndex = 0;
-    }
-    else {
-        bannerIndex--;
-        if (bannerIndex < 0)
-            bannerIndex = banners.length - 1;
-    }
-
-    let currentBanner = banners[bannerIndex];
-    menu.SetSpriteBannerType(new NativeUI.Sprite(currentBanner.dict, currentBanner.name, new NativeUI.Point(0, 0), new NativeUI.Size()));
-    return currentBanner.name;
-}
-
-let dynamicBannerItem = new NativeUI.UIMenuDynamicListItem(
-    'Banner:',
-    onDynamicBannerItemChange,
-    `Choose your menu banner.`,
-    () => banners[0].name
-);
-dynamicBannerItem.PreCaptionText = '~HUD_COLOUR_GREEN~';
-menu.AddItem(dynamicBannerItem);
-
-function onDynamicListItemChange(item: NativeUI.UIMenuDynamicListItem, selectedValue: string, changeDirection: NativeUI.ChangeDirection): string {
-    if (changeDirection == NativeUI.ChangeDirection.Right) {
-        game.setEntityCoordsNoOffset(alt.Player.local.scriptID, alt.Player.local.pos.x + 0.01, alt.Player.local.pos.y, alt.Player.local.pos.z, false, false, false);
-    }
-    else {
-        game.setEntityCoordsNoOffset(alt.Player.local.scriptID, alt.Player.local.pos.x - 0.01, alt.Player.local.pos.y, alt.Player.local.pos.z, false, false, false);
-    }
-
-    // Return new selected value
-    return alt.Player.local.pos.x.toFixed(2);
-}
-
-let dynamicListItem = new NativeUI.UIMenuDynamicListItem(
-    'Player X Position:',
-    onDynamicListItemChange, // This is called every list item change
-    `Change Players X position.`,
-    () => alt.Player.local.pos.x.toFixed(2) // This is called once on initial menu list item draw / menu opening 
-);
-dynamicListItem.PreCaptionText = '~HUD_COLOUR_RED~';
-menu.AddItem(dynamicListItem);
-
-// Sub Menu
-let menuItem = new NativeUI.UIMenuItem(
-    "Test Sub Menu", "Just a sub menu."
-);
-let niceButton = new NativeUI.InstructionalButton("Nice", NativeUI.Control.Sprint);
-niceButton.BindToItem(menuItem);
-menu.AddInstructionalButton(niceButton);
-
-menu.AddItem(menuItem);
-
-const subMenu = new NativeUI.Menu("NativeUI Sub Menu Test", "Sub Menu Subtitle", new NativeUI.Point(50, 50));
-subMenu.Visible = false;
-subMenu.GetTitle().Scale = 0.9; // Change sub menu title scale
-menu.AddSubMenu(subMenu, menuItem);
-
-subMenu.AddItem(new NativeUI.UIMenuItem(
-    "Sub menu item",
-    "Just a sub menu item"
-));
-
-// Events
-menu.ItemSelect.on((selectedItem: NativeUI.UIMenuListItem | NativeUI.UIMenuSliderItem | NativeUI.UIMenuCheckboxItem | NativeUI.UIMenuAutoListItem, selectedItemIndex: number) => {
-    if (selectedItem instanceof NativeUI.UIMenuListItem) {
-        alt.log("[ItemSelect] " + selectedItemIndex, selectedItem.SelectedItem.DisplayText, selectedItem.SelectedItem.Data);
-    } else if (selectedItem instanceof NativeUI.UIMenuSliderItem) {
-        alt.log("[ItemSelect] " + selectedItemIndex, selectedItem.Text, selectedItem.Index, selectedItem.IndexToItem(selectedItem.Index));
-    } else if (selectedItem instanceof NativeUI.UIMenuCheckboxItem) {
-        alt.log("[ItemSelect] " + selectedItemIndex, selectedItem.Text, selectedItem.Checked);
-    } else {
-        alt.log("[ItemSelect] " + selectedItemIndex, selectedItem.Text);
-    }
-});
-
-menu.ListChange.on((item: NativeUI.UIMenuListItem, newListItemIndex: number) => {
-    alt.log("[ListChange] " + newListItemIndex, item.Text);
-});
-
-menu.AutoListChange.on((item: NativeUI.UIMenuAutoListItem, newListItemIndex: number, changeDirection: NativeUI.ChangeDirection) => {
-    alt.log("[AutoListChange] " + newListItemIndex, item.Text);
-    if (item == autoListItem) {
-        alt.log("[AutoListChange] " + changeDirection as string + " " + item.Data.name + " " + item.Data.data);
-        alt.log(newListItemIndex);
-    }
-});
-
-menu.DynamicListChange.on((item: NativeUI.UIMenuDynamicListItem, newListItemIndex: number, changeDirection: NativeUI.ChangeDirection) => {
-    alt.log("[DynamicListChange] " + newListItemIndex, item.Text);
-    if (item == dynamicKickPlayerItem) {
-        alt.log("[DynamicListChange] " + changeDirection as string);
-    }
-});
-
-menu.IndexChange.on((newIndex: number) => {
-    alt.log("[IndexChange] " + "Current Selection: " + newIndex);
-});
-
-menu.SliderChange.on((item: NativeUI.UIMenuSliderItem, itemIndex: number, sliderIndex: number) => {
-    alt.log("[SliderChange] " + item.Text, itemIndex, sliderIndex);
-});
-
-menu.CheckboxChange.on((item: NativeUI.UIMenuCheckboxItem, checkedState: boolean) => {
-    alt.log("[CheckboxChange] " + item.Text, checkedState);
-});
-
-menu.MenuOpen.on(() => {
-    alt.log("[NativeUi] Menu opened");
-});
-
-menu.MenuClose.on(() => {
-    alt.log("[NativeUi] Menu closed");
-});
-
-menu.MenuChange.on((newMenu: NativeUI.Menu, enteredSubMenu: boolean) => {
-    alt.log("[MenuChange] " + newMenu.Id, enteredSubMenu);
-});
-
-alt.on('keyup', (key: number) => {
-    if (key === 0x4D) { //M Key		
-        if (menu.Visible) menu.Close();
-        else menu.Open();
-        NativeUI.MidsizedMessage.ShowMidsizedShardMessage("Menu opened", "Awesome", NativeUI.HudColor.HUD_COLOUR_BLACK, true, true);
-    } else if (key === 70 && menu.Visible) { //F Key
-        if (!NativeUI.BigMessage.IsVisible) {
-            NativeUI.BigMessage.ShowRankupMessage("You paid respect", "Well done sir", 1337);
-        }
-    }
-}); 
\ No newline at end of file
diff --git a/node_modules/@durtyfree/altv-nativeui/examples/nativeUI-example/includes/NativeUI/NativeUi.js b/node_modules/@durtyfree/altv-nativeui/examples/nativeUI-example/includes/NativeUI/NativeUi.js
deleted file mode 100644
index e5937ac..0000000
--- a/node_modules/@durtyfree/altv-nativeui/examples/nativeUI-example/includes/NativeUI/NativeUi.js
+++ /dev/null
@@ -1,837 +0,0 @@
-import * as alt from 'alt-client';
-import game from 'natives';
-import BadgeStyle from "./enums/BadgeStyle";
-import Font from "./enums/Font";
-import Alignment from './enums/Alignment';
-import Control from './enums/Control';
-import HudColor from './enums/HudColor';
-import ChangeDirection from './enums/ChangeDirection';
-import UIMenuCheckboxItem from "./items/UIMenuCheckboxItem";
-import UIMenuItem from "./items/UIMenuItem";
-import UIMenuListItem from "./items/UIMenuListItem";
-import UIMenuAutoListItem from "./items/UIMenuAutoListItem";
-import UIMenuSliderItem from "./items/UIMenuSliderItem";
-import Container from "./modules/Container";
-import ItemsCollection from "./modules/ItemsCollection";
-import ListItem from "./modules/ListItem";
-import ResRectangle from "./modules/ResRectangle";
-import ResText from "./modules/ResText";
-import Sprite from "./modules/Sprite";
-import Color from "./utils/Color";
-import Common from "./utils/Common";
-import LiteEvent from "./utils/LiteEvent";
-import Point from "./utils/Point";
-import Size from "./utils/Size";
-import UUIDV4 from "./utils/UUIDV4";
-import Screen from "./utils/Screen";
-import InstructionalButton from './modules/InstructionalButton';
-import Scaleform from './utils/Scaleform';
-import BigMessage from './modules/BigMessage';
-import MidsizedMessage from './modules/MidsizedMessage';
-import UIMenuDynamicListItem from './items/UIMenuDynamicListItem';
-let menuPool = [];
-export default class NativeUI {
-    constructor(title, subtitle, offset, spriteLibrary, spriteName) {
-        this._visible = true;
-        this._counterPretext = "";
-        this._counterOverride = undefined;
-        this._lastUpDownNavigation = 0;
-        this._lastLeftRightNavigation = 0;
-        this._extraOffset = 0;
-        this._buttonsEnabled = true;
-        this._justOpened = true;
-        this._justOpenedFromPool = false;
-        this._justClosedFromPool = false;
-        this._poolOpening = null;
-        this._safezoneOffset = new Point(0, 0);
-        this._activeItem = 1000;
-        this._maxItemsOnScreen = 9;
-        this._maxItem = this._maxItemsOnScreen;
-        this._mouseEdgeEnabled = true;
-        this._bannerSprite = null;
-        this._bannerRectangle = null;
-        this._recalculateDescriptionNextFrame = 1;
-        this._instructionalButtons = [];
-        this._defaultTitleScale = 1.15;
-        this._maxMenuItems = 1000;
-        this.Id = UUIDV4();
-        this.SelectTextLocalized = alt.getGxtText("HUD_INPUT2");
-        this.BackTextLocalized = alt.getGxtText("HUD_INPUT3");
-        this.WidthOffset = 0;
-        this.ParentMenu = null;
-        this.ParentItem = null;
-        this.MouseControlsEnabled = false;
-        this.CloseableByUser = true;
-        this.AUDIO_LIBRARY = "HUD_FRONTEND_DEFAULT_SOUNDSET";
-        this.AUDIO_UPDOWN = "NAV_UP_DOWN";
-        this.AUDIO_LEFTRIGHT = "NAV_LEFT_RIGHT";
-        this.AUDIO_SELECT = "SELECT";
-        this.AUDIO_BACK = "BACK";
-        this.AUDIO_ERROR = "ERROR";
-        this.MenuItems = [];
-        this.IndexChange = new LiteEvent();
-        this.ListChange = new LiteEvent();
-        this.AutoListChange = new LiteEvent();
-        this.DynamicListChange = new LiteEvent();
-        this.SliderChange = new LiteEvent();
-        this.CheckboxChange = new LiteEvent();
-        this.ItemSelect = new LiteEvent();
-        this.MenuOpen = new LiteEvent();
-        this.MenuClose = new LiteEvent();
-        this.MenuChange = new LiteEvent();
-        if (!(offset instanceof Point))
-            offset = Point.Parse(offset);
-        this._spriteLibrary = spriteLibrary || "commonmenu";
-        this._spriteName = spriteName || "interaction_bgd";
-        this._offset = new Point(offset.X, offset.Y);
-        this.Children = new Map();
-        this._instructionalButtonsScaleform = new Scaleform("instructional_buttons");
-        this.UpdateScaleform();
-        this._mainMenu = new Container(new Point(0, 0), new Size(700, 500), new Color(0, 0, 0, 0));
-        this._bannerSprite = new Sprite(this._spriteLibrary, this._spriteName, new Point(0 + this._offset.X, 0 + this._offset.Y), new Size(431, 107));
-        this._mainMenu.addItem((this._titleResText = new ResText(title, new Point(215 + this._offset.X, 20 + this._offset.Y), this._defaultTitleScale, new Color(255, 255, 255), 1, Alignment.Centered)));
-        if (subtitle !== "") {
-            this._mainMenu.addItem(new ResRectangle(new Point(0 + this._offset.X, 107 + this._offset.Y), new Size(431, 37), new Color(0, 0, 0, 255)));
-            this._mainMenu.addItem((this._subtitleResText = new ResText(subtitle, new Point(8 + this._offset.X, 110 + this._offset.Y), 0.35, new Color(255, 255, 255), 0, Alignment.Left)));
-            if (subtitle.startsWith("~")) {
-                this._counterPretext = subtitle.substr(0, 3);
-            }
-            this._counterText = new ResText("", new Point(425 + this._offset.X, 110 + this._offset.Y), 0.35, new Color(255, 255, 255), 0, Alignment.Right);
-            this._extraOffset += 37;
-        }
-        this._upAndDownSprite = new Sprite("commonmenu", "shop_arrows_upanddown", new Point(190 + this._offset.X, 147 + 37 * (this._maxItemsOnScreen + 1) + this._offset.Y - 37 + this._extraOffset), new Size(50, 50));
-        this._extraRectangleUp = new ResRectangle(new Point(0 + this._offset.X, 144 + 38 * (this._maxItemsOnScreen + 1) + this._offset.Y - 37 + this._extraOffset), new Size(431, 18), new Color(0, 0, 0, 200));
-        this._extraRectangleDown = new ResRectangle(new Point(0 + this._offset.X, 144 + 18 + 38 * (this._maxItemsOnScreen + 1) + this._offset.Y - 37 + this._extraOffset), new Size(431, 18), new Color(0, 0, 0, 200));
-        this._descriptionBar = new ResRectangle(new Point(this._offset.X, 123), new Size(431, 4), Color.Black);
-        this._descriptionRectangle = new Sprite("commonmenu", "gradient_bgd", new Point(this._offset.X, 127), new Size(431, 30));
-        this._descriptionText = new ResText("", new Point(this._offset.X + 5, 125), 0.35, new Color(255, 255, 255, 255), Font.ChaletLondon, Alignment.Left);
-        this._background = new Sprite("commonmenu", "gradient_bgd", new Point(this._offset.X, 144 + this._offset.Y - 37 + this._extraOffset), new Size(290, 25));
-        this._visible = false;
-        alt.everyTick(this.render.bind(this));
-    }
-    GetSpriteBanner() {
-        return this._bannerSprite;
-    }
-    GetRectangleBanner() {
-        return this._bannerRectangle;
-    }
-    GetTitle() {
-        return this._titleResText;
-    }
-    get MaxItemsVisible() {
-        return this._maxItemsOnScreen;
-    }
-    set MaxItemsVisible(value) {
-        this._maxItemsOnScreen = value;
-        this._maxItem = value;
-    }
-    get Title() {
-        return this._titleResText.Caption;
-    }
-    set Title(text) {
-        this._titleResText.Caption = text;
-    }
-    get GetSubTitle() {
-        return this._titleResText;
-    }
-    get SubTitle() {
-        return this._titleResText.Caption;
-    }
-    set SubTitle(text) {
-        this._subtitleResText.Caption = text;
-    }
-    get Visible() {
-        return this._visible;
-    }
-    set Visible(toggle) {
-        this._visible = toggle;
-        Common.PlaySound(this.AUDIO_BACK, this.AUDIO_LIBRARY);
-        this.UpdateScaleform();
-        if (toggle) {
-            this.UpdateDescriptionCaption();
-        }
-        if (this._justOpenedFromPool === true) {
-            this._justOpenedFromPool = false;
-            return;
-        }
-        if (toggle) {
-            this._justOpened = true;
-            this.MenuOpen.emit();
-            if (this.ParentMenu === null) {
-                if (!menuPool.includes(this) && this !== this._poolOpening) {
-                    const previousMenu = (menuPool.length) ? menuPool[menuPool.length - 1] : null;
-                    menuPool.push(this);
-                    if (previousMenu !== this._poolOpening && previousMenu !== null) {
-                        previousMenu._justClosedFromPool = true;
-                        previousMenu.Visible = false;
-                    }
-                }
-            }
-        }
-        else {
-            if (this._justClosedFromPool === true) {
-                this._justClosedFromPool = false;
-                return;
-            }
-            if (this.ParentMenu === null && menuPool.includes(this) && menuPool.length) {
-                if (menuPool[menuPool.length - 1] === this) {
-                    menuPool.pop();
-                    this._justOpenedFromPool = true;
-                    if (!menuPool.length) {
-                        this._poolOpening = null;
-                    }
-                }
-                if (menuPool.length) {
-                    this._poolOpening = menuPool[menuPool.length - 1];
-                    menuPool[menuPool.length - 1].Visible = true;
-                }
-            }
-            if (menuPool.length === 0) {
-                game.setMouseCursorSprite(1);
-            }
-        }
-    }
-    get CurrentSelection() {
-        return this._activeItem % this.MenuItems.length;
-    }
-    set CurrentSelection(v) {
-        this.MenuItems[this._activeItem % this.MenuItems.length].Selected = false;
-        this._activeItem = this._maxMenuItems - (this._maxMenuItems % this.MenuItems.length) + v;
-        if (this.CurrentSelection > this._maxItem) {
-            this._maxItem = this.CurrentSelection;
-            this._minItem = this.CurrentSelection - this._maxItemsOnScreen;
-        }
-        else if (this.CurrentSelection < this._minItem) {
-            this._maxItem = this._maxItemsOnScreen + this.CurrentSelection;
-            this._minItem = this.CurrentSelection;
-        }
-        this.IndexChange.emit(this.CurrentSelection, this.MenuItems[this._activeItem % this.MenuItems.length]);
-        this.UpdateDescriptionCaption();
-    }
-    DisableInstructionalButtons(disable) {
-        this._buttonsEnabled = !disable;
-    }
-    AddInstructionalButton(button) {
-        this._instructionalButtons.push(button);
-    }
-    SetSpriteBannerType(spriteBanner) {
-        this._bannerRectangle = null;
-        this.AddSpriteBannerType(spriteBanner);
-    }
-    SetRectangleBannerType(rectangle) {
-        this._bannerSprite = null;
-        this._bannerRectangle = rectangle;
-        this._bannerRectangle.Pos = new Point(this._offset.X, this._offset.Y);
-        this._bannerRectangle.Size = new Size(431 + this.WidthOffset, 107);
-    }
-    AddSpriteBannerType(spriteBanner) {
-        this._bannerSprite = spriteBanner;
-        this._bannerSprite.Size = new Size(431 + this.WidthOffset, 107);
-        this._bannerSprite.Pos = new Point(this._offset.X, this._offset.Y);
-    }
-    SetNoBannerType() {
-        this._bannerSprite = null;
-        this._bannerRectangle = new ResRectangle(new Point(this._offset.X, this._offset.Y), new Size(431 + this.WidthOffset, 107), new Color(0, 0, 0, 0));
-    }
-    RemoveInstructionalButton(button) {
-        for (let i = 0; i < this._instructionalButtons.length; i++) {
-            if (this._instructionalButtons[i] === button) {
-                this._instructionalButtons.splice(i, 1);
-            }
-        }
-    }
-    RecalculateDescriptionPosition() {
-        const count = (this.MenuItems.length > this._maxItemsOnScreen + 1) ? this._maxItemsOnScreen + 2 : this.MenuItems.length;
-        this._descriptionBar.Size = new Size(431 + this.WidthOffset, 4);
-        this._descriptionRectangle.Size = new Size(431 + this.WidthOffset, 30);
-        this._descriptionBar.Pos = new Point(this._offset.X, 149 - 37 + this._extraOffset + this._offset.Y);
-        this._descriptionRectangle.Pos = new Point(this._offset.X, 149 - 37 + this._extraOffset + this._offset.Y);
-        this._descriptionText.Pos = new Point(this._offset.X + 8, 155 - 37 + this._extraOffset + this._offset.Y);
-        this._descriptionBar.Pos = new Point(this._offset.X, 38 * count + this._descriptionBar.Pos.Y);
-        this._descriptionRectangle.Pos = new Point(this._offset.X, 38 * count + this._descriptionRectangle.Pos.Y);
-        this._descriptionText.Pos = new Point(this._offset.X + 8, 38 * count + this._descriptionText.Pos.Y);
-    }
-    SetMenuWidthOffset(widthOffset) {
-        this.WidthOffset = widthOffset;
-        if (this._bannerSprite != null) {
-            this._bannerSprite.Size = new Size(431 + this.WidthOffset, 107);
-        }
-        this._mainMenu.Items[0].pos = new Point((this.WidthOffset + this._offset.X + 431) / 2, 20 + this._offset.Y);
-        if (this._counterText) {
-            this._counterText.Pos = new Point(425 + this._offset.X + widthOffset, 110 + this._offset.Y);
-        }
-        if (this._mainMenu.Items.length >= 2) {
-            const tmp = this._mainMenu.Items[1];
-            tmp.size = new Size(431 + this.WidthOffset, 37);
-        }
-        if (this._bannerRectangle != null) {
-            this._bannerRectangle.Size = new Size(431 + this.WidthOffset, 107);
-        }
-    }
-    AddItem(item) {
-        if (this._justOpened)
-            this._justOpened = false;
-        item.Offset = this._offset;
-        item.Parent = this;
-        item.SetVerticalPosition(this.MenuItems.length * 25 - 37 + this._extraOffset);
-        this.MenuItems.push(item);
-        this.RefreshIndex();
-    }
-    RemoveItem(item) {
-        for (let i = 0; i < this.MenuItems.length; i++) {
-            if (this.MenuItems[i] === item) {
-                this.MenuItems.splice(i, 1);
-            }
-        }
-        this.RefreshIndex();
-    }
-    RefreshIndex() {
-        if (this.MenuItems.length == 0) {
-            this._activeItem = this._maxMenuItems;
-            this._maxItem = this._maxItemsOnScreen;
-            this._minItem = 0;
-            return;
-        }
-        for (let i = 0; i < this.MenuItems.length; i++)
-            this.MenuItems[i].Selected = false;
-        this._activeItem = this._maxMenuItems - (this._maxMenuItems % this.MenuItems.length);
-        this._maxItem = this._maxItemsOnScreen;
-        this._minItem = 0;
-        if (this._visible) {
-            this.UpdateDescriptionCaption();
-        }
-    }
-    Clear() {
-        this.MenuItems = [];
-        this.RecalculateDescriptionPosition();
-    }
-    Open() {
-        this.Visible = true;
-    }
-    CleanUp(closeChildren = false) {
-        if (closeChildren) {
-            this.Children.forEach(m => {
-                m.Close(true);
-            });
-        }
-        this.MenuItems.filter(menuItem => menuItem instanceof UIMenuDynamicListItem).forEach((menuItem) => {
-            menuItem.SelectedValue = undefined;
-        });
-        this.RefreshIndex();
-    }
-    Close(closeChildren = false) {
-        this.Visible = false;
-        this.CleanUp(closeChildren);
-        this.MenuClose.emit(true);
-    }
-    GoLeft() {
-        if (!(this.MenuItems[this.CurrentSelection] instanceof UIMenuListItem) &&
-            !(this.MenuItems[this.CurrentSelection] instanceof UIMenuAutoListItem) &&
-            !(this.MenuItems[this.CurrentSelection] instanceof UIMenuDynamicListItem) &&
-            !(this.MenuItems[this.CurrentSelection] instanceof UIMenuSliderItem) ||
-            !this.MenuItems[this.CurrentSelection].Enabled)
-            return;
-        if (this.MenuItems[this.CurrentSelection] instanceof UIMenuListItem) {
-            const it = this.MenuItems[this.CurrentSelection];
-            if (it.Collection.length == 0)
-                return;
-            it.Index--;
-            Common.PlaySound(this.AUDIO_LEFTRIGHT, this.AUDIO_LIBRARY);
-            this.ListChange.emit(it, it.Index);
-        }
-        else if (this.MenuItems[this.CurrentSelection] instanceof UIMenuAutoListItem) {
-            const it = this.MenuItems[this.CurrentSelection];
-            if (it.SelectedValue <= it.LowerThreshold) {
-                it.SelectedValue = it.UpperThreshold;
-            }
-            else {
-                it.SelectedValue -= it.LeftMoveThreshold;
-            }
-            Common.PlaySound(this.AUDIO_LEFTRIGHT, this.AUDIO_LIBRARY);
-            this.AutoListChange.emit(it, it.SelectedValue, ChangeDirection.Left);
-        }
-        else if (this.MenuItems[this.CurrentSelection] instanceof UIMenuDynamicListItem) {
-            const it = this.MenuItems[this.CurrentSelection];
-            it.SelectionChangeHandlerPromise(it, it.SelectedValue, ChangeDirection.Left).then((newSelectedValue) => {
-                it.SelectedValue = newSelectedValue;
-                this.DynamicListChange.emit(it, it.SelectedValue, ChangeDirection.Left);
-            });
-            Common.PlaySound(this.AUDIO_LEFTRIGHT, this.AUDIO_LIBRARY);
-        }
-        else if (this.MenuItems[this.CurrentSelection] instanceof UIMenuSliderItem) {
-            const it = this.MenuItems[this.CurrentSelection];
-            it.Index = it.Index - 1;
-            Common.PlaySound(this.AUDIO_LEFTRIGHT, this.AUDIO_LIBRARY);
-            this.SliderChange.emit(it, it.Index, it.IndexToItem(it.Index));
-        }
-    }
-    GoRight() {
-        if (!(this.MenuItems[this.CurrentSelection] instanceof UIMenuListItem) &&
-            !(this.MenuItems[this.CurrentSelection] instanceof UIMenuAutoListItem) &&
-            !(this.MenuItems[this.CurrentSelection] instanceof UIMenuDynamicListItem) &&
-            !(this.MenuItems[this.CurrentSelection] instanceof UIMenuSliderItem) ||
-            !this.MenuItems[this.CurrentSelection].Enabled)
-            return;
-        if (this.MenuItems[this.CurrentSelection] instanceof UIMenuListItem) {
-            const it = this.MenuItems[this.CurrentSelection];
-            if (it.Collection.length == 0)
-                return;
-            it.Index++;
-            Common.PlaySound(this.AUDIO_LEFTRIGHT, this.AUDIO_LIBRARY);
-            this.ListChange.emit(it, it.Index);
-        }
-        else if (this.MenuItems[this.CurrentSelection] instanceof UIMenuAutoListItem) {
-            const it = this.MenuItems[this.CurrentSelection];
-            if (it.SelectedValue >= it.UpperThreshold) {
-                it.SelectedValue = it.LowerThreshold;
-            }
-            else {
-                it.SelectedValue += it.RightMoveThreshold;
-            }
-            Common.PlaySound(this.AUDIO_LEFTRIGHT, this.AUDIO_LIBRARY);
-            this.AutoListChange.emit(it, it.SelectedValue, ChangeDirection.Right);
-        }
-        else if (this.MenuItems[this.CurrentSelection] instanceof UIMenuDynamicListItem) {
-            const it = this.MenuItems[this.CurrentSelection];
-            it.SelectionChangeHandlerPromise(it, it.SelectedValue, ChangeDirection.Right).then((newSelectedValue) => {
-                it.SelectedValue = newSelectedValue;
-                this.DynamicListChange.emit(it, it.SelectedValue, ChangeDirection.Right);
-            });
-            Common.PlaySound(this.AUDIO_LEFTRIGHT, this.AUDIO_LIBRARY);
-        }
-        else if (this.MenuItems[this.CurrentSelection] instanceof UIMenuSliderItem) {
-            const it = this.MenuItems[this.CurrentSelection];
-            it.Index++;
-            Common.PlaySound(this.AUDIO_LEFTRIGHT, this.AUDIO_LIBRARY);
-            this.SliderChange.emit(it, it.Index, it.IndexToItem(it.Index));
-        }
-    }
-    SelectItem() {
-        if (!this.MenuItems[this.CurrentSelection].Enabled) {
-            Common.PlaySound(this.AUDIO_ERROR, this.AUDIO_LIBRARY);
-            return;
-        }
-        const it = this.MenuItems[this.CurrentSelection];
-        if (this.MenuItems[this.CurrentSelection] instanceof UIMenuCheckboxItem) {
-            it.Checked = !it.Checked;
-            Common.PlaySound(this.AUDIO_SELECT, this.AUDIO_LIBRARY);
-            this.CheckboxChange.emit(it, it.Checked);
-        }
-        else {
-            Common.PlaySound(this.AUDIO_SELECT, this.AUDIO_LIBRARY);
-            this.ItemSelect.emit(it, this.CurrentSelection);
-            if (this.Children.has(it.Id)) {
-                const subMenu = this.Children.get(it.Id);
-                this.Visible = false;
-                subMenu.Visible = true;
-                this.MenuChange.emit(subMenu, true);
-            }
-        }
-        it.fireEvent();
-    }
-    HasCurrentSelectionChildren() {
-        const it = this.MenuItems[this.CurrentSelection];
-        if (this.MenuItems[this.CurrentSelection] instanceof UIMenuItem) {
-            if (this.Children.has(it.Id)) {
-                return true;
-            }
-        }
-        return false;
-    }
-    IsMouseInListItemArrows(item, topLeft, safezone) {
-        game.beginTextCommandGetWidth("jamyfafi");
-        game.addTextComponentSubstringPlayerName(item.Text);
-        let res = Screen.ResolutionMaintainRatio;
-        let screenw = res.Width;
-        let screenh = res.Height;
-        const height = 1080.0;
-        const ratio = screenw / screenh;
-        let width = height * ratio;
-        const labelSize = game.endTextCommandGetWidth(false) * width * 0.35;
-        const labelSizeX = 5 + labelSize + 10;
-        const arrowSizeX = 431 - labelSizeX;
-        return Screen.IsMouseInBounds(topLeft, new Size(labelSizeX, 38))
-            ? 1
-            : Screen.IsMouseInBounds(new Point(topLeft.X + labelSizeX, topLeft.Y), new Size(arrowSizeX, 38))
-                ? 2
-                : 0;
-    }
-    ProcessMouse() {
-        if (!this.Visible || this._justOpened || this.MenuItems.length == 0 || !this.MouseControlsEnabled) {
-            this.MenuItems.filter(i => i.Hovered).forEach(i => (i.Hovered = false));
-            return;
-        }
-        alt.showCursor(true);
-        let limit = this.MenuItems.length - 1;
-        let counter = 0;
-        if (this.MenuItems.length > this._maxItemsOnScreen + 1)
-            limit = this._maxItem;
-        if (Screen.IsMouseInBounds(new Point(0, 0), new Size(30, 1080)) && this._mouseEdgeEnabled) {
-            game.setGameplayCamRelativeHeading(game.getGameplayCamRelativeHeading() + 5.0);
-            game.setMouseCursorSprite(6);
-        }
-        else if (Screen.IsMouseInBounds(new Point(Screen.ResolutionMaintainRatio.Width - 30.0, 0), new Size(30, 1080)) && this._mouseEdgeEnabled) {
-            game.setGameplayCamRelativeHeading(game.getGameplayCamRelativeHeading() - 5.0);
-            game.setMouseCursorSprite(7);
-        }
-        else if (this._mouseEdgeEnabled) {
-            game.setMouseCursorSprite(1);
-        }
-        for (let i = this._minItem; i <= limit; i++) {
-            let xpos = this._offset.X;
-            let ypos = this._offset.Y + 144 - 37 + this._extraOffset + counter * 38;
-            let yposSelected = this._offset.Y + 144 - 37 + this._extraOffset + this._safezoneOffset.Y + this.CurrentSelection * 38;
-            let xsize = 431 + this.WidthOffset;
-            const ysize = 38;
-            const uiMenuItem = this.MenuItems[i];
-            if (Screen.IsMouseInBounds(new Point(xpos, ypos), new Size(xsize, ysize))) {
-                uiMenuItem.Hovered = true;
-                const res = this.IsMouseInListItemArrows(this.MenuItems[i], new Point(xpos, ypos), 0);
-                if (uiMenuItem.Hovered && res == 1 && (this.MenuItems[i] instanceof UIMenuListItem || this.MenuItems[i] instanceof UIMenuAutoListItem || this.MenuItems[i] instanceof UIMenuDynamicListItem)) {
-                    game.setMouseCursorSprite(5);
-                }
-                if (game.isControlJustReleased(0, 24) || game.isDisabledControlJustReleased(0, 24))
-                    if (uiMenuItem.Selected && uiMenuItem.Enabled) {
-                        if ((this.MenuItems[i] instanceof UIMenuListItem || this.MenuItems[i] instanceof UIMenuAutoListItem || this.MenuItems[i] instanceof UIMenuDynamicListItem)
-                            && this.IsMouseInListItemArrows(this.MenuItems[i], new Point(xpos, ypos), 0) > 0) {
-                            switch (res) {
-                                case 1:
-                                    Common.PlaySound(this.AUDIO_SELECT, this.AUDIO_LIBRARY);
-                                    this.MenuItems[i].fireEvent();
-                                    this.ItemSelect.emit(this.MenuItems[i], i);
-                                    break;
-                                case 2:
-                                    let it = this.MenuItems[i];
-                                    if ((it.Collection == null ? it.Items.Count : it.Collection.Count) > 0) {
-                                        it.Index++;
-                                        Common.PlaySound(this.AUDIO_LEFTRIGHT, this.AUDIO_LIBRARY);
-                                        this.ListChange.emit(it, it.Index);
-                                    }
-                                    break;
-                            }
-                        }
-                        else
-                            this.SelectItem();
-                    }
-                    else if (!uiMenuItem.Selected) {
-                        this.CurrentSelection = i;
-                        Common.PlaySound(this.AUDIO_UPDOWN, this.AUDIO_LIBRARY);
-                        this.IndexChange.emit(this.CurrentSelection, this.MenuItems[this._activeItem % this.MenuItems.length]);
-                        this.SelectItem();
-                        this.UpdateDescriptionCaption();
-                        this.UpdateScaleform();
-                    }
-                    else if (!uiMenuItem.Enabled && uiMenuItem.Selected) {
-                        Common.PlaySound(this.AUDIO_ERROR, this.AUDIO_LIBRARY);
-                    }
-            }
-            else
-                uiMenuItem.Hovered = false;
-            counter++;
-        }
-        const extraY = 144 + 38 * (this._maxItemsOnScreen + 1) + this._offset.Y - 37 + this._extraOffset + this._safezoneOffset.Y;
-        const extraX = this._safezoneOffset.X + this._offset.X;
-        if (this.MenuItems.length <= this._maxItemsOnScreen + 1)
-            return;
-        if (Screen.IsMouseInBounds(new Point(extraX, extraY), new Size(431 + this.WidthOffset, 18))) {
-            this._extraRectangleUp.Color = new Color(30, 30, 30, 255);
-            if (game.isControlJustPressed(0, 24) || game.isDisabledControlJustPressed(0, 24)) {
-                if (this.MenuItems.length > this._maxItemsOnScreen + 1)
-                    this.GoUpOverflow();
-                else
-                    this.GoUp();
-            }
-        }
-        else
-            this._extraRectangleUp.Color = new Color(0, 0, 0, 200);
-        if (Screen.IsMouseInBounds(new Point(extraX, extraY + 18), new Size(431 + this.WidthOffset, 18))) {
-            this._extraRectangleDown.Color = new Color(30, 30, 30, 255);
-            if (game.isControlJustPressed(0, 24) || game.isDisabledControlJustPressed(0, 24)) {
-                if (this.MenuItems.length > this._maxItemsOnScreen + 1)
-                    this.GoDownOverflow();
-                else
-                    this.GoDown();
-            }
-        }
-        else
-            this._extraRectangleDown.Color = new Color(0, 0, 0, 200);
-    }
-    ProcessControl() {
-        if (!this.Visible)
-            return;
-        if (this._justOpened) {
-            this._justOpened = false;
-            return;
-        }
-        if (game.isControlJustReleased(0, 177)) {
-            this.GoBack();
-        }
-        if (this.MenuItems.length == 0)
-            return;
-        if (game.isControlPressed(0, 172) && this._lastUpDownNavigation + 120 < Date.now()) {
-            this._lastUpDownNavigation = Date.now();
-            if (this.MenuItems.length > this._maxItemsOnScreen + 1)
-                this.GoUpOverflow();
-            else
-                this.GoUp();
-            this.UpdateScaleform();
-        }
-        else if (game.isControlJustReleased(0, 172)) {
-            this._lastUpDownNavigation = 0;
-        }
-        else if (game.isControlPressed(0, 173) && this._lastUpDownNavigation + 120 < Date.now()) {
-            this._lastUpDownNavigation = Date.now();
-            if (this.MenuItems.length > this._maxItemsOnScreen + 1)
-                this.GoDownOverflow();
-            else
-                this.GoDown();
-            this.UpdateScaleform();
-        }
-        else if (game.isControlJustReleased(0, 173)) {
-            this._lastUpDownNavigation = 0;
-        }
-        else if (game.isControlPressed(0, 174) && this._lastLeftRightNavigation + 100 < Date.now()) {
-            this._lastLeftRightNavigation = Date.now();
-            this.GoLeft();
-        }
-        else if (game.isControlJustReleased(0, 174)) {
-            this._lastLeftRightNavigation = 0;
-        }
-        else if (game.isControlPressed(0, 175) && this._lastLeftRightNavigation + 100 < Date.now()) {
-            this._lastLeftRightNavigation = Date.now();
-            this.GoRight();
-        }
-        else if (game.isControlJustReleased(0, 175)) {
-            this._lastLeftRightNavigation = 0;
-        }
-        else if (game.isControlJustReleased(0, 201)) {
-            this.SelectItem();
-        }
-    }
-    GoUpOverflow() {
-        if (this.MenuItems.length <= this._maxItemsOnScreen + 1)
-            return;
-        if (this._activeItem % this.MenuItems.length <= this._minItem) {
-            if (this._activeItem % this.MenuItems.length == 0) {
-                this._minItem = this.MenuItems.length - this._maxItemsOnScreen - 1;
-                this._maxItem = this.MenuItems.length - 1;
-                this.MenuItems[this._activeItem % this.MenuItems.length].Selected = false;
-                this._activeItem = this._maxMenuItems - (this._maxMenuItems % this.MenuItems.length);
-                this._activeItem += this.MenuItems.length - 1;
-                this.MenuItems[this._activeItem % this.MenuItems.length].Selected = true;
-            }
-            else {
-                this._minItem--;
-                this._maxItem--;
-                this.MenuItems[this._activeItem % this.MenuItems.length].Selected = false;
-                this._activeItem--;
-                this.MenuItems[this._activeItem % this.MenuItems.length].Selected = true;
-            }
-        }
-        else {
-            this.MenuItems[this._activeItem % this.MenuItems.length].Selected = false;
-            this._activeItem--;
-            this.MenuItems[this._activeItem % this.MenuItems.length].Selected = true;
-        }
-        Common.PlaySound(this.AUDIO_UPDOWN, this.AUDIO_LIBRARY);
-        this.IndexChange.emit(this.CurrentSelection, this.MenuItems[this._activeItem % this.MenuItems.length]);
-        this.UpdateDescriptionCaption();
-    }
-    GoUp() {
-        if (this.MenuItems.length > this._maxItemsOnScreen + 1)
-            return;
-        this.MenuItems[this._activeItem % this.MenuItems.length].Selected = false;
-        this._activeItem--;
-        this.MenuItems[this._activeItem % this.MenuItems.length].Selected = true;
-        Common.PlaySound(this.AUDIO_UPDOWN, this.AUDIO_LIBRARY);
-        this.IndexChange.emit(this.CurrentSelection, this.MenuItems[this._activeItem % this.MenuItems.length]);
-        this.UpdateDescriptionCaption();
-    }
-    GoDownOverflow() {
-        if (this.MenuItems.length <= this._maxItemsOnScreen + 1)
-            return;
-        if (this._activeItem % this.MenuItems.length >= this._maxItem) {
-            if (this._activeItem % this.MenuItems.length == this.MenuItems.length - 1) {
-                this._minItem = 0;
-                this._maxItem = this._maxItemsOnScreen;
-                this.MenuItems[this._activeItem % this.MenuItems.length].Selected = false;
-                this._activeItem = this._maxMenuItems - (this._maxMenuItems % this.MenuItems.length);
-                this.MenuItems[this._activeItem % this.MenuItems.length].Selected = true;
-            }
-            else {
-                this._minItem++;
-                this._maxItem++;
-                this.MenuItems[this._activeItem % this.MenuItems.length].Selected = false;
-                this._activeItem++;
-                this.MenuItems[this._activeItem % this.MenuItems.length].Selected = true;
-            }
-        }
-        else {
-            this.MenuItems[this._activeItem % this.MenuItems.length].Selected = false;
-            this._activeItem++;
-            this.MenuItems[this._activeItem % this.MenuItems.length].Selected = true;
-        }
-        Common.PlaySound(this.AUDIO_UPDOWN, this.AUDIO_LIBRARY);
-        this.IndexChange.emit(this.CurrentSelection, this.MenuItems[this._activeItem % this.MenuItems.length]);
-        this.UpdateDescriptionCaption();
-    }
-    GoDown() {
-        if (this.MenuItems.length > this._maxItemsOnScreen + 1)
-            return;
-        this.MenuItems[this._activeItem % this.MenuItems.length].Selected = false;
-        this._activeItem++;
-        this.MenuItems[this._activeItem % this.MenuItems.length].Selected = true;
-        Common.PlaySound(this.AUDIO_UPDOWN, this.AUDIO_LIBRARY);
-        this.IndexChange.emit(this.CurrentSelection, this.MenuItems[this._activeItem % this.MenuItems.length]);
-        this.UpdateDescriptionCaption();
-    }
-    GoBack() {
-        if (this.ParentMenu != null) {
-            this.Visible = false;
-            this.ParentMenu.Visible = true;
-            this.MenuChange.emit(this.ParentMenu, false);
-            this.MenuClose.emit(false);
-        }
-        else if (this.CloseableByUser) {
-            this.Visible = false;
-            this.CleanUp(true);
-            this.MenuClose.emit(false);
-        }
-    }
-    BindMenuToItem(menuToBind, itemToBindTo) {
-        if (!this.MenuItems.includes(itemToBindTo)) {
-            this.AddItem(itemToBindTo);
-        }
-        menuToBind.ParentMenu = this;
-        menuToBind.ParentItem = itemToBindTo;
-        this.Children.set(itemToBindTo.Id, menuToBind);
-    }
-    AddSubMenu(subMenu, itemToBindTo) {
-        this.BindMenuToItem(subMenu, itemToBindTo);
-    }
-    ReleaseMenuFromItem(releaseFrom) {
-        if (!this.Children.has(releaseFrom.Id))
-            return false;
-        const menu = this.Children.get(releaseFrom.Id);
-        menu.ParentItem = null;
-        menu.ParentMenu = null;
-        this.Children.delete(releaseFrom.Id);
-        return true;
-    }
-    UpdateDescriptionCaption() {
-        if (this.MenuItems.length) {
-            this._descriptionText.Caption = this.MenuItems[this._activeItem % this.MenuItems.length].Description;
-            this._descriptionText.Wrap = 400;
-            this._recalculateDescriptionNextFrame++;
-        }
-    }
-    CalculateDescription() {
-        if (this._recalculateDescriptionNextFrame > 0) {
-            this._recalculateDescriptionNextFrame--;
-        }
-        this.RecalculateDescriptionPosition();
-        if (this.MenuItems.length > 0 && this._descriptionText.Caption && this.MenuItems[this._activeItem % this.MenuItems.length].Description.trim() !== "") {
-            const numLines = Screen.GetLineCount(this._descriptionText.Caption, this._descriptionText.Pos, this._descriptionText.Font, this._descriptionText.Scale, this._descriptionText.Wrap);
-            this._descriptionRectangle.Size = new Size(431 + this.WidthOffset, (numLines * 25) + 15);
-            if (numLines === 0) {
-                this._recalculateDescriptionNextFrame++;
-            }
-        }
-    }
-    UpdateScaleform() {
-        if (!this.Visible || !this._buttonsEnabled)
-            return;
-        this._instructionalButtonsScaleform.callFunction("CLEAR_ALL");
-        this._instructionalButtonsScaleform.callFunction("TOGGLE_MOUSE_BUTTONS", 0);
-        this._instructionalButtonsScaleform.callFunction("CREATE_CONTAINER");
-        this._instructionalButtonsScaleform.callFunction("SET_DATA_SLOT", 0, game.getControlInstructionalButton(2, Control.PhoneSelect, false), this.SelectTextLocalized);
-        this._instructionalButtonsScaleform.callFunction("SET_DATA_SLOT", 1, game.getControlInstructionalButton(2, Control.PhoneCancel, false), this.BackTextLocalized);
-        let count = 2;
-        this._instructionalButtons.filter(b => b.ItemBind == null || this.MenuItems[this.CurrentSelection] == b.ItemBind).forEach((button) => {
-            this._instructionalButtonsScaleform.callFunction("SET_DATA_SLOT", count, button.GetButtonId(), button.Text);
-            count++;
-        });
-        this._instructionalButtonsScaleform.callFunction("DRAW_INSTRUCTIONAL_BUTTONS", -1);
-    }
-    render() {
-        if (!this.Visible)
-            return;
-        if (this._buttonsEnabled) {
-            game.drawScaleformMovieFullscreen(this._instructionalButtonsScaleform.handle, 255, 255, 255, 255, 0);
-            game.hideHudComponentThisFrame(6);
-            game.hideHudComponentThisFrame(7);
-            game.hideHudComponentThisFrame(9);
-        }
-        if (this._justOpened) {
-            if (this._bannerSprite != null && !this._bannerSprite.IsTextureDictionaryLoaded)
-                this._bannerSprite.LoadTextureDictionary();
-            if (!this._background.IsTextureDictionaryLoaded)
-                this._background.LoadTextureDictionary();
-            if (!this._descriptionRectangle.IsTextureDictionaryLoaded)
-                this._descriptionRectangle.LoadTextureDictionary();
-            if (!this._upAndDownSprite.IsTextureDictionaryLoaded)
-                this._upAndDownSprite.LoadTextureDictionary();
-            if (!this._recalculateDescriptionNextFrame)
-                this._recalculateDescriptionNextFrame++;
-        }
-        this._mainMenu.Draw();
-        this.ProcessMouse();
-        this.ProcessControl();
-        this._background.Size = this.MenuItems.length > this._maxItemsOnScreen + 1
-            ? new Size(431 + this.WidthOffset, 38 * (this._maxItemsOnScreen + 1))
-            : new Size(431 + this.WidthOffset, 38 * this.MenuItems.length);
-        this._background.Draw();
-        if (this._recalculateDescriptionNextFrame) {
-            this.CalculateDescription();
-        }
-        if (this.MenuItems.length > 0) {
-            this.MenuItems[this._activeItem % this.MenuItems.length].Selected = true;
-            if (this.MenuItems[this._activeItem % this.MenuItems.length].Description.trim() !== "") {
-                this._descriptionBar.Draw();
-                this._descriptionRectangle.Draw();
-                this._descriptionText.Draw();
-            }
-        }
-        let count = 0;
-        if (this.MenuItems.length <= this._maxItemsOnScreen + 1) {
-            for (const item of this.MenuItems) {
-                item.SetVerticalPosition(count * 38 - 37 + this._extraOffset);
-                item.Draw();
-                count++;
-            }
-            if (this._counterText && this._counterOverride) {
-                this._counterText.Caption = this._counterPretext + this._counterOverride;
-                this._counterText.Draw();
-            }
-        }
-        else {
-            for (let index = this._minItem; index <= this._maxItem; index++) {
-                let item = this.MenuItems[index];
-                item.SetVerticalPosition(count * 38 - 37 + this._extraOffset);
-                item.Draw();
-                count++;
-            }
-            this._extraRectangleUp.Size = new Size(431 + this.WidthOffset, 18);
-            this._extraRectangleDown.Size = new Size(431 + this.WidthOffset, 18);
-            this._upAndDownSprite.Pos = new Point(190 + this._offset.X + this.WidthOffset / 2, 147 + 37 * (this._maxItemsOnScreen + 1) + this._offset.Y - 37 + this._extraOffset);
-            this._extraRectangleUp.Draw();
-            this._extraRectangleDown.Draw();
-            this._upAndDownSprite.Draw();
-            if (this._counterText) {
-                if (!this._counterOverride) {
-                    const cap = this.CurrentSelection + 1 + " / " + this.MenuItems.length;
-                    this._counterText.Caption = this._counterPretext + cap;
-                }
-                else {
-                    this._counterText.Caption = this._counterPretext + this._counterOverride;
-                }
-                this._counterText.Draw();
-            }
-        }
-        if (this._bannerRectangle != null)
-            this._bannerRectangle.Draw();
-        if (this._bannerSprite != null)
-            this._bannerSprite.Draw();
-    }
-}
-export { NativeUI as Menu, UIMenuItem, UIMenuListItem, UIMenuAutoListItem, UIMenuDynamicListItem, UIMenuCheckboxItem, UIMenuSliderItem, BadgeStyle, ChangeDirection, Font, Alignment, Control, HudColor, Sprite, ResRectangle, InstructionalButton, Point, Size, Color, ItemsCollection, ListItem, BigMessage, MidsizedMessage };
diff --git a/node_modules/@durtyfree/altv-nativeui/examples/nativeUI-example/includes/NativeUI/NativeUi.ts b/node_modules/@durtyfree/altv-nativeui/examples/nativeUI-example/includes/NativeUI/NativeUi.ts
deleted file mode 100644
index fa01a54..0000000
--- a/node_modules/@durtyfree/altv-nativeui/examples/nativeUI-example/includes/NativeUI/NativeUi.ts
+++ /dev/null
@@ -1,988 +0,0 @@
-import * as alt from 'alt-client';
-import game from 'natives';
-import BadgeStyle from "./enums/BadgeStyle";
-import Font from "./enums/Font";
-import Alignment from './enums/Alignment';
-import Control from './enums/Control';
-import HudColor from './enums/HudColor';
-import ChangeDirection from './enums/ChangeDirection';
-import UIMenuCheckboxItem from "./items/UIMenuCheckboxItem";
-import UIMenuItem from "./items/UIMenuItem";
-import UIMenuListItem from "./items/UIMenuListItem";
-import UIMenuAutoListItem from "./items/UIMenuAutoListItem";
-import UIMenuSliderItem from "./items/UIMenuSliderItem";
-import Container from "./modules/Container";
-import ItemsCollection from "./modules/ItemsCollection";
-import ListItem from "./modules/ListItem";
-import ResRectangle from "./modules/ResRectangle";
-import ResText from "./modules/ResText";
-import Sprite from "./modules/Sprite";
-import Color from "./utils/Color";
-import Common from "./utils/Common";
-import LiteEvent from "./utils/LiteEvent";
-import Point from "./utils/Point";
-import Size from "./utils/Size";
-import UUIDV4 from "./utils/UUIDV4";
-import Screen from "./utils/Screen";
-import InstructionalButton from './modules/InstructionalButton';
-import Scaleform from './utils/Scaleform';
-import BigMessage from './modules/BigMessage';
-import MidsizedMessage from './modules/MidsizedMessage';
-import UIMenuDynamicListItem from './items/UIMenuDynamicListItem';
-import Funcs from '../Funcs';
-
-let menuPool: NativeUI[] = [];
-
-export default class NativeUI {
-    private _visible: boolean = true;
-    private _counterPretext: string = "";
-    private _counterOverride: string = undefined;
-    private _spriteLibrary: string;
-    private _spriteName: string;
-    private _offset: Point;
-    private _lastUpDownNavigation = 0;
-    private _lastLeftRightNavigation = 0;
-    private _extraOffset: number = 0;
-    private _buttonsEnabled: boolean = true;
-    private _justOpened: boolean = true;
-    private _justOpenedFromPool: boolean = false;
-    private _justClosedFromPool: boolean = false;
-    private _poolOpening: NativeUI = null;
-    private _safezoneOffset: Point = new Point(0, 0);
-    private _activeItem: number = 1000;
-    private _maxItemsOnScreen: number = 9;
-    private _minItem: number;
-    private _maxItem: number = this._maxItemsOnScreen;
-    private _mouseEdgeEnabled: boolean = true;
-    private _bannerSprite: Sprite = null;
-    private _bannerRectangle: ResRectangle = null;
-    private _recalculateDescriptionNextFrame: number = 1;
-
-    private readonly _instructionalButtons: InstructionalButton[] = [];
-    private readonly _instructionalButtonsScaleform: Scaleform;
-    private readonly _defaultTitleScale: number = 1.15;
-    private readonly _maxMenuItems: number = 1000;
-    private readonly _mainMenu: Container;
-    private readonly _upAndDownSprite: Sprite;
-    private readonly _titleResText: ResText;
-    private readonly _subtitleResText: ResText;
-    private readonly _extraRectangleUp: ResRectangle;
-    private readonly _extraRectangleDown: ResRectangle;
-    private readonly _descriptionBar: ResRectangle;
-    private readonly _descriptionRectangle: Sprite;
-    private readonly _descriptionText: ResText;
-    private readonly _counterText: ResText;
-    private readonly _background: Sprite;
-
-    public readonly Id: string = UUIDV4();
-    public readonly SelectTextLocalized: string = alt.getGxtText("HUD_INPUT2");
-    public readonly BackTextLocalized: string = alt.getGxtText("HUD_INPUT3");
-
-    public WidthOffset: number = 0;
-    public ParentMenu: NativeUI = null;
-    public ParentItem: UIMenuItem = null;
-    public Children: Map<string, NativeUI>; // (UUIDV4, NativeUI)
-    public MouseControlsEnabled: boolean = false;
-    public CloseableByUser: boolean = true;
-
-    public AUDIO_LIBRARY: string = "HUD_FRONTEND_DEFAULT_SOUNDSET";
-    public AUDIO_UPDOWN: string = "NAV_UP_DOWN";
-    public AUDIO_LEFTRIGHT: string = "NAV_LEFT_RIGHT";
-    public AUDIO_SELECT: string = "SELECT";
-    public AUDIO_BACK: string = "BACK";
-    public AUDIO_ERROR: string = "ERROR";
-
-    public MenuItems: (| UIMenuItem | UIMenuListItem | UIMenuAutoListItem | UIMenuDynamicListItem | UIMenuSliderItem | UIMenuCheckboxItem)[] = [];
-
-    // Events
-    public readonly IndexChange = new LiteEvent();
-    public readonly ListChange = new LiteEvent();
-    public readonly AutoListChange = new LiteEvent();
-    public readonly DynamicListChange = new LiteEvent();
-    public readonly SliderChange = new LiteEvent();
-    //public readonly SliderSelect = new LiteEvent();
-    public readonly CheckboxChange = new LiteEvent();
-    public readonly ItemSelect = new LiteEvent();
-    public readonly MenuOpen = new LiteEvent();
-    public readonly MenuClose = new LiteEvent();
-    public readonly MenuChange = new LiteEvent();
-
-    public GetSpriteBanner(): Sprite {
-        return this._bannerSprite;
-    }
-
-    public GetRectangleBanner(): ResRectangle {
-        return this._bannerRectangle;
-    }
-
-    public GetTitle(): ResText {
-        return this._titleResText;
-    }
-
-    public get MaxItemsVisible(): number {
-        return this._maxItemsOnScreen;
-    }
-
-    public set MaxItemsVisible(value: number) {
-        this._maxItemsOnScreen = value;
-        this._maxItem = value;
-    }
-
-    public get Title(): string {
-        return this._titleResText.Caption;
-    }
-
-    public set Title(text: string) {
-        this._titleResText.Caption = text;
-    }
-
-    public get GetSubTitle(): ResText {
-        return this._titleResText;
-    }
-
-    public get SubTitle(): string {
-        return this._titleResText.Caption;
-    }
-    
-    public set SubTitle(text: string) {
-        this._subtitleResText.Caption = text;
-    }
-
-    public get Visible() {
-        return this._visible;
-    }
-    public set Visible(toggle: boolean) { // Menu pools don't work with submenus
-        this._visible = toggle;
-        Common.PlaySound(this.AUDIO_BACK, this.AUDIO_LIBRARY);
-        this.UpdateScaleform();
-		/*if(!toggle) {
-			alt.emit('server:clientDebug', `Visible = false. _justOpenedFromPool: ${this._justOpenedFromPool}`);
-		}*/
-        if (toggle) {
-            this.UpdateDescriptionCaption();
-        }
-        if (this._justOpenedFromPool === true) {
-            this._justOpenedFromPool = false;
-            return;
-        }
-        if (toggle) {
-            this._justOpened = true;
-            this.MenuOpen.emit();
-
-            if (this.ParentMenu === null) {
-                if (!menuPool.includes(this) && this !== this._poolOpening) {
-                    const previousMenu = (menuPool.length) ? menuPool[menuPool.length - 1] : null;
-                    menuPool.push(this);
-                    //alt.emit('server:clientDebug', 'Adding to menu pool ' + menuPool.length);
-                    if (previousMenu !== this._poolOpening && previousMenu !== null) {
-                        previousMenu._justClosedFromPool = true;
-                        previousMenu.Visible = false;
-                        //alt.emit('server:clientDebug', 'Closing current');
-                    }
-                }
-            }
-        } else {
-            if (this._justClosedFromPool === true) {
-                this._justClosedFromPool = false;
-                return;
-            }
-            if (this.ParentMenu === null && menuPool.includes(this) && menuPool.length) {
-                if (menuPool[menuPool.length - 1] === this) {
-                    menuPool.pop();
-                    this._justOpenedFromPool = true;
-                    if (!menuPool.length) {
-                        this._poolOpening = null;
-                    }
-                    //alt.emit('server:clientDebug', 'Removing from menu pool ' + menuPool.length);
-                }
-                if (menuPool.length) {
-                    this._poolOpening = menuPool[menuPool.length - 1];
-                    menuPool[menuPool.length - 1].Visible = true;
-                    //alt.emit('server:clientDebug', 'Pool opening next in line menu');
-                }
-            }
-            if (menuPool.length === 0) {
-                game.setMouseCursorSprite(1);
-            }
-        }
-    }
-
-    public get CurrentSelection() {
-        return this._activeItem % this.MenuItems.length;
-    }
-    public set CurrentSelection(v) {
-        this.MenuItems[this._activeItem % this.MenuItems.length].Selected = false;
-        this._activeItem = this._maxMenuItems - (this._maxMenuItems % this.MenuItems.length) + v;
-        if (this.CurrentSelection > this._maxItem) {
-            this._maxItem = this.CurrentSelection;
-            this._minItem = this.CurrentSelection - this._maxItemsOnScreen;
-        } else if (this.CurrentSelection < this._minItem) {
-            this._maxItem = this._maxItemsOnScreen + this.CurrentSelection;
-            this._minItem = this.CurrentSelection;
-        }
-        this.IndexChange.emit(this.CurrentSelection, this.MenuItems[this._activeItem % this.MenuItems.length]);
-        this.UpdateDescriptionCaption();
-    }
-
-    constructor(title: string, subtitle: string, offset: Point, spriteLibrary?: string, spriteName?: string) {
-        if (!(offset instanceof Point)) offset = Point.Parse(offset);
-
-        this._spriteLibrary = spriteLibrary || "commonmenu";
-        this._spriteName = spriteName || "interaction_bgd";
-        this._offset = new Point(offset.X, offset.Y);
-        this.Children = new Map();
-
-        this._instructionalButtonsScaleform = new Scaleform("instructional_buttons");
-        this.UpdateScaleform();
-
-        // Create everything
-        this._mainMenu = new Container(new Point(0, 0), new Size(700, 500), new Color(0, 0, 0, 0));
-        this._bannerSprite = new Sprite(this._spriteLibrary, this._spriteName, new Point(0 + this._offset.X, 0 + this._offset.Y), new Size(431, 107));
-        this._mainMenu.addItem(
-            (this._titleResText = new ResText(title, new Point(215 + this._offset.X, 20 + this._offset.Y), this._defaultTitleScale, new Color(255, 255, 255), 1, Alignment.Centered))
-        );
-
-        if (subtitle !== "") {
-            this._mainMenu.addItem(
-                new ResRectangle(new Point(0 + this._offset.X, 107 + this._offset.Y), new Size(431, 37), new Color(0, 0, 0, 255))
-            );
-            this._mainMenu.addItem(
-                (this._subtitleResText = new ResText(subtitle, new Point(8 + this._offset.X, 110 + this._offset.Y), 0.35, new Color(255, 255, 255), 0, Alignment.Left))
-            );
-            if (subtitle.startsWith("~")) {
-                this._counterPretext = subtitle.substr(0, 3);
-            }
-            this._counterText = new ResText("", new Point(425 + this._offset.X, 110 + this._offset.Y), 0.35, new Color(255, 255, 255), 0, Alignment.Right);
-            this._extraOffset += 37;
-        }
-
-        this._upAndDownSprite = new Sprite(
-            "commonmenu",
-            "shop_arrows_upanddown",
-            new Point(190 + this._offset.X, 147 + 37 * (this._maxItemsOnScreen + 1) + this._offset.Y - 37 + this._extraOffset),
-            new Size(50, 50)
-        );
-
-        this._extraRectangleUp = new ResRectangle(
-            new Point(0 + this._offset.X, 144 + 38 * (this._maxItemsOnScreen + 1) + this._offset.Y - 37 + this._extraOffset),
-            new Size(431, 18),
-            new Color(0, 0, 0, 200)
-        );
-
-        this._extraRectangleDown = new ResRectangle(
-            new Point(0 + this._offset.X, 144 + 18 + 38 * (this._maxItemsOnScreen + 1) + this._offset.Y - 37 + this._extraOffset),
-            new Size(431, 18),
-            new Color(0, 0, 0, 200)
-        );
-
-        this._descriptionBar = new ResRectangle(new Point(this._offset.X, 123), new Size(431, 4), Color.Black);
-        this._descriptionRectangle = new Sprite("commonmenu", "gradient_bgd", new Point(this._offset.X, 127), new Size(431, 30));
-        this._descriptionText = new ResText("", new Point(this._offset.X + 5, 125), 0.35, new Color(255, 255, 255, 255), Font.ChaletLondon, Alignment.Left);
-
-        this._background = new Sprite("commonmenu", "gradient_bgd", new Point(this._offset.X, 144 + this._offset.Y - 37 + this._extraOffset), new Size(290, 25));
-        this._visible = false;
-
-        alt.everyTick(this.render.bind(this));
-        //alt.log(`Created Native UI! ${this.title}`);
-    }
-
-    public DisableInstructionalButtons(disable: boolean) {
-        this._buttonsEnabled = !disable;
-    }
-
-    public AddInstructionalButton(button: InstructionalButton): void {
-        this._instructionalButtons.push(button);
-    }
-
-    public SetSpriteBannerType(spriteBanner: Sprite): void {
-        this._bannerRectangle = null;
-        this.AddSpriteBannerType(spriteBanner);
-    }
-
-    public SetRectangleBannerType(rectangle: ResRectangle): void {
-        this._bannerSprite = null;
-        this._bannerRectangle = rectangle;
-        this._bannerRectangle.Pos = new Point(this._offset.X, this._offset.Y);
-        this._bannerRectangle.Size = new Size(431 + this.WidthOffset, 107);
-    }
-
-    public AddSpriteBannerType(spriteBanner: Sprite): void {
-        this._bannerSprite = spriteBanner;
-        this._bannerSprite.Size = new Size(431 + this.WidthOffset, 107);
-        this._bannerSprite.Pos = new Point(this._offset.X, this._offset.Y);
-    }
-
-    public SetNoBannerType(): void {
-        this._bannerSprite = null;
-        this._bannerRectangle = new ResRectangle(new Point(this._offset.X, this._offset.Y), new Size(431 + this.WidthOffset, 107), new Color(0, 0, 0, 0));
-    }
-
-    public RemoveInstructionalButton(button: InstructionalButton): void {
-        for (let i = 0; i < this._instructionalButtons.length; i++) {
-            if (this._instructionalButtons[i] === button) {
-                this._instructionalButtons.splice(i, 1);
-            }
-        }
-    }
-
-    private RecalculateDescriptionPosition() {
-        const count = (this.MenuItems.length > this._maxItemsOnScreen + 1) ? this._maxItemsOnScreen + 2 : this.MenuItems.length;
-
-        this._descriptionBar.Size = new Size(431 + this.WidthOffset, 4);
-        this._descriptionRectangle.Size = new Size(431 + this.WidthOffset, 30);
-
-        this._descriptionBar.Pos = new Point(this._offset.X, 149 - 37 + this._extraOffset + this._offset.Y);
-        this._descriptionRectangle.Pos = new Point(this._offset.X, 149 - 37 + this._extraOffset + this._offset.Y);
-        this._descriptionText.Pos = new Point(this._offset.X + 8, 155 - 37 + this._extraOffset + this._offset.Y);
-
-        this._descriptionBar.Pos = new Point(this._offset.X, 38 * count + this._descriptionBar.Pos.Y);
-        this._descriptionRectangle.Pos = new Point(this._offset.X, 38 * count + this._descriptionRectangle.Pos.Y);
-        this._descriptionText.Pos = new Point(this._offset.X + 8, 38 * count + this._descriptionText.Pos.Y);
-    }
-
-    public SetMenuWidthOffset(widthOffset: number) {
-        this.WidthOffset = widthOffset;
-        if (this._bannerSprite != null) {
-            this._bannerSprite.Size = new Size(431 + this.WidthOffset, 107);
-        }
-        this._mainMenu.Items[0].pos = new Point((this.WidthOffset + this._offset.X + 431) / 2, 20 + this._offset.Y);
-        if (this._counterText) {
-            this._counterText.Pos = new Point(425 + this._offset.X + widthOffset, 110 + this._offset.Y);
-        }
-        if (this._mainMenu.Items.length >= 2) {
-            const tmp = this._mainMenu.Items[1];
-            tmp.size = new Size(431 + this.WidthOffset, 37);
-        }
-        if (this._bannerRectangle != null) {
-            this._bannerRectangle.Size = new Size(431 + this.WidthOffset, 107);
-        }
-    }
-
-    public AddItem(item: UIMenuItem) {
-        if (this._justOpened) this._justOpened = false;
-        item.Offset = this._offset;
-        item.Parent = this;
-        item.SetVerticalPosition(this.MenuItems.length * 25 - 37 + this._extraOffset);
-        this.MenuItems.push(item);
-
-        this.RefreshIndex();
-    }
-
-    public RemoveItem(item: UIMenuItem) {
-        for (let i = 0; i < this.MenuItems.length; i++) {
-            if (this.MenuItems[i] === item) {
-                this.MenuItems.splice(i, 1);
-            }
-        }
-        this.RefreshIndex();
-    }
-
-    public RefreshIndex() {
-        if (this.MenuItems.length == 0) {
-            this._activeItem = this._maxMenuItems;
-            this._maxItem = this._maxItemsOnScreen;
-            this._minItem = 0;
-            return;
-        }
-        for (let i = 0; i < this.MenuItems.length; i++)
-            this.MenuItems[i].Selected = false;
-
-        this._activeItem = this._maxMenuItems - (this._maxMenuItems % this.MenuItems.length);
-        this._maxItem = this._maxItemsOnScreen;
-        this._minItem = 0;
-        if (this._visible) {
-            this.UpdateDescriptionCaption();
-        }
-    }
-
-    public Clear() {
-        this.MenuItems = [];
-        this.RecalculateDescriptionPosition();
-    }
-
-    public Open() {
-        this.Visible = true;
-    }
-
-    private CleanUp(closeChildren: boolean = false) {
-        if (closeChildren) {
-            this.Children.forEach(m => {
-                m.Close(true);
-            });
-        }
-        //Reset current selected value of dynamic list items so they are dynamically set next draw
-        this.MenuItems.filter(menuItem => menuItem instanceof UIMenuDynamicListItem).forEach((menuItem: UIMenuDynamicListItem) => {
-            menuItem.SelectedValue = undefined;
-        });
-        this.RefreshIndex();
-    }
-
-    public Close(closeChildren: boolean = false) {
-        this.Visible = false;
-        this.CleanUp(closeChildren);
-        this.MenuClose.emit(true);
-    }
-
-    public GoLeft() {
-        if (!(this.MenuItems[this.CurrentSelection] instanceof UIMenuListItem) &&
-            !(this.MenuItems[this.CurrentSelection] instanceof UIMenuAutoListItem) &&
-            !(this.MenuItems[this.CurrentSelection] instanceof UIMenuDynamicListItem) &&
-            !(this.MenuItems[this.CurrentSelection] instanceof UIMenuSliderItem) ||
-            !this.MenuItems[this.CurrentSelection].Enabled)
-            return;
-
-        if (this.MenuItems[this.CurrentSelection] instanceof UIMenuListItem) {
-            const it = <UIMenuListItem>this.MenuItems[this.CurrentSelection];
-            if (it.Collection.length == 0) return;
-            it.Index--;
-            Common.PlaySound(this.AUDIO_LEFTRIGHT, this.AUDIO_LIBRARY);
-            this.ListChange.emit(it, it.Index);
-        }
-        else if (this.MenuItems[this.CurrentSelection] instanceof UIMenuAutoListItem) {
-            const it = <UIMenuAutoListItem>this.MenuItems[this.CurrentSelection];
-            if (it.SelectedValue <= it.LowerThreshold) {
-                it.SelectedValue = it.UpperThreshold;
-            } else {
-                it.SelectedValue -= it.LeftMoveThreshold;
-            }
-            Common.PlaySound(this.AUDIO_LEFTRIGHT, this.AUDIO_LIBRARY);
-            this.AutoListChange.emit(it, it.SelectedValue, ChangeDirection.Left);
-        }
-        else if (this.MenuItems[this.CurrentSelection] instanceof UIMenuDynamicListItem) {
-            const it = <UIMenuDynamicListItem>this.MenuItems[this.CurrentSelection];
-            it.SelectionChangeHandlerPromise(it, it.SelectedValue, ChangeDirection.Left).then((newSelectedValue: string) => {
-                it.SelectedValue = newSelectedValue;
-                this.DynamicListChange.emit(it, it.SelectedValue, ChangeDirection.Left);
-            });
-            Common.PlaySound(this.AUDIO_LEFTRIGHT, this.AUDIO_LIBRARY);
-        }
-        else if (this.MenuItems[this.CurrentSelection] instanceof UIMenuSliderItem) {
-            const it = <UIMenuSliderItem>this.MenuItems[this.CurrentSelection];
-            it.Index = it.Index - 1;
-            Common.PlaySound(this.AUDIO_LEFTRIGHT, this.AUDIO_LIBRARY);
-            this.SliderChange.emit(it, it.Index, it.IndexToItem(it.Index));
-        }
-    }
-
-    public GoRight() {
-        if (!(this.MenuItems[this.CurrentSelection] instanceof UIMenuListItem) &&
-            !(this.MenuItems[this.CurrentSelection] instanceof UIMenuAutoListItem) &&
-            !(this.MenuItems[this.CurrentSelection] instanceof UIMenuDynamicListItem) &&
-            !(this.MenuItems[this.CurrentSelection] instanceof UIMenuSliderItem) ||
-            !this.MenuItems[this.CurrentSelection].Enabled)
-            return;
-        if (this.MenuItems[this.CurrentSelection] instanceof UIMenuListItem) {
-            const it = <UIMenuListItem>this.MenuItems[this.CurrentSelection];
-            if (it.Collection.length == 0) return;
-            it.Index++;
-            Common.PlaySound(this.AUDIO_LEFTRIGHT, this.AUDIO_LIBRARY);
-            this.ListChange.emit(it, it.Index);
-        }
-        else if (this.MenuItems[this.CurrentSelection] instanceof UIMenuAutoListItem) {
-            const it = <UIMenuAutoListItem>this.MenuItems[this.CurrentSelection];
-            if (it.SelectedValue >= it.UpperThreshold) {
-                it.SelectedValue = it.LowerThreshold;
-            } else {
-                it.SelectedValue += it.RightMoveThreshold;
-            }
-            Common.PlaySound(this.AUDIO_LEFTRIGHT, this.AUDIO_LIBRARY);
-            this.AutoListChange.emit(it, it.SelectedValue, ChangeDirection.Right);
-        }
-        else if (this.MenuItems[this.CurrentSelection] instanceof UIMenuDynamicListItem) {
-            const it = <UIMenuDynamicListItem>this.MenuItems[this.CurrentSelection];
-            it.SelectionChangeHandlerPromise(it, it.SelectedValue, ChangeDirection.Right).then((newSelectedValue: string) => {
-                it.SelectedValue = newSelectedValue;
-                this.DynamicListChange.emit(it, it.SelectedValue, ChangeDirection.Right);
-            });
-            Common.PlaySound(this.AUDIO_LEFTRIGHT, this.AUDIO_LIBRARY);
-        }
-        else if (this.MenuItems[this.CurrentSelection] instanceof UIMenuSliderItem) {
-            const it = <UIMenuSliderItem>this.MenuItems[this.CurrentSelection];
-            it.Index++;
-            Common.PlaySound(this.AUDIO_LEFTRIGHT, this.AUDIO_LIBRARY);
-            this.SliderChange.emit(it, it.Index, it.IndexToItem(it.Index));
-        }
-    }
-
-    public SelectItem() {
-        if (!this.MenuItems[this.CurrentSelection].Enabled) {
-            Common.PlaySound(this.AUDIO_ERROR, this.AUDIO_LIBRARY);
-            return;
-        }
-
-        const it = <UIMenuCheckboxItem>this.MenuItems[this.CurrentSelection];
-        if (this.MenuItems[this.CurrentSelection] instanceof UIMenuCheckboxItem) {
-            it.Checked = !it.Checked;
-            Common.PlaySound(this.AUDIO_SELECT, this.AUDIO_LIBRARY);
-            this.CheckboxChange.emit(it, it.Checked);
-        } else {
-            Common.PlaySound(this.AUDIO_SELECT, this.AUDIO_LIBRARY);
-            this.ItemSelect.emit(it, this.CurrentSelection);
-            if (this.Children.has(it.Id)) {
-                const subMenu = this.Children.get(it.Id);
-                this.Visible = false;
-                subMenu.Visible = true;
-                this.MenuChange.emit(subMenu, true);
-            }
-        }
-        it.fireEvent();
-    }
-    
-    public HasCurrentSelectionChildren() {
-        const it = <UIMenuCheckboxItem>this.MenuItems[this.CurrentSelection];
-        if (this.MenuItems[this.CurrentSelection] instanceof UIMenuItem) {
-            if (this.Children.has(it.Id)) {
-                return true;
-            }
-        }
-        return false;
-    }
-    
-    public IsMouseInListItemArrows(item: UIMenuItem, topLeft: Point, safezone: any) {
-        game.beginTextCommandGetWidth("jamyfafi");
-        game.addTextComponentSubstringPlayerName(item.Text);
-        let res = Screen.ResolutionMaintainRatio;
-        let screenw = res.Width;
-        let screenh = res.Height;
-        const height = 1080.0;
-        const ratio = screenw / screenh;
-        let width = height * ratio;
-        const labelSize = game.endTextCommandGetWidth(false) * width * 0.35;
-
-        const labelSizeX = 5 + labelSize + 10;
-        const arrowSizeX = 431 - labelSizeX;
-        return Screen.IsMouseInBounds(topLeft, new Size(labelSizeX, 38))
-            ? 1
-            : Screen.IsMouseInBounds(new Point(topLeft.X + labelSizeX, topLeft.Y), new Size(arrowSizeX, 38))
-                ? 2
-                : 0;
-    }
-
-    public ProcessMouse() {
-        if (!this.Visible || this._justOpened || this.MenuItems.length == 0 || !this.MouseControlsEnabled) {
-            this.MenuItems.filter(i => i.Hovered).forEach(i => (i.Hovered = false));
-            return;
-        }
-
-        alt.showCursor(true);
-        let limit = this.MenuItems.length - 1;
-        let counter = 0;
-        if (this.MenuItems.length > this._maxItemsOnScreen + 1)
-            limit = this._maxItem;
-
-        if (Screen.IsMouseInBounds(new Point(0, 0), new Size(30, 1080)) && this._mouseEdgeEnabled) {
-            game.setGameplayCamRelativeHeading(game.getGameplayCamRelativeHeading() + 5.0);
-            game.setMouseCursorSprite(6);
-        } else if (Screen.IsMouseInBounds(new Point(Screen.ResolutionMaintainRatio.Width - 30.0, 0), new Size(30, 1080)) && this._mouseEdgeEnabled) {
-            game.setGameplayCamRelativeHeading(game.getGameplayCamRelativeHeading() - 5.0);
-            game.setMouseCursorSprite(7);
-        } else if (this._mouseEdgeEnabled) {
-            game.setMouseCursorSprite(1);
-        }
-
-        for (let i = this._minItem; i <= limit; i++) {
-            let xpos = this._offset.X;
-            let ypos = this._offset.Y + 144 - 37 + this._extraOffset + counter * 38;
-            let yposSelected = this._offset.Y + 144 - 37 + this._extraOffset + this._safezoneOffset.Y + this.CurrentSelection * 38;
-            let xsize = 431 + this.WidthOffset;
-            const ysize = 38;
-            const uiMenuItem = this.MenuItems[i];
-
-            if (Screen.IsMouseInBounds(new Point(xpos, ypos), new Size(xsize, ysize))) {
-                uiMenuItem.Hovered = true;
-                const res = this.IsMouseInListItemArrows(this.MenuItems[i], new Point(xpos, ypos), 0);
-                if (uiMenuItem.Hovered && res == 1 && (this.MenuItems[i] instanceof UIMenuListItem || this.MenuItems[i] instanceof UIMenuAutoListItem || this.MenuItems[i] instanceof UIMenuDynamicListItem)) {
-                    game.setMouseCursorSprite(5);
-                }
-                if (game.isControlJustReleased(0, 24) || game.isDisabledControlJustReleased(0, 24))
-                    if (uiMenuItem.Selected && uiMenuItem.Enabled) {
-                        if ((this.MenuItems[i] instanceof UIMenuListItem || this.MenuItems[i] instanceof UIMenuAutoListItem || this.MenuItems[i] instanceof UIMenuDynamicListItem)
-                            && this.IsMouseInListItemArrows(this.MenuItems[i], new Point(xpos, ypos), 0) > 0) {
-                            switch (res) {
-                                case 1:
-                                    Common.PlaySound(this.AUDIO_SELECT, this.AUDIO_LIBRARY);
-                                    //this.MenuItems[i].ItemActivate(this);
-                                    this.MenuItems[i].fireEvent();
-                                    this.ItemSelect.emit(this.MenuItems[i], i);
-                                    break;
-                                case 2:
-                                    let it = <any>this.MenuItems[i];
-                                    if ((it.Collection == null ? it.Items.Count : it.Collection.Count) > 0) {
-                                        it.Index++;
-                                        Common.PlaySound(this.AUDIO_LEFTRIGHT, this.AUDIO_LIBRARY);
-                                        this.ListChange.emit(it, it.Index);
-                                    }
-                                    break;
-                            }
-                        } else
-                            this.SelectItem();
-                    } else if (!uiMenuItem.Selected) {
-                        this.CurrentSelection = i;
-                        Common.PlaySound(this.AUDIO_UPDOWN, this.AUDIO_LIBRARY);
-                        this.IndexChange.emit(this.CurrentSelection, this.MenuItems[this._activeItem % this.MenuItems.length]);
-                        this.SelectItem();
-                        this.UpdateDescriptionCaption();
-                        this.UpdateScaleform();
-                    } else if (!uiMenuItem.Enabled && uiMenuItem.Selected) {
-                        Common.PlaySound(this.AUDIO_ERROR, this.AUDIO_LIBRARY);
-                    }
-            } else
-                uiMenuItem.Hovered = false;
-            counter++;
-        }
-
-        const extraY = 144 + 38 * (this._maxItemsOnScreen + 1) + this._offset.Y - 37 + this._extraOffset + this._safezoneOffset.Y;
-        const extraX = this._safezoneOffset.X + this._offset.X;
-
-        if (this.MenuItems.length <= this._maxItemsOnScreen + 1)
-            return;
-
-        if (Screen.IsMouseInBounds(new Point(extraX, extraY), new Size(431 + this.WidthOffset, 18))) {
-            this._extraRectangleUp.Color = new Color(30, 30, 30, 255);
-            if (game.isControlJustPressed(0, 24) || game.isDisabledControlJustPressed(0, 24)) {
-                if (this.MenuItems.length > this._maxItemsOnScreen + 1)
-                    this.GoUpOverflow();
-                else
-                    this.GoUp();
-            }
-        } else
-            this._extraRectangleUp.Color = new Color(0, 0, 0, 200);
-
-        if (Screen.IsMouseInBounds(new Point(extraX, extraY + 18), new Size(431 + this.WidthOffset, 18))) {
-            this._extraRectangleDown.Color = new Color(30, 30, 30, 255);
-            if (game.isControlJustPressed(0, 24) || game.isDisabledControlJustPressed(0, 24)) {
-                if (this.MenuItems.length > this._maxItemsOnScreen + 1)
-                    this.GoDownOverflow();
-                else
-                    this.GoDown();
-            }
-        } else
-            this._extraRectangleDown.Color = new Color(0, 0, 0, 200);
-    }
-
-    public ProcessControl() {
-        if (!this.Visible)
-            return;
-        if (this._justOpened) {
-            this._justOpened = false;
-            return;
-        }
-
-        if (game.isControlJustReleased(0, 177)) { // Back            
-            this.GoBack();
-        }
-        if (this.MenuItems.length == 0)
-            return;
-
-        if (game.isControlPressed(0, 172) && this._lastUpDownNavigation + 120 < Date.now()) { // Up
-            this._lastUpDownNavigation = Date.now();
-            if (this.MenuItems.length > this._maxItemsOnScreen + 1)
-                this.GoUpOverflow();
-            else
-                this.GoUp();
-            this.UpdateScaleform();
-        } else if (game.isControlJustReleased(0, 172)) {
-            this._lastUpDownNavigation = 0;
-        } else if (game.isControlPressed(0, 173) && this._lastUpDownNavigation + 120 < Date.now()) { // Down
-            this._lastUpDownNavigation = Date.now();
-            if (this.MenuItems.length > this._maxItemsOnScreen + 1)
-                this.GoDownOverflow();
-            else
-                this.GoDown();
-            this.UpdateScaleform();
-        } else if (game.isControlJustReleased(0, 173)) {
-            this._lastUpDownNavigation = 0;
-        } else if (game.isControlPressed(0, 174) && this._lastLeftRightNavigation + 100 < Date.now()) { // Left            
-            this._lastLeftRightNavigation = Date.now();
-            this.GoLeft();
-        } else if (game.isControlJustReleased(0, 174)) {
-            this._lastLeftRightNavigation = 0;
-        } else if (game.isControlPressed(0, 175) && this._lastLeftRightNavigation + 100 < Date.now()) { // Right            
-            this._lastLeftRightNavigation = Date.now();
-            this.GoRight();
-        } else if (game.isControlJustReleased(0, 175)) {
-            this._lastLeftRightNavigation = 0;
-        } else if (game.isControlJustReleased(0, 201)) { // Select            
-            this.SelectItem();
-        }
-    }
-
-    public GoUpOverflow() {
-        if (this.MenuItems.length <= this._maxItemsOnScreen + 1)
-            return;
-
-        if (this._activeItem % this.MenuItems.length <= this._minItem) {
-            if (this._activeItem % this.MenuItems.length == 0) {
-                this._minItem = this.MenuItems.length - this._maxItemsOnScreen - 1;
-                this._maxItem = this.MenuItems.length - 1;
-                this.MenuItems[this._activeItem % this.MenuItems.length].Selected = false;
-                this._activeItem = this._maxMenuItems - (this._maxMenuItems % this.MenuItems.length);
-                this._activeItem += this.MenuItems.length - 1;
-                this.MenuItems[this._activeItem % this.MenuItems.length].Selected = true;
-            } else {
-                this._minItem--;
-                this._maxItem--;
-                this.MenuItems[this._activeItem % this.MenuItems.length].Selected = false;
-                this._activeItem--;
-                this.MenuItems[this._activeItem % this.MenuItems.length].Selected = true;
-            }
-        } else {
-            this.MenuItems[this._activeItem % this.MenuItems.length].Selected = false;
-            this._activeItem--;
-            this.MenuItems[this._activeItem % this.MenuItems.length].Selected = true;
-        }
-        Common.PlaySound(this.AUDIO_UPDOWN, this.AUDIO_LIBRARY);
-        this.IndexChange.emit(this.CurrentSelection, this.MenuItems[this._activeItem % this.MenuItems.length]);
-        this.UpdateDescriptionCaption();
-    }
-
-    public GoUp() {
-        if (this.MenuItems.length > this._maxItemsOnScreen + 1)
-            return;
-
-        this.MenuItems[this._activeItem % this.MenuItems.length].Selected = false;
-        this._activeItem--;
-        this.MenuItems[this._activeItem % this.MenuItems.length].Selected = true;
-        Common.PlaySound(this.AUDIO_UPDOWN, this.AUDIO_LIBRARY);
-        this.IndexChange.emit(this.CurrentSelection, this.MenuItems[this._activeItem % this.MenuItems.length]);
-        this.UpdateDescriptionCaption();
-    }
-
-    public GoDownOverflow() {
-        if (this.MenuItems.length <= this._maxItemsOnScreen + 1)
-            return;
-
-        if (this._activeItem % this.MenuItems.length >= this._maxItem) {
-            if (this._activeItem % this.MenuItems.length == this.MenuItems.length - 1) {
-                this._minItem = 0;
-                this._maxItem = this._maxItemsOnScreen;
-                this.MenuItems[this._activeItem % this.MenuItems.length].Selected = false;
-                this._activeItem = this._maxMenuItems - (this._maxMenuItems % this.MenuItems.length);
-                this.MenuItems[this._activeItem % this.MenuItems.length].Selected = true;
-            } else {
-                this._minItem++;
-                this._maxItem++;
-                this.MenuItems[this._activeItem % this.MenuItems.length].Selected = false;
-                this._activeItem++;
-                this.MenuItems[this._activeItem % this.MenuItems.length].Selected = true;
-            }
-        } else {
-            this.MenuItems[this._activeItem % this.MenuItems.length].Selected = false;
-            this._activeItem++;
-            this.MenuItems[this._activeItem % this.MenuItems.length].Selected = true;
-        }
-        Common.PlaySound(this.AUDIO_UPDOWN, this.AUDIO_LIBRARY);
-        this.IndexChange.emit(this.CurrentSelection, this.MenuItems[this._activeItem % this.MenuItems.length]);
-        this.UpdateDescriptionCaption();
-    }
-
-    public GoDown() {
-        if (this.MenuItems.length > this._maxItemsOnScreen + 1)
-            return;
-
-        this.MenuItems[this._activeItem % this.MenuItems.length].Selected = false;
-        this._activeItem++;
-        this.MenuItems[this._activeItem % this.MenuItems.length].Selected = true;
-        Common.PlaySound(this.AUDIO_UPDOWN, this.AUDIO_LIBRARY);
-        this.IndexChange.emit(this.CurrentSelection, this.MenuItems[this._activeItem % this.MenuItems.length]);
-        this.UpdateDescriptionCaption();
-    }
-
-    public GoBack() {
-        if (this.ParentMenu != null) {
-            this.Visible = false;
-            this.ParentMenu.Visible = true;
-            this.MenuChange.emit(this.ParentMenu, false);
-            this.MenuClose.emit(false);
-        } else if (this.CloseableByUser) {
-            this.Visible = false;
-            this.CleanUp(true);
-            this.MenuClose.emit(false);
-        }
-    }
-
-    public BindMenuToItem(menuToBind: NativeUI, itemToBindTo: UIMenuItem) {
-        if (!this.MenuItems.includes(itemToBindTo)) {
-            this.AddItem(itemToBindTo);
-        }
-
-        menuToBind.ParentMenu = this;
-        menuToBind.ParentItem = itemToBindTo;
-        this.Children.set(itemToBindTo.Id, menuToBind);
-    }
-
-    public AddSubMenu(subMenu: NativeUI, itemToBindTo: UIMenuItem) {
-        this.BindMenuToItem(subMenu, itemToBindTo);
-    }
-
-    public ReleaseMenuFromItem(releaseFrom: UIMenuItem) {
-        if (!this.Children.has(releaseFrom.Id))
-            return false;
-
-        const menu: NativeUI = this.Children.get(releaseFrom.Id);
-        menu.ParentItem = null;
-        menu.ParentMenu = null;
-        this.Children.delete(releaseFrom.Id);
-        return true;
-    }
-
-    public UpdateDescriptionCaption() {
-        if (this.MenuItems.length) {
-            this._descriptionText.Caption = this.MenuItems[this._activeItem % this.MenuItems.length].Description;
-            this._descriptionText.Wrap = 400;
-            this._recalculateDescriptionNextFrame++;
-        }
-    }
-
-    public CalculateDescription() {
-        if (this._recalculateDescriptionNextFrame > 0) {
-            this._recalculateDescriptionNextFrame--;
-        }
-
-        this.RecalculateDescriptionPosition();
-        if (this.MenuItems.length > 0 && this._descriptionText.Caption && this.MenuItems[this._activeItem % this.MenuItems.length].Description.trim() !== "") {
-            const numLines = Screen.GetLineCount(this._descriptionText.Caption, this._descriptionText.Pos, this._descriptionText.Font, this._descriptionText.Scale, this._descriptionText.Wrap);
-
-            this._descriptionRectangle.Size = new Size(431 + this.WidthOffset, (numLines * 25) + 15);
-            if (numLines === 0) {
-                this._recalculateDescriptionNextFrame++;
-            }
-        }
-    }
-
-    public UpdateScaleform() {
-        if (!this.Visible || !this._buttonsEnabled)
-            return;
-        this._instructionalButtonsScaleform.callFunction("CLEAR_ALL");
-        this._instructionalButtonsScaleform.callFunction("TOGGLE_MOUSE_BUTTONS", 0 as number);
-        this._instructionalButtonsScaleform.callFunction("CREATE_CONTAINER");
-
-        this._instructionalButtonsScaleform.callFunction("SET_DATA_SLOT", 0 as number, game.getControlInstructionalButton(2, Control.PhoneSelect as number, false) as string, this.SelectTextLocalized as string);
-        this._instructionalButtonsScaleform.callFunction("SET_DATA_SLOT", 1 as number, game.getControlInstructionalButton(2, Control.PhoneCancel as number, false) as string, this.BackTextLocalized as string);
-
-        let count: number = 2;
-        this._instructionalButtons.filter(b => b.ItemBind == null || this.MenuItems[this.CurrentSelection] == b.ItemBind).forEach((button) => {
-            this._instructionalButtonsScaleform.callFunction("SET_DATA_SLOT", count as number, button.GetButtonId() as string, button.Text as string);
-            count++;
-        });
-
-        this._instructionalButtonsScaleform.callFunction("DRAW_INSTRUCTIONAL_BUTTONS", -1 as number);
-    }
-
-    private render() {
-        if (!this.Visible)
-            return;
-
-        if (this._buttonsEnabled) {
-            game.drawScaleformMovieFullscreen(this._instructionalButtonsScaleform.handle, 255, 255, 255, 255, 0);
-            game.hideHudComponentThisFrame(6); // Vehicle Name
-            game.hideHudComponentThisFrame(7); // Area Name
-            game.hideHudComponentThisFrame(9); // Street Name
-        }
-
-        if (this._justOpened) {
-            if (this._bannerSprite != null && !this._bannerSprite.IsTextureDictionaryLoaded)
-                this._bannerSprite.LoadTextureDictionary();
-            if (!this._background.IsTextureDictionaryLoaded)
-                this._background.LoadTextureDictionary();
-            if (!this._descriptionRectangle.IsTextureDictionaryLoaded)
-                this._descriptionRectangle.LoadTextureDictionary();
-            if (!this._upAndDownSprite.IsTextureDictionaryLoaded)
-                this._upAndDownSprite.LoadTextureDictionary();
-            if (!this._recalculateDescriptionNextFrame)
-                this._recalculateDescriptionNextFrame++;
-        }
-        this._mainMenu.Draw();
-
-        this.ProcessMouse();
-        this.ProcessControl();
-
-        this._background.Size = this.MenuItems.length > this._maxItemsOnScreen + 1
-            ? new Size(431 + this.WidthOffset, 38 * (this._maxItemsOnScreen + 1))
-            : new Size(431 + this.WidthOffset, 38 * this.MenuItems.length);
-        this._background.Draw();
-
-        if (this._recalculateDescriptionNextFrame) {
-            this.CalculateDescription();
-        }
-
-        if (this.MenuItems.length > 0) {
-            this.MenuItems[this._activeItem % this.MenuItems.length].Selected = true;
-            if (this.MenuItems[this._activeItem % this.MenuItems.length].Description.trim() !== "") {
-                this._descriptionBar.Draw();
-                this._descriptionRectangle.Draw();
-                this._descriptionText.Draw();
-            }
-        }
-
-        let count = 0;
-        if (this.MenuItems.length <= this._maxItemsOnScreen + 1) {
-            for (const item of this.MenuItems) {
-                item.SetVerticalPosition(count * 38 - 37 + this._extraOffset);
-                item.Draw();
-                count++;
-            }
-            if (this._counterText && this._counterOverride) {
-                this._counterText.Caption = this._counterPretext + this._counterOverride;
-                this._counterText.Draw();
-            }
-        } else {
-            for (let index = this._minItem; index <= this._maxItem; index++) {
-                let item = this.MenuItems[index];
-                item.SetVerticalPosition(count * 38 - 37 + this._extraOffset);
-                item.Draw();
-                count++;
-            }
-
-            this._extraRectangleUp.Size = new Size(431 + this.WidthOffset, 18);
-            this._extraRectangleDown.Size = new Size(431 + this.WidthOffset, 18);
-            this._upAndDownSprite.Pos = new Point(190 + this._offset.X + this.WidthOffset / 2, 147 + 37 * (this._maxItemsOnScreen + 1) + this._offset.Y - 37 + this._extraOffset);
-
-            this._extraRectangleUp.Draw();
-            this._extraRectangleDown.Draw();
-            this._upAndDownSprite.Draw();
-
-            if (this._counterText) {
-                if (!this._counterOverride) {
-                    const cap = this.CurrentSelection + 1 + " / " + this.MenuItems.length;
-                    this._counterText.Caption = this._counterPretext + cap;
-                } else {
-                    this._counterText.Caption = this._counterPretext + this._counterOverride;
-                }
-                this._counterText.Draw();
-            }
-        }
-        
-        if (this._bannerRectangle != null)
-            this._bannerRectangle.Draw();
-
-        if (this._bannerSprite != null)
-            this._bannerSprite.Draw();
-    }
-}
-
-export {
-    NativeUI as Menu,
-    UIMenuItem,
-    UIMenuListItem,
-    UIMenuAutoListItem,
-    UIMenuDynamicListItem,
-    UIMenuCheckboxItem,
-    UIMenuSliderItem,
-    BadgeStyle,
-    ChangeDirection,
-    Font,
-    Alignment,
-    Control,
-    HudColor,
-    Sprite,
-    ResRectangle,
-    InstructionalButton,
-    Point,
-    Size,
-    Color,
-    ItemsCollection,
-    ListItem,
-    BigMessage,
-    MidsizedMessage
-}
\ No newline at end of file
diff --git a/node_modules/@durtyfree/altv-nativeui/examples/nativeUI-example/includes/NativeUI/enums/Alignment.js b/node_modules/@durtyfree/altv-nativeui/examples/nativeUI-example/includes/NativeUI/enums/Alignment.js
deleted file mode 100644
index f2eb33f..0000000
--- a/node_modules/@durtyfree/altv-nativeui/examples/nativeUI-example/includes/NativeUI/enums/Alignment.js
+++ /dev/null
@@ -1,7 +0,0 @@
-export var Alignment;
-(function (Alignment) {
-    Alignment[Alignment["Left"] = 0] = "Left";
-    Alignment[Alignment["Centered"] = 1] = "Centered";
-    Alignment[Alignment["Right"] = 2] = "Right";
-})(Alignment || (Alignment = {}));
-export default Alignment;
diff --git a/node_modules/@durtyfree/altv-nativeui/examples/nativeUI-example/includes/NativeUI/enums/Alignment.ts b/node_modules/@durtyfree/altv-nativeui/examples/nativeUI-example/includes/NativeUI/enums/Alignment.ts
deleted file mode 100644
index 0822d0d..0000000
--- a/node_modules/@durtyfree/altv-nativeui/examples/nativeUI-example/includes/NativeUI/enums/Alignment.ts
+++ /dev/null
@@ -1,7 +0,0 @@
-﻿export enum Alignment {
-    Left,
-    Centered,
-    Right
-}
-
-export default Alignment;
\ No newline at end of file
diff --git a/node_modules/@durtyfree/altv-nativeui/examples/nativeUI-example/includes/NativeUI/enums/BadgeStyle.js b/node_modules/@durtyfree/altv-nativeui/examples/nativeUI-example/includes/NativeUI/enums/BadgeStyle.js
deleted file mode 100644
index d49e69d..0000000
--- a/node_modules/@durtyfree/altv-nativeui/examples/nativeUI-example/includes/NativeUI/enums/BadgeStyle.js
+++ /dev/null
@@ -1,35 +0,0 @@
-var BadgeStyle;
-(function (BadgeStyle) {
-    BadgeStyle[BadgeStyle["None"] = 0] = "None";
-    BadgeStyle[BadgeStyle["BronzeMedal"] = 1] = "BronzeMedal";
-    BadgeStyle[BadgeStyle["GoldMedal"] = 2] = "GoldMedal";
-    BadgeStyle[BadgeStyle["SilverMedal"] = 3] = "SilverMedal";
-    BadgeStyle[BadgeStyle["Alert"] = 4] = "Alert";
-    BadgeStyle[BadgeStyle["Crown"] = 5] = "Crown";
-    BadgeStyle[BadgeStyle["Ammo"] = 6] = "Ammo";
-    BadgeStyle[BadgeStyle["Armour"] = 7] = "Armour";
-    BadgeStyle[BadgeStyle["Barber"] = 8] = "Barber";
-    BadgeStyle[BadgeStyle["Clothes"] = 9] = "Clothes";
-    BadgeStyle[BadgeStyle["Franklin"] = 10] = "Franklin";
-    BadgeStyle[BadgeStyle["Bike"] = 11] = "Bike";
-    BadgeStyle[BadgeStyle["Car"] = 12] = "Car";
-    BadgeStyle[BadgeStyle["Gun"] = 13] = "Gun";
-    BadgeStyle[BadgeStyle["Heart"] = 14] = "Heart";
-    BadgeStyle[BadgeStyle["Makeup"] = 15] = "Makeup";
-    BadgeStyle[BadgeStyle["Mask"] = 16] = "Mask";
-    BadgeStyle[BadgeStyle["Michael"] = 17] = "Michael";
-    BadgeStyle[BadgeStyle["Star"] = 18] = "Star";
-    BadgeStyle[BadgeStyle["Tatoo"] = 19] = "Tatoo";
-    BadgeStyle[BadgeStyle["Trevor"] = 20] = "Trevor";
-    BadgeStyle[BadgeStyle["Lock"] = 21] = "Lock";
-    BadgeStyle[BadgeStyle["Tick"] = 22] = "Tick";
-    BadgeStyle[BadgeStyle["Sale"] = 23] = "Sale";
-    BadgeStyle[BadgeStyle["ArrowLeft"] = 24] = "ArrowLeft";
-    BadgeStyle[BadgeStyle["ArrowRight"] = 25] = "ArrowRight";
-    BadgeStyle[BadgeStyle["Audio1"] = 26] = "Audio1";
-    BadgeStyle[BadgeStyle["Audio2"] = 27] = "Audio2";
-    BadgeStyle[BadgeStyle["Audio3"] = 28] = "Audio3";
-    BadgeStyle[BadgeStyle["AudioInactive"] = 29] = "AudioInactive";
-    BadgeStyle[BadgeStyle["AudioMute"] = 30] = "AudioMute";
-})(BadgeStyle || (BadgeStyle = {}));
-export default BadgeStyle;
diff --git a/node_modules/@durtyfree/altv-nativeui/examples/nativeUI-example/includes/NativeUI/enums/BadgeStyle.ts b/node_modules/@durtyfree/altv-nativeui/examples/nativeUI-example/includes/NativeUI/enums/BadgeStyle.ts
deleted file mode 100644
index 2ee4252..0000000
--- a/node_modules/@durtyfree/altv-nativeui/examples/nativeUI-example/includes/NativeUI/enums/BadgeStyle.ts
+++ /dev/null
@@ -1,35 +0,0 @@
-enum BadgeStyle {
-	None,
-	BronzeMedal,
-	GoldMedal,
-	SilverMedal,
-	Alert,
-	Crown,
-	Ammo,
-	Armour,
-	Barber,
-	Clothes,
-	Franklin,
-	Bike,
-	Car,
-	Gun,
-	Heart,
-	Makeup,
-	Mask,
-	Michael,
-	Star,
-	Tatoo,
-	Trevor,
-	Lock,
-	Tick,
-	Sale,
-	ArrowLeft,
-	ArrowRight,
-	Audio1,
-	Audio2,
-	Audio3,
-	AudioInactive,
-	AudioMute
-}
-
-export default BadgeStyle;
diff --git a/node_modules/@durtyfree/altv-nativeui/examples/nativeUI-example/includes/NativeUI/enums/ChangeDirection.js b/node_modules/@durtyfree/altv-nativeui/examples/nativeUI-example/includes/NativeUI/enums/ChangeDirection.js
deleted file mode 100644
index aeae425..0000000
--- a/node_modules/@durtyfree/altv-nativeui/examples/nativeUI-example/includes/NativeUI/enums/ChangeDirection.js
+++ /dev/null
@@ -1,6 +0,0 @@
-var ChangeDirection;
-(function (ChangeDirection) {
-    ChangeDirection[ChangeDirection["Left"] = 0] = "Left";
-    ChangeDirection[ChangeDirection["Right"] = 1] = "Right";
-})(ChangeDirection || (ChangeDirection = {}));
-export default ChangeDirection;
diff --git a/node_modules/@durtyfree/altv-nativeui/examples/nativeUI-example/includes/NativeUI/enums/ChangeDirection.ts b/node_modules/@durtyfree/altv-nativeui/examples/nativeUI-example/includes/NativeUI/enums/ChangeDirection.ts
deleted file mode 100644
index e6e8ac6..0000000
--- a/node_modules/@durtyfree/altv-nativeui/examples/nativeUI-example/includes/NativeUI/enums/ChangeDirection.ts
+++ /dev/null
@@ -1,6 +0,0 @@
-﻿enum ChangeDirection {
-    Left,
-    Right
-}
-
-export default ChangeDirection;
\ No newline at end of file
diff --git a/node_modules/@durtyfree/altv-nativeui/examples/nativeUI-example/includes/NativeUI/enums/Control.js b/node_modules/@durtyfree/altv-nativeui/examples/nativeUI-example/includes/NativeUI/enums/Control.js
deleted file mode 100644
index c0c0a17..0000000
--- a/node_modules/@durtyfree/altv-nativeui/examples/nativeUI-example/includes/NativeUI/enums/Control.js
+++ /dev/null
@@ -1,350 +0,0 @@
-var Control;
-(function (Control) {
-    Control[Control["NextCamera"] = 0] = "NextCamera";
-    Control[Control["LookLeftRight"] = 1] = "LookLeftRight";
-    Control[Control["LookUpDown"] = 2] = "LookUpDown";
-    Control[Control["LookUpOnly"] = 3] = "LookUpOnly";
-    Control[Control["LookDownOnly"] = 4] = "LookDownOnly";
-    Control[Control["LookLeftOnly"] = 5] = "LookLeftOnly";
-    Control[Control["LookRightOnly"] = 6] = "LookRightOnly";
-    Control[Control["CinematicSlowMo"] = 7] = "CinematicSlowMo";
-    Control[Control["FlyUpDown"] = 8] = "FlyUpDown";
-    Control[Control["FlyLeftRight"] = 9] = "FlyLeftRight";
-    Control[Control["ScriptedFlyZUp"] = 10] = "ScriptedFlyZUp";
-    Control[Control["ScriptedFlyZDown"] = 11] = "ScriptedFlyZDown";
-    Control[Control["WeaponWheelUpDown"] = 12] = "WeaponWheelUpDown";
-    Control[Control["WeaponWheelLeftRight"] = 13] = "WeaponWheelLeftRight";
-    Control[Control["WeaponWheelNext"] = 14] = "WeaponWheelNext";
-    Control[Control["WeaponWheelPrev"] = 15] = "WeaponWheelPrev";
-    Control[Control["SelectNextWeapon"] = 16] = "SelectNextWeapon";
-    Control[Control["SelectPrevWeapon"] = 17] = "SelectPrevWeapon";
-    Control[Control["SkipCutscene"] = 18] = "SkipCutscene";
-    Control[Control["CharacterWheel"] = 19] = "CharacterWheel";
-    Control[Control["MultiplayerInfo"] = 20] = "MultiplayerInfo";
-    Control[Control["Sprint"] = 21] = "Sprint";
-    Control[Control["Jump"] = 22] = "Jump";
-    Control[Control["Enter"] = 23] = "Enter";
-    Control[Control["Attack"] = 24] = "Attack";
-    Control[Control["Aim"] = 25] = "Aim";
-    Control[Control["LookBehind"] = 26] = "LookBehind";
-    Control[Control["Phone"] = 27] = "Phone";
-    Control[Control["SpecialAbility"] = 28] = "SpecialAbility";
-    Control[Control["SpecialAbilitySecondary"] = 29] = "SpecialAbilitySecondary";
-    Control[Control["MoveLeftRight"] = 30] = "MoveLeftRight";
-    Control[Control["MoveUpDown"] = 31] = "MoveUpDown";
-    Control[Control["MoveUpOnly"] = 32] = "MoveUpOnly";
-    Control[Control["MoveDownOnly"] = 33] = "MoveDownOnly";
-    Control[Control["MoveLeftOnly"] = 34] = "MoveLeftOnly";
-    Control[Control["MoveRightOnly"] = 35] = "MoveRightOnly";
-    Control[Control["Duck"] = 36] = "Duck";
-    Control[Control["SelectWeapon"] = 37] = "SelectWeapon";
-    Control[Control["Pickup"] = 38] = "Pickup";
-    Control[Control["SniperZoom"] = 39] = "SniperZoom";
-    Control[Control["SniperZoomInOnly"] = 40] = "SniperZoomInOnly";
-    Control[Control["SniperZoomOutOnly"] = 41] = "SniperZoomOutOnly";
-    Control[Control["SniperZoomInSecondary"] = 42] = "SniperZoomInSecondary";
-    Control[Control["SniperZoomOutSecondary"] = 43] = "SniperZoomOutSecondary";
-    Control[Control["Cover"] = 44] = "Cover";
-    Control[Control["Reload"] = 45] = "Reload";
-    Control[Control["Talk"] = 46] = "Talk";
-    Control[Control["Detonate"] = 47] = "Detonate";
-    Control[Control["HUDSpecial"] = 48] = "HUDSpecial";
-    Control[Control["Arrest"] = 49] = "Arrest";
-    Control[Control["AccurateAim"] = 50] = "AccurateAim";
-    Control[Control["Context"] = 51] = "Context";
-    Control[Control["ContextSecondary"] = 52] = "ContextSecondary";
-    Control[Control["WeaponSpecial"] = 53] = "WeaponSpecial";
-    Control[Control["WeaponSpecial2"] = 54] = "WeaponSpecial2";
-    Control[Control["Dive"] = 55] = "Dive";
-    Control[Control["DropWeapon"] = 56] = "DropWeapon";
-    Control[Control["DropAmmo"] = 57] = "DropAmmo";
-    Control[Control["ThrowGrenade"] = 58] = "ThrowGrenade";
-    Control[Control["VehicleMoveLeftRight"] = 59] = "VehicleMoveLeftRight";
-    Control[Control["VehicleMoveUpDown"] = 60] = "VehicleMoveUpDown";
-    Control[Control["VehicleMoveUpOnly"] = 61] = "VehicleMoveUpOnly";
-    Control[Control["VehicleMoveDownOnly"] = 62] = "VehicleMoveDownOnly";
-    Control[Control["VehicleMoveLeftOnly"] = 63] = "VehicleMoveLeftOnly";
-    Control[Control["VehicleMoveRightOnly"] = 64] = "VehicleMoveRightOnly";
-    Control[Control["VehicleSpecial"] = 65] = "VehicleSpecial";
-    Control[Control["VehicleGunLeftRight"] = 66] = "VehicleGunLeftRight";
-    Control[Control["VehicleGunUpDown"] = 67] = "VehicleGunUpDown";
-    Control[Control["VehicleAim"] = 68] = "VehicleAim";
-    Control[Control["VehicleAttack"] = 69] = "VehicleAttack";
-    Control[Control["VehicleAttack2"] = 70] = "VehicleAttack2";
-    Control[Control["VehicleAccelerate"] = 71] = "VehicleAccelerate";
-    Control[Control["VehicleBrake"] = 72] = "VehicleBrake";
-    Control[Control["VehicleDuck"] = 73] = "VehicleDuck";
-    Control[Control["VehicleHeadlight"] = 74] = "VehicleHeadlight";
-    Control[Control["VehicleExit"] = 75] = "VehicleExit";
-    Control[Control["VehicleHandbrake"] = 76] = "VehicleHandbrake";
-    Control[Control["VehicleHotwireLeft"] = 77] = "VehicleHotwireLeft";
-    Control[Control["VehicleHotwireRight"] = 78] = "VehicleHotwireRight";
-    Control[Control["VehicleLookBehind"] = 79] = "VehicleLookBehind";
-    Control[Control["VehicleCinCam"] = 80] = "VehicleCinCam";
-    Control[Control["VehicleNextRadio"] = 81] = "VehicleNextRadio";
-    Control[Control["VehiclePrevRadio"] = 82] = "VehiclePrevRadio";
-    Control[Control["VehicleNextRadioTrack"] = 83] = "VehicleNextRadioTrack";
-    Control[Control["VehiclePrevRadioTrack"] = 84] = "VehiclePrevRadioTrack";
-    Control[Control["VehicleRadioWheel"] = 85] = "VehicleRadioWheel";
-    Control[Control["VehicleHorn"] = 86] = "VehicleHorn";
-    Control[Control["VehicleFlyThrottleUp"] = 87] = "VehicleFlyThrottleUp";
-    Control[Control["VehicleFlyThrottleDown"] = 88] = "VehicleFlyThrottleDown";
-    Control[Control["VehicleFlyYawLeft"] = 89] = "VehicleFlyYawLeft";
-    Control[Control["VehicleFlyYawRight"] = 90] = "VehicleFlyYawRight";
-    Control[Control["VehiclePassengerAim"] = 91] = "VehiclePassengerAim";
-    Control[Control["VehiclePassengerAttack"] = 92] = "VehiclePassengerAttack";
-    Control[Control["VehicleSpecialAbilityFranklin"] = 93] = "VehicleSpecialAbilityFranklin";
-    Control[Control["VehicleStuntUpDown"] = 94] = "VehicleStuntUpDown";
-    Control[Control["VehicleCinematicUpDown"] = 95] = "VehicleCinematicUpDown";
-    Control[Control["VehicleCinematicUpOnly"] = 96] = "VehicleCinematicUpOnly";
-    Control[Control["VehicleCinematicDownOnly"] = 97] = "VehicleCinematicDownOnly";
-    Control[Control["VehicleCinematicLeftRight"] = 98] = "VehicleCinematicLeftRight";
-    Control[Control["VehicleSelectNextWeapon"] = 99] = "VehicleSelectNextWeapon";
-    Control[Control["VehicleSelectPrevWeapon"] = 100] = "VehicleSelectPrevWeapon";
-    Control[Control["VehicleRoof"] = 101] = "VehicleRoof";
-    Control[Control["VehicleJump"] = 102] = "VehicleJump";
-    Control[Control["VehicleGrapplingHook"] = 103] = "VehicleGrapplingHook";
-    Control[Control["VehicleShuffle"] = 104] = "VehicleShuffle";
-    Control[Control["VehicleDropProjectile"] = 105] = "VehicleDropProjectile";
-    Control[Control["VehicleMouseControlOverride"] = 106] = "VehicleMouseControlOverride";
-    Control[Control["VehicleFlyRollLeftRight"] = 107] = "VehicleFlyRollLeftRight";
-    Control[Control["VehicleFlyRollLeftOnly"] = 108] = "VehicleFlyRollLeftOnly";
-    Control[Control["VehicleFlyRollRightOnly"] = 109] = "VehicleFlyRollRightOnly";
-    Control[Control["VehicleFlyPitchUpDown"] = 110] = "VehicleFlyPitchUpDown";
-    Control[Control["VehicleFlyPitchUpOnly"] = 111] = "VehicleFlyPitchUpOnly";
-    Control[Control["VehicleFlyPitchDownOnly"] = 112] = "VehicleFlyPitchDownOnly";
-    Control[Control["VehicleFlyUnderCarriage"] = 113] = "VehicleFlyUnderCarriage";
-    Control[Control["VehicleFlyAttack"] = 114] = "VehicleFlyAttack";
-    Control[Control["VehicleFlySelectNextWeapon"] = 115] = "VehicleFlySelectNextWeapon";
-    Control[Control["VehicleFlySelectPrevWeapon"] = 116] = "VehicleFlySelectPrevWeapon";
-    Control[Control["VehicleFlySelectTargetLeft"] = 117] = "VehicleFlySelectTargetLeft";
-    Control[Control["VehicleFlySelectTargetRight"] = 118] = "VehicleFlySelectTargetRight";
-    Control[Control["VehicleFlyVerticalFlightMode"] = 119] = "VehicleFlyVerticalFlightMode";
-    Control[Control["VehicleFlyDuck"] = 120] = "VehicleFlyDuck";
-    Control[Control["VehicleFlyAttackCamera"] = 121] = "VehicleFlyAttackCamera";
-    Control[Control["VehicleFlyMouseControlOverride"] = 122] = "VehicleFlyMouseControlOverride";
-    Control[Control["VehicleSubTurnLeftRight"] = 123] = "VehicleSubTurnLeftRight";
-    Control[Control["VehicleSubTurnLeftOnly"] = 124] = "VehicleSubTurnLeftOnly";
-    Control[Control["VehicleSubTurnRightOnly"] = 125] = "VehicleSubTurnRightOnly";
-    Control[Control["VehicleSubPitchUpDown"] = 126] = "VehicleSubPitchUpDown";
-    Control[Control["VehicleSubPitchUpOnly"] = 127] = "VehicleSubPitchUpOnly";
-    Control[Control["VehicleSubPitchDownOnly"] = 128] = "VehicleSubPitchDownOnly";
-    Control[Control["VehicleSubThrottleUp"] = 129] = "VehicleSubThrottleUp";
-    Control[Control["VehicleSubThrottleDown"] = 130] = "VehicleSubThrottleDown";
-    Control[Control["VehicleSubAscend"] = 131] = "VehicleSubAscend";
-    Control[Control["VehicleSubDescend"] = 132] = "VehicleSubDescend";
-    Control[Control["VehicleSubTurnHardLeft"] = 133] = "VehicleSubTurnHardLeft";
-    Control[Control["VehicleSubTurnHardRight"] = 134] = "VehicleSubTurnHardRight";
-    Control[Control["VehicleSubMouseControlOverride"] = 135] = "VehicleSubMouseControlOverride";
-    Control[Control["VehiclePushbikePedal"] = 136] = "VehiclePushbikePedal";
-    Control[Control["VehiclePushbikeSprint"] = 137] = "VehiclePushbikeSprint";
-    Control[Control["VehiclePushbikeFrontBrake"] = 138] = "VehiclePushbikeFrontBrake";
-    Control[Control["VehiclePushbikeRearBrake"] = 139] = "VehiclePushbikeRearBrake";
-    Control[Control["MeleeAttackLight"] = 140] = "MeleeAttackLight";
-    Control[Control["MeleeAttackHeavy"] = 141] = "MeleeAttackHeavy";
-    Control[Control["MeleeAttackAlternate"] = 142] = "MeleeAttackAlternate";
-    Control[Control["MeleeBlock"] = 143] = "MeleeBlock";
-    Control[Control["ParachuteDeploy"] = 144] = "ParachuteDeploy";
-    Control[Control["ParachuteDetach"] = 145] = "ParachuteDetach";
-    Control[Control["ParachuteTurnLeftRight"] = 146] = "ParachuteTurnLeftRight";
-    Control[Control["ParachuteTurnLeftOnly"] = 147] = "ParachuteTurnLeftOnly";
-    Control[Control["ParachuteTurnRightOnly"] = 148] = "ParachuteTurnRightOnly";
-    Control[Control["ParachutePitchUpDown"] = 149] = "ParachutePitchUpDown";
-    Control[Control["ParachutePitchUpOnly"] = 150] = "ParachutePitchUpOnly";
-    Control[Control["ParachutePitchDownOnly"] = 151] = "ParachutePitchDownOnly";
-    Control[Control["ParachuteBrakeLeft"] = 152] = "ParachuteBrakeLeft";
-    Control[Control["ParachuteBrakeRight"] = 153] = "ParachuteBrakeRight";
-    Control[Control["ParachuteSmoke"] = 154] = "ParachuteSmoke";
-    Control[Control["ParachutePrecisionLanding"] = 155] = "ParachutePrecisionLanding";
-    Control[Control["Map"] = 156] = "Map";
-    Control[Control["SelectWeaponUnarmed"] = 157] = "SelectWeaponUnarmed";
-    Control[Control["SelectWeaponMelee"] = 158] = "SelectWeaponMelee";
-    Control[Control["SelectWeaponHandgun"] = 159] = "SelectWeaponHandgun";
-    Control[Control["SelectWeaponShotgun"] = 160] = "SelectWeaponShotgun";
-    Control[Control["SelectWeaponSmg"] = 161] = "SelectWeaponSmg";
-    Control[Control["SelectWeaponAutoRifle"] = 162] = "SelectWeaponAutoRifle";
-    Control[Control["SelectWeaponSniper"] = 163] = "SelectWeaponSniper";
-    Control[Control["SelectWeaponHeavy"] = 164] = "SelectWeaponHeavy";
-    Control[Control["SelectWeaponSpecial"] = 165] = "SelectWeaponSpecial";
-    Control[Control["SelectCharacterMichael"] = 166] = "SelectCharacterMichael";
-    Control[Control["SelectCharacterFranklin"] = 167] = "SelectCharacterFranklin";
-    Control[Control["SelectCharacterTrevor"] = 168] = "SelectCharacterTrevor";
-    Control[Control["SelectCharacterMultiplayer"] = 169] = "SelectCharacterMultiplayer";
-    Control[Control["SaveReplayClip"] = 170] = "SaveReplayClip";
-    Control[Control["SpecialAbilityPC"] = 171] = "SpecialAbilityPC";
-    Control[Control["PhoneUp"] = 172] = "PhoneUp";
-    Control[Control["PhoneDown"] = 173] = "PhoneDown";
-    Control[Control["PhoneLeft"] = 174] = "PhoneLeft";
-    Control[Control["PhoneRight"] = 175] = "PhoneRight";
-    Control[Control["PhoneSelect"] = 176] = "PhoneSelect";
-    Control[Control["PhoneCancel"] = 177] = "PhoneCancel";
-    Control[Control["PhoneOption"] = 178] = "PhoneOption";
-    Control[Control["PhoneExtraOption"] = 179] = "PhoneExtraOption";
-    Control[Control["PhoneScrollForward"] = 180] = "PhoneScrollForward";
-    Control[Control["PhoneScrollBackward"] = 181] = "PhoneScrollBackward";
-    Control[Control["PhoneCameraFocusLock"] = 182] = "PhoneCameraFocusLock";
-    Control[Control["PhoneCameraGrid"] = 183] = "PhoneCameraGrid";
-    Control[Control["PhoneCameraSelfie"] = 184] = "PhoneCameraSelfie";
-    Control[Control["PhoneCameraDOF"] = 185] = "PhoneCameraDOF";
-    Control[Control["PhoneCameraExpression"] = 186] = "PhoneCameraExpression";
-    Control[Control["FrontendDown"] = 187] = "FrontendDown";
-    Control[Control["FrontendUp"] = 188] = "FrontendUp";
-    Control[Control["FrontendLeft"] = 189] = "FrontendLeft";
-    Control[Control["FrontendRight"] = 190] = "FrontendRight";
-    Control[Control["FrontendRdown"] = 191] = "FrontendRdown";
-    Control[Control["FrontendRup"] = 192] = "FrontendRup";
-    Control[Control["FrontendRleft"] = 193] = "FrontendRleft";
-    Control[Control["FrontendRright"] = 194] = "FrontendRright";
-    Control[Control["FrontendAxisX"] = 195] = "FrontendAxisX";
-    Control[Control["FrontendAxisY"] = 196] = "FrontendAxisY";
-    Control[Control["FrontendRightAxisX"] = 197] = "FrontendRightAxisX";
-    Control[Control["FrontendRightAxisY"] = 198] = "FrontendRightAxisY";
-    Control[Control["FrontendPause"] = 199] = "FrontendPause";
-    Control[Control["FrontendPauseAlternate"] = 200] = "FrontendPauseAlternate";
-    Control[Control["FrontendAccept"] = 201] = "FrontendAccept";
-    Control[Control["FrontendCancel"] = 202] = "FrontendCancel";
-    Control[Control["FrontendX"] = 203] = "FrontendX";
-    Control[Control["FrontendY"] = 204] = "FrontendY";
-    Control[Control["FrontendLb"] = 205] = "FrontendLb";
-    Control[Control["FrontendRb"] = 206] = "FrontendRb";
-    Control[Control["FrontendLt"] = 207] = "FrontendLt";
-    Control[Control["FrontendRt"] = 208] = "FrontendRt";
-    Control[Control["FrontendLs"] = 209] = "FrontendLs";
-    Control[Control["FrontendRs"] = 210] = "FrontendRs";
-    Control[Control["FrontendLeaderboard"] = 211] = "FrontendLeaderboard";
-    Control[Control["FrontendSocialClub"] = 212] = "FrontendSocialClub";
-    Control[Control["FrontendSocialClubSecondary"] = 213] = "FrontendSocialClubSecondary";
-    Control[Control["FrontendDelete"] = 214] = "FrontendDelete";
-    Control[Control["FrontendEndscreenAccept"] = 215] = "FrontendEndscreenAccept";
-    Control[Control["FrontendEndscreenExpand"] = 216] = "FrontendEndscreenExpand";
-    Control[Control["FrontendSelect"] = 217] = "FrontendSelect";
-    Control[Control["ScriptLeftAxisX"] = 218] = "ScriptLeftAxisX";
-    Control[Control["ScriptLeftAxisY"] = 219] = "ScriptLeftAxisY";
-    Control[Control["ScriptRightAxisX"] = 220] = "ScriptRightAxisX";
-    Control[Control["ScriptRightAxisY"] = 221] = "ScriptRightAxisY";
-    Control[Control["ScriptRUp"] = 222] = "ScriptRUp";
-    Control[Control["ScriptRDown"] = 223] = "ScriptRDown";
-    Control[Control["ScriptRLeft"] = 224] = "ScriptRLeft";
-    Control[Control["ScriptRRight"] = 225] = "ScriptRRight";
-    Control[Control["ScriptLB"] = 226] = "ScriptLB";
-    Control[Control["ScriptRB"] = 227] = "ScriptRB";
-    Control[Control["ScriptLT"] = 228] = "ScriptLT";
-    Control[Control["ScriptRT"] = 229] = "ScriptRT";
-    Control[Control["ScriptLS"] = 230] = "ScriptLS";
-    Control[Control["ScriptRS"] = 231] = "ScriptRS";
-    Control[Control["ScriptPadUp"] = 232] = "ScriptPadUp";
-    Control[Control["ScriptPadDown"] = 233] = "ScriptPadDown";
-    Control[Control["ScriptPadLeft"] = 234] = "ScriptPadLeft";
-    Control[Control["ScriptPadRight"] = 235] = "ScriptPadRight";
-    Control[Control["ScriptSelect"] = 236] = "ScriptSelect";
-    Control[Control["CursorAccept"] = 237] = "CursorAccept";
-    Control[Control["CursorCancel"] = 238] = "CursorCancel";
-    Control[Control["CursorX"] = 239] = "CursorX";
-    Control[Control["CursorY"] = 240] = "CursorY";
-    Control[Control["CursorScrollUp"] = 241] = "CursorScrollUp";
-    Control[Control["CursorScrollDown"] = 242] = "CursorScrollDown";
-    Control[Control["EnterCheatCode"] = 243] = "EnterCheatCode";
-    Control[Control["InteractionMenu"] = 244] = "InteractionMenu";
-    Control[Control["MpTextChatAll"] = 245] = "MpTextChatAll";
-    Control[Control["MpTextChatTeam"] = 246] = "MpTextChatTeam";
-    Control[Control["MpTextChatFriends"] = 247] = "MpTextChatFriends";
-    Control[Control["MpTextChatCrew"] = 248] = "MpTextChatCrew";
-    Control[Control["PushToTalk"] = 249] = "PushToTalk";
-    Control[Control["CreatorLS"] = 250] = "CreatorLS";
-    Control[Control["CreatorRS"] = 251] = "CreatorRS";
-    Control[Control["CreatorLT"] = 252] = "CreatorLT";
-    Control[Control["CreatorRT"] = 253] = "CreatorRT";
-    Control[Control["CreatorMenuToggle"] = 254] = "CreatorMenuToggle";
-    Control[Control["CreatorAccept"] = 255] = "CreatorAccept";
-    Control[Control["CreatorDelete"] = 256] = "CreatorDelete";
-    Control[Control["Attack2"] = 257] = "Attack2";
-    Control[Control["RappelJump"] = 258] = "RappelJump";
-    Control[Control["RappelLongJump"] = 259] = "RappelLongJump";
-    Control[Control["RappelSmashWindow"] = 260] = "RappelSmashWindow";
-    Control[Control["PrevWeapon"] = 261] = "PrevWeapon";
-    Control[Control["NextWeapon"] = 262] = "NextWeapon";
-    Control[Control["MeleeAttack1"] = 263] = "MeleeAttack1";
-    Control[Control["MeleeAttack2"] = 264] = "MeleeAttack2";
-    Control[Control["Whistle"] = 265] = "Whistle";
-    Control[Control["MoveLeft"] = 266] = "MoveLeft";
-    Control[Control["MoveRight"] = 267] = "MoveRight";
-    Control[Control["MoveUp"] = 268] = "MoveUp";
-    Control[Control["MoveDown"] = 269] = "MoveDown";
-    Control[Control["LookLeft"] = 270] = "LookLeft";
-    Control[Control["LookRight"] = 271] = "LookRight";
-    Control[Control["LookUp"] = 272] = "LookUp";
-    Control[Control["LookDown"] = 273] = "LookDown";
-    Control[Control["SniperZoomIn"] = 274] = "SniperZoomIn";
-    Control[Control["SniperZoomOut"] = 275] = "SniperZoomOut";
-    Control[Control["SniperZoomInAlternate"] = 276] = "SniperZoomInAlternate";
-    Control[Control["SniperZoomOutAlternate"] = 277] = "SniperZoomOutAlternate";
-    Control[Control["VehicleMoveLeft"] = 278] = "VehicleMoveLeft";
-    Control[Control["VehicleMoveRight"] = 279] = "VehicleMoveRight";
-    Control[Control["VehicleMoveUp"] = 280] = "VehicleMoveUp";
-    Control[Control["VehicleMoveDown"] = 281] = "VehicleMoveDown";
-    Control[Control["VehicleGunLeft"] = 282] = "VehicleGunLeft";
-    Control[Control["VehicleGunRight"] = 283] = "VehicleGunRight";
-    Control[Control["VehicleGunUp"] = 284] = "VehicleGunUp";
-    Control[Control["VehicleGunDown"] = 285] = "VehicleGunDown";
-    Control[Control["VehicleLookLeft"] = 286] = "VehicleLookLeft";
-    Control[Control["VehicleLookRight"] = 287] = "VehicleLookRight";
-    Control[Control["ReplayStartStopRecording"] = 288] = "ReplayStartStopRecording";
-    Control[Control["ReplayStartStopRecordingSecondary"] = 289] = "ReplayStartStopRecordingSecondary";
-    Control[Control["ScaledLookLeftRight"] = 290] = "ScaledLookLeftRight";
-    Control[Control["ScaledLookUpDown"] = 291] = "ScaledLookUpDown";
-    Control[Control["ScaledLookUpOnly"] = 292] = "ScaledLookUpOnly";
-    Control[Control["ScaledLookDownOnly"] = 293] = "ScaledLookDownOnly";
-    Control[Control["ScaledLookLeftOnly"] = 294] = "ScaledLookLeftOnly";
-    Control[Control["ScaledLookRightOnly"] = 295] = "ScaledLookRightOnly";
-    Control[Control["ReplayMarkerDelete"] = 296] = "ReplayMarkerDelete";
-    Control[Control["ReplayClipDelete"] = 297] = "ReplayClipDelete";
-    Control[Control["ReplayPause"] = 298] = "ReplayPause";
-    Control[Control["ReplayRewind"] = 299] = "ReplayRewind";
-    Control[Control["ReplayFfwd"] = 300] = "ReplayFfwd";
-    Control[Control["ReplayNewmarker"] = 301] = "ReplayNewmarker";
-    Control[Control["ReplayRecord"] = 302] = "ReplayRecord";
-    Control[Control["ReplayScreenshot"] = 303] = "ReplayScreenshot";
-    Control[Control["ReplayHidehud"] = 304] = "ReplayHidehud";
-    Control[Control["ReplayStartpoint"] = 305] = "ReplayStartpoint";
-    Control[Control["ReplayEndpoint"] = 306] = "ReplayEndpoint";
-    Control[Control["ReplayAdvance"] = 307] = "ReplayAdvance";
-    Control[Control["ReplayBack"] = 308] = "ReplayBack";
-    Control[Control["ReplayTools"] = 309] = "ReplayTools";
-    Control[Control["ReplayRestart"] = 310] = "ReplayRestart";
-    Control[Control["ReplayShowhotkey"] = 311] = "ReplayShowhotkey";
-    Control[Control["ReplayCycleMarkerLeft"] = 312] = "ReplayCycleMarkerLeft";
-    Control[Control["ReplayCycleMarkerRight"] = 313] = "ReplayCycleMarkerRight";
-    Control[Control["ReplayFOVIncrease"] = 314] = "ReplayFOVIncrease";
-    Control[Control["ReplayFOVDecrease"] = 315] = "ReplayFOVDecrease";
-    Control[Control["ReplayCameraUp"] = 316] = "ReplayCameraUp";
-    Control[Control["ReplayCameraDown"] = 317] = "ReplayCameraDown";
-    Control[Control["ReplaySave"] = 318] = "ReplaySave";
-    Control[Control["ReplayToggletime"] = 319] = "ReplayToggletime";
-    Control[Control["ReplayToggletips"] = 320] = "ReplayToggletips";
-    Control[Control["ReplayPreview"] = 321] = "ReplayPreview";
-    Control[Control["ReplayToggleTimeline"] = 322] = "ReplayToggleTimeline";
-    Control[Control["ReplayTimelinePickupClip"] = 323] = "ReplayTimelinePickupClip";
-    Control[Control["ReplayTimelineDuplicateClip"] = 324] = "ReplayTimelineDuplicateClip";
-    Control[Control["ReplayTimelinePlaceClip"] = 325] = "ReplayTimelinePlaceClip";
-    Control[Control["ReplayCtrl"] = 326] = "ReplayCtrl";
-    Control[Control["ReplayTimelineSave"] = 327] = "ReplayTimelineSave";
-    Control[Control["ReplayPreviewAudio"] = 328] = "ReplayPreviewAudio";
-    Control[Control["VehicleDriveLook"] = 329] = "VehicleDriveLook";
-    Control[Control["VehicleDriveLook2"] = 330] = "VehicleDriveLook2";
-    Control[Control["VehicleFlyAttack2"] = 331] = "VehicleFlyAttack2";
-    Control[Control["RadioWheelUpDown"] = 332] = "RadioWheelUpDown";
-    Control[Control["RadioWheelLeftRight"] = 333] = "RadioWheelLeftRight";
-    Control[Control["VehicleSlowMoUpDown"] = 334] = "VehicleSlowMoUpDown";
-    Control[Control["VehicleSlowMoUpOnly"] = 335] = "VehicleSlowMoUpOnly";
-    Control[Control["VehicleSlowMoDownOnly"] = 336] = "VehicleSlowMoDownOnly";
-    Control[Control["MapPointOfInterest"] = 337] = "MapPointOfInterest";
-    Control[Control["ReplaySnapmaticPhoto"] = 338] = "ReplaySnapmaticPhoto";
-    Control[Control["VehicleCarJump"] = 339] = "VehicleCarJump";
-    Control[Control["VehicleRocketBoost"] = 340] = "VehicleRocketBoost";
-    Control[Control["VehicleParachute"] = 341] = "VehicleParachute";
-    Control[Control["VehicleBikeWings"] = 342] = "VehicleBikeWings";
-    Control[Control["VehicleFlyBombBay"] = 343] = "VehicleFlyBombBay";
-    Control[Control["VehicleFlyCounter"] = 344] = "VehicleFlyCounter";
-    Control[Control["VehicleFlyTransform"] = 345] = "VehicleFlyTransform";
-})(Control || (Control = {}));
-export default Control;
diff --git a/node_modules/@durtyfree/altv-nativeui/examples/nativeUI-example/includes/NativeUI/enums/Control.ts b/node_modules/@durtyfree/altv-nativeui/examples/nativeUI-example/includes/NativeUI/enums/Control.ts
deleted file mode 100644
index 764499d..0000000
--- a/node_modules/@durtyfree/altv-nativeui/examples/nativeUI-example/includes/NativeUI/enums/Control.ts
+++ /dev/null
@@ -1,350 +0,0 @@
-﻿enum Control {
-    NextCamera,
-    LookLeftRight,
-    LookUpDown,
-    LookUpOnly,
-    LookDownOnly,
-    LookLeftOnly,
-    LookRightOnly,
-    CinematicSlowMo,
-    FlyUpDown,
-    FlyLeftRight,
-    ScriptedFlyZUp,
-    ScriptedFlyZDown,
-    WeaponWheelUpDown,
-    WeaponWheelLeftRight,
-    WeaponWheelNext,
-    WeaponWheelPrev,
-    SelectNextWeapon,
-    SelectPrevWeapon,
-    SkipCutscene,
-    CharacterWheel,
-    MultiplayerInfo,
-    Sprint,
-    Jump,
-    Enter,
-    Attack,
-    Aim,
-    LookBehind,
-    Phone,
-    SpecialAbility,
-    SpecialAbilitySecondary,
-    MoveLeftRight,
-    MoveUpDown,
-    MoveUpOnly,
-    MoveDownOnly,
-    MoveLeftOnly,
-    MoveRightOnly,
-    Duck,
-    SelectWeapon,
-    Pickup,
-    SniperZoom,
-    SniperZoomInOnly,
-    SniperZoomOutOnly,
-    SniperZoomInSecondary,
-    SniperZoomOutSecondary,
-    Cover,
-    Reload,
-    Talk,
-    Detonate,
-    HUDSpecial,
-    Arrest,
-    AccurateAim,
-    Context,
-    ContextSecondary,
-    WeaponSpecial,
-    WeaponSpecial2,
-    Dive,
-    DropWeapon,
-    DropAmmo,
-    ThrowGrenade,
-    VehicleMoveLeftRight,
-    VehicleMoveUpDown,
-    VehicleMoveUpOnly,
-    VehicleMoveDownOnly,
-    VehicleMoveLeftOnly,
-    VehicleMoveRightOnly,
-    VehicleSpecial,
-    VehicleGunLeftRight,
-    VehicleGunUpDown,
-    VehicleAim,
-    VehicleAttack,
-    VehicleAttack2,
-    VehicleAccelerate,
-    VehicleBrake,
-    VehicleDuck,
-    VehicleHeadlight,
-    VehicleExit,
-    VehicleHandbrake,
-    VehicleHotwireLeft,
-    VehicleHotwireRight,
-    VehicleLookBehind,
-    VehicleCinCam,
-    VehicleNextRadio,
-    VehiclePrevRadio,
-    VehicleNextRadioTrack,
-    VehiclePrevRadioTrack,
-    VehicleRadioWheel,
-    VehicleHorn,
-    VehicleFlyThrottleUp,
-    VehicleFlyThrottleDown,
-    VehicleFlyYawLeft,
-    VehicleFlyYawRight,
-    VehiclePassengerAim,
-    VehiclePassengerAttack,
-    VehicleSpecialAbilityFranklin,
-    VehicleStuntUpDown,
-    VehicleCinematicUpDown,
-    VehicleCinematicUpOnly,
-    VehicleCinematicDownOnly,
-    VehicleCinematicLeftRight,
-    VehicleSelectNextWeapon,
-    VehicleSelectPrevWeapon,
-    VehicleRoof,
-    VehicleJump,
-    VehicleGrapplingHook,
-    VehicleShuffle,
-    VehicleDropProjectile,
-    VehicleMouseControlOverride,
-    VehicleFlyRollLeftRight,
-    VehicleFlyRollLeftOnly,
-    VehicleFlyRollRightOnly,
-    VehicleFlyPitchUpDown,
-    VehicleFlyPitchUpOnly,
-    VehicleFlyPitchDownOnly,
-    VehicleFlyUnderCarriage,
-    VehicleFlyAttack,
-    VehicleFlySelectNextWeapon,
-    VehicleFlySelectPrevWeapon,
-    VehicleFlySelectTargetLeft,
-    VehicleFlySelectTargetRight,
-    VehicleFlyVerticalFlightMode,
-    VehicleFlyDuck,
-    VehicleFlyAttackCamera,
-    VehicleFlyMouseControlOverride,
-    VehicleSubTurnLeftRight,
-    VehicleSubTurnLeftOnly,
-    VehicleSubTurnRightOnly,
-    VehicleSubPitchUpDown,
-    VehicleSubPitchUpOnly,
-    VehicleSubPitchDownOnly,
-    VehicleSubThrottleUp,
-    VehicleSubThrottleDown,
-    VehicleSubAscend,
-    VehicleSubDescend,
-    VehicleSubTurnHardLeft,
-    VehicleSubTurnHardRight,
-    VehicleSubMouseControlOverride,
-    VehiclePushbikePedal,
-    VehiclePushbikeSprint,
-    VehiclePushbikeFrontBrake,
-    VehiclePushbikeRearBrake,
-    MeleeAttackLight,
-    MeleeAttackHeavy,
-    MeleeAttackAlternate,
-    MeleeBlock,
-    ParachuteDeploy,
-    ParachuteDetach,
-    ParachuteTurnLeftRight,
-    ParachuteTurnLeftOnly,
-    ParachuteTurnRightOnly,
-    ParachutePitchUpDown,
-    ParachutePitchUpOnly,
-    ParachutePitchDownOnly,
-    ParachuteBrakeLeft,
-    ParachuteBrakeRight,
-    ParachuteSmoke,
-    ParachutePrecisionLanding,
-    Map,
-    SelectWeaponUnarmed,
-    SelectWeaponMelee,
-    SelectWeaponHandgun,
-    SelectWeaponShotgun,
-    SelectWeaponSmg,
-    SelectWeaponAutoRifle,
-    SelectWeaponSniper,
-    SelectWeaponHeavy,
-    SelectWeaponSpecial,
-    SelectCharacterMichael,
-    SelectCharacterFranklin,
-    SelectCharacterTrevor,
-    SelectCharacterMultiplayer,
-    SaveReplayClip,
-    SpecialAbilityPC,
-    PhoneUp,
-    PhoneDown,
-    PhoneLeft,
-    PhoneRight,
-    PhoneSelect,
-    PhoneCancel,
-    PhoneOption,
-    PhoneExtraOption,
-    PhoneScrollForward,
-    PhoneScrollBackward,
-    PhoneCameraFocusLock,
-    PhoneCameraGrid,
-    PhoneCameraSelfie,
-    PhoneCameraDOF,
-    PhoneCameraExpression,
-    FrontendDown,
-    FrontendUp,
-    FrontendLeft,
-    FrontendRight,
-    FrontendRdown,
-    FrontendRup,
-    FrontendRleft,
-    FrontendRright,
-    FrontendAxisX,
-    FrontendAxisY,
-    FrontendRightAxisX,
-    FrontendRightAxisY,
-    FrontendPause,
-    FrontendPauseAlternate,
-    FrontendAccept,
-    FrontendCancel,
-    FrontendX,
-    FrontendY,
-    FrontendLb,
-    FrontendRb,
-    FrontendLt,
-    FrontendRt,
-    FrontendLs,
-    FrontendRs,
-    FrontendLeaderboard,
-    FrontendSocialClub,
-    FrontendSocialClubSecondary,
-    FrontendDelete,
-    FrontendEndscreenAccept,
-    FrontendEndscreenExpand,
-    FrontendSelect,
-    ScriptLeftAxisX,
-    ScriptLeftAxisY,
-    ScriptRightAxisX,
-    ScriptRightAxisY,
-    ScriptRUp,
-    ScriptRDown,
-    ScriptRLeft,
-    ScriptRRight,
-    ScriptLB,
-    ScriptRB,
-    ScriptLT,
-    ScriptRT,
-    ScriptLS,
-    ScriptRS,
-    ScriptPadUp,
-    ScriptPadDown,
-    ScriptPadLeft,
-    ScriptPadRight,
-    ScriptSelect,
-    CursorAccept,
-    CursorCancel,
-    CursorX,
-    CursorY,
-    CursorScrollUp,
-    CursorScrollDown,
-    EnterCheatCode,
-    InteractionMenu,
-    MpTextChatAll,
-    MpTextChatTeam,
-    MpTextChatFriends,
-    MpTextChatCrew,
-    PushToTalk,
-    CreatorLS,
-    CreatorRS,
-    CreatorLT,
-    CreatorRT,
-    CreatorMenuToggle,
-    CreatorAccept,
-    CreatorDelete,
-    Attack2,
-    RappelJump,
-    RappelLongJump,
-    RappelSmashWindow,
-    PrevWeapon,
-    NextWeapon,
-    MeleeAttack1,
-    MeleeAttack2,
-    Whistle,
-    MoveLeft,
-    MoveRight,
-    MoveUp,
-    MoveDown,
-    LookLeft,
-    LookRight,
-    LookUp,
-    LookDown,
-    SniperZoomIn,
-    SniperZoomOut,
-    SniperZoomInAlternate,
-    SniperZoomOutAlternate,
-    VehicleMoveLeft,
-    VehicleMoveRight,
-    VehicleMoveUp,
-    VehicleMoveDown,
-    VehicleGunLeft,
-    VehicleGunRight,
-    VehicleGunUp,
-    VehicleGunDown,
-    VehicleLookLeft,
-    VehicleLookRight,
-    ReplayStartStopRecording,
-    ReplayStartStopRecordingSecondary,
-    ScaledLookLeftRight,
-    ScaledLookUpDown,
-    ScaledLookUpOnly,
-    ScaledLookDownOnly,
-    ScaledLookLeftOnly,
-    ScaledLookRightOnly,
-    ReplayMarkerDelete,
-    ReplayClipDelete,
-    ReplayPause,
-    ReplayRewind,
-    ReplayFfwd,
-    ReplayNewmarker,
-    ReplayRecord,
-    ReplayScreenshot,
-    ReplayHidehud,
-    ReplayStartpoint,
-    ReplayEndpoint,
-    ReplayAdvance,
-    ReplayBack,
-    ReplayTools,
-    ReplayRestart,
-    ReplayShowhotkey,
-    ReplayCycleMarkerLeft,
-    ReplayCycleMarkerRight,
-    ReplayFOVIncrease,
-    ReplayFOVDecrease,
-    ReplayCameraUp,
-    ReplayCameraDown,
-    ReplaySave,
-    ReplayToggletime,
-    ReplayToggletips,
-    ReplayPreview,
-    ReplayToggleTimeline,
-    ReplayTimelinePickupClip,
-    ReplayTimelineDuplicateClip,
-    ReplayTimelinePlaceClip,
-    ReplayCtrl,
-    ReplayTimelineSave,
-    ReplayPreviewAudio,
-    VehicleDriveLook,
-    VehicleDriveLook2,
-    VehicleFlyAttack2,
-    RadioWheelUpDown,
-    RadioWheelLeftRight,
-    VehicleSlowMoUpDown,
-    VehicleSlowMoUpOnly,
-    VehicleSlowMoDownOnly,
-    MapPointOfInterest,
-    ReplaySnapmaticPhoto,
-    VehicleCarJump,
-    VehicleRocketBoost,
-    VehicleParachute,
-    VehicleBikeWings,
-    VehicleFlyBombBay,
-    VehicleFlyCounter,
-    VehicleFlyTransform,
-}
-
-export default Control;
\ No newline at end of file
diff --git a/node_modules/@durtyfree/altv-nativeui/examples/nativeUI-example/includes/NativeUI/enums/Font.js b/node_modules/@durtyfree/altv-nativeui/examples/nativeUI-example/includes/NativeUI/enums/Font.js
deleted file mode 100644
index ed763e2..0000000
--- a/node_modules/@durtyfree/altv-nativeui/examples/nativeUI-example/includes/NativeUI/enums/Font.js
+++ /dev/null
@@ -1,9 +0,0 @@
-var Font;
-(function (Font) {
-    Font[Font["ChaletLondon"] = 0] = "ChaletLondon";
-    Font[Font["HouseScript"] = 1] = "HouseScript";
-    Font[Font["Monospace"] = 2] = "Monospace";
-    Font[Font["CharletComprimeColonge"] = 4] = "CharletComprimeColonge";
-    Font[Font["Pricedown"] = 7] = "Pricedown";
-})(Font || (Font = {}));
-export default Font;
diff --git a/node_modules/@durtyfree/altv-nativeui/examples/nativeUI-example/includes/NativeUI/enums/Font.ts b/node_modules/@durtyfree/altv-nativeui/examples/nativeUI-example/includes/NativeUI/enums/Font.ts
deleted file mode 100644
index 017329b..0000000
--- a/node_modules/@durtyfree/altv-nativeui/examples/nativeUI-example/includes/NativeUI/enums/Font.ts
+++ /dev/null
@@ -1,9 +0,0 @@
-enum Font {
-	ChaletLondon = 0,
-	HouseScript = 1,
-	Monospace = 2,
-	CharletComprimeColonge = 4,
-	Pricedown = 7
-}
-
-export default Font;
diff --git a/node_modules/@durtyfree/altv-nativeui/examples/nativeUI-example/includes/NativeUI/enums/HudColor.js b/node_modules/@durtyfree/altv-nativeui/examples/nativeUI-example/includes/NativeUI/enums/HudColor.js
deleted file mode 100644
index 097cb3f..0000000
--- a/node_modules/@durtyfree/altv-nativeui/examples/nativeUI-example/includes/NativeUI/enums/HudColor.js
+++ /dev/null
@@ -1,184 +0,0 @@
-var HudColor;
-(function (HudColor) {
-    HudColor[HudColor["HUD_COLOUR_PURE_WHITE"] = 0] = "HUD_COLOUR_PURE_WHITE";
-    HudColor[HudColor["HUD_COLOUR_WHITE"] = 1] = "HUD_COLOUR_WHITE";
-    HudColor[HudColor["HUD_COLOUR_BLACK"] = 2] = "HUD_COLOUR_BLACK";
-    HudColor[HudColor["HUD_COLOUR_GREY"] = 3] = "HUD_COLOUR_GREY";
-    HudColor[HudColor["HUD_COLOUR_GREYLIGHT"] = 4] = "HUD_COLOUR_GREYLIGHT";
-    HudColor[HudColor["HUD_COLOUR_GREYDARK"] = 5] = "HUD_COLOUR_GREYDARK";
-    HudColor[HudColor["HUD_COLOUR_RED"] = 6] = "HUD_COLOUR_RED";
-    HudColor[HudColor["HUD_COLOUR_REDLIGHT"] = 7] = "HUD_COLOUR_REDLIGHT";
-    HudColor[HudColor["HUD_COLOUR_REDDARK"] = 8] = "HUD_COLOUR_REDDARK";
-    HudColor[HudColor["HUD_COLOUR_BLUE"] = 9] = "HUD_COLOUR_BLUE";
-    HudColor[HudColor["HUD_COLOUR_BLUELIGHT"] = 10] = "HUD_COLOUR_BLUELIGHT";
-    HudColor[HudColor["HUD_COLOUR_BLUEDARK"] = 11] = "HUD_COLOUR_BLUEDARK";
-    HudColor[HudColor["HUD_COLOUR_YELLOW"] = 12] = "HUD_COLOUR_YELLOW";
-    HudColor[HudColor["HUD_COLOUR_YELLOWLIGHT"] = 13] = "HUD_COLOUR_YELLOWLIGHT";
-    HudColor[HudColor["HUD_COLOUR_YELLOWDARK"] = 14] = "HUD_COLOUR_YELLOWDARK";
-    HudColor[HudColor["HUD_COLOUR_ORANGE"] = 15] = "HUD_COLOUR_ORANGE";
-    HudColor[HudColor["HUD_COLOUR_ORANGELIGHT"] = 16] = "HUD_COLOUR_ORANGELIGHT";
-    HudColor[HudColor["HUD_COLOUR_ORANGEDARK"] = 17] = "HUD_COLOUR_ORANGEDARK";
-    HudColor[HudColor["HUD_COLOUR_GREEN"] = 18] = "HUD_COLOUR_GREEN";
-    HudColor[HudColor["HUD_COLOUR_GREENLIGHT"] = 19] = "HUD_COLOUR_GREENLIGHT";
-    HudColor[HudColor["HUD_COLOUR_GREENDARK"] = 20] = "HUD_COLOUR_GREENDARK";
-    HudColor[HudColor["HUD_COLOUR_PURPLE"] = 21] = "HUD_COLOUR_PURPLE";
-    HudColor[HudColor["HUD_COLOUR_PURPLELIGHT"] = 22] = "HUD_COLOUR_PURPLELIGHT";
-    HudColor[HudColor["HUD_COLOUR_PURPLEDARK"] = 23] = "HUD_COLOUR_PURPLEDARK";
-    HudColor[HudColor["HUD_COLOUR_PINK"] = 24] = "HUD_COLOUR_PINK";
-    HudColor[HudColor["HUD_COLOUR_RADAR_HEALTH"] = 25] = "HUD_COLOUR_RADAR_HEALTH";
-    HudColor[HudColor["HUD_COLOUR_RADAR_ARMOUR"] = 26] = "HUD_COLOUR_RADAR_ARMOUR";
-    HudColor[HudColor["HUD_COLOUR_RADAR_DAMAGE"] = 27] = "HUD_COLOUR_RADAR_DAMAGE";
-    HudColor[HudColor["HUD_COLOUR_NET_PLAYER1"] = 28] = "HUD_COLOUR_NET_PLAYER1";
-    HudColor[HudColor["HUD_COLOUR_NET_PLAYER2"] = 29] = "HUD_COLOUR_NET_PLAYER2";
-    HudColor[HudColor["HUD_COLOUR_NET_PLAYER3"] = 30] = "HUD_COLOUR_NET_PLAYER3";
-    HudColor[HudColor["HUD_COLOUR_NET_PLAYER4"] = 31] = "HUD_COLOUR_NET_PLAYER4";
-    HudColor[HudColor["HUD_COLOUR_NET_PLAYER5"] = 32] = "HUD_COLOUR_NET_PLAYER5";
-    HudColor[HudColor["HUD_COLOUR_NET_PLAYER6"] = 33] = "HUD_COLOUR_NET_PLAYER6";
-    HudColor[HudColor["HUD_COLOUR_NET_PLAYER7"] = 34] = "HUD_COLOUR_NET_PLAYER7";
-    HudColor[HudColor["HUD_COLOUR_NET_PLAYER8"] = 35] = "HUD_COLOUR_NET_PLAYER8";
-    HudColor[HudColor["HUD_COLOUR_NET_PLAYER9"] = 36] = "HUD_COLOUR_NET_PLAYER9";
-    HudColor[HudColor["HUD_COLOUR_NET_PLAYER10"] = 37] = "HUD_COLOUR_NET_PLAYER10";
-    HudColor[HudColor["HUD_COLOUR_NET_PLAYER11"] = 38] = "HUD_COLOUR_NET_PLAYER11";
-    HudColor[HudColor["HUD_COLOUR_NET_PLAYER12"] = 39] = "HUD_COLOUR_NET_PLAYER12";
-    HudColor[HudColor["HUD_COLOUR_NET_PLAYER13"] = 40] = "HUD_COLOUR_NET_PLAYER13";
-    HudColor[HudColor["HUD_COLOUR_NET_PLAYER14"] = 41] = "HUD_COLOUR_NET_PLAYER14";
-    HudColor[HudColor["HUD_COLOUR_NET_PLAYER15"] = 42] = "HUD_COLOUR_NET_PLAYER15";
-    HudColor[HudColor["HUD_COLOUR_NET_PLAYER16"] = 43] = "HUD_COLOUR_NET_PLAYER16";
-    HudColor[HudColor["HUD_COLOUR_NET_PLAYER17"] = 44] = "HUD_COLOUR_NET_PLAYER17";
-    HudColor[HudColor["HUD_COLOUR_NET_PLAYER18"] = 45] = "HUD_COLOUR_NET_PLAYER18";
-    HudColor[HudColor["HUD_COLOUR_NET_PLAYER19"] = 46] = "HUD_COLOUR_NET_PLAYER19";
-    HudColor[HudColor["HUD_COLOUR_NET_PLAYER20"] = 47] = "HUD_COLOUR_NET_PLAYER20";
-    HudColor[HudColor["HUD_COLOUR_NET_PLAYER21"] = 48] = "HUD_COLOUR_NET_PLAYER21";
-    HudColor[HudColor["HUD_COLOUR_NET_PLAYER22"] = 49] = "HUD_COLOUR_NET_PLAYER22";
-    HudColor[HudColor["HUD_COLOUR_NET_PLAYER23"] = 50] = "HUD_COLOUR_NET_PLAYER23";
-    HudColor[HudColor["HUD_COLOUR_NET_PLAYER24"] = 51] = "HUD_COLOUR_NET_PLAYER24";
-    HudColor[HudColor["HUD_COLOUR_NET_PLAYER25"] = 52] = "HUD_COLOUR_NET_PLAYER25";
-    HudColor[HudColor["HUD_COLOUR_NET_PLAYER26"] = 53] = "HUD_COLOUR_NET_PLAYER26";
-    HudColor[HudColor["HUD_COLOUR_NET_PLAYER27"] = 54] = "HUD_COLOUR_NET_PLAYER27";
-    HudColor[HudColor["HUD_COLOUR_NET_PLAYER28"] = 55] = "HUD_COLOUR_NET_PLAYER28";
-    HudColor[HudColor["HUD_COLOUR_NET_PLAYER29"] = 56] = "HUD_COLOUR_NET_PLAYER29";
-    HudColor[HudColor["HUD_COLOUR_NET_PLAYER30"] = 57] = "HUD_COLOUR_NET_PLAYER30";
-    HudColor[HudColor["HUD_COLOUR_NET_PLAYER31"] = 58] = "HUD_COLOUR_NET_PLAYER31";
-    HudColor[HudColor["HUD_COLOUR_NET_PLAYER32"] = 59] = "HUD_COLOUR_NET_PLAYER32";
-    HudColor[HudColor["HUD_COLOUR_SIMPLEBLIP_DEFAULT"] = 60] = "HUD_COLOUR_SIMPLEBLIP_DEFAULT";
-    HudColor[HudColor["HUD_COLOUR_MENU_BLUE"] = 61] = "HUD_COLOUR_MENU_BLUE";
-    HudColor[HudColor["HUD_COLOUR_MENU_GREY_LIGHT"] = 62] = "HUD_COLOUR_MENU_GREY_LIGHT";
-    HudColor[HudColor["HUD_COLOUR_MENU_BLUE_EXTRA_DARK"] = 63] = "HUD_COLOUR_MENU_BLUE_EXTRA_DARK";
-    HudColor[HudColor["HUD_COLOUR_MENU_YELLOW"] = 64] = "HUD_COLOUR_MENU_YELLOW";
-    HudColor[HudColor["HUD_COLOUR_MENU_YELLOW_DARK"] = 65] = "HUD_COLOUR_MENU_YELLOW_DARK";
-    HudColor[HudColor["HUD_COLOUR_MENU_GREEN"] = 66] = "HUD_COLOUR_MENU_GREEN";
-    HudColor[HudColor["HUD_COLOUR_MENU_GREY"] = 67] = "HUD_COLOUR_MENU_GREY";
-    HudColor[HudColor["HUD_COLOUR_MENU_GREY_DARK"] = 68] = "HUD_COLOUR_MENU_GREY_DARK";
-    HudColor[HudColor["HUD_COLOUR_MENU_HIGHLIGHT"] = 69] = "HUD_COLOUR_MENU_HIGHLIGHT";
-    HudColor[HudColor["HUD_COLOUR_MENU_STANDARD"] = 70] = "HUD_COLOUR_MENU_STANDARD";
-    HudColor[HudColor["HUD_COLOUR_MENU_DIMMED"] = 71] = "HUD_COLOUR_MENU_DIMMED";
-    HudColor[HudColor["HUD_COLOUR_MENU_EXTRA_DIMMED"] = 72] = "HUD_COLOUR_MENU_EXTRA_DIMMED";
-    HudColor[HudColor["HUD_COLOUR_BRIEF_TITLE"] = 73] = "HUD_COLOUR_BRIEF_TITLE";
-    HudColor[HudColor["HUD_COLOUR_MID_GREY_MP"] = 74] = "HUD_COLOUR_MID_GREY_MP";
-    HudColor[HudColor["HUD_COLOUR_NET_PLAYER1_DARK"] = 75] = "HUD_COLOUR_NET_PLAYER1_DARK";
-    HudColor[HudColor["HUD_COLOUR_NET_PLAYER2_DARK"] = 76] = "HUD_COLOUR_NET_PLAYER2_DARK";
-    HudColor[HudColor["HUD_COLOUR_NET_PLAYER3_DARK"] = 77] = "HUD_COLOUR_NET_PLAYER3_DARK";
-    HudColor[HudColor["HUD_COLOUR_NET_PLAYER4_DARK"] = 78] = "HUD_COLOUR_NET_PLAYER4_DARK";
-    HudColor[HudColor["HUD_COLOUR_NET_PLAYER5_DARK"] = 79] = "HUD_COLOUR_NET_PLAYER5_DARK";
-    HudColor[HudColor["HUD_COLOUR_NET_PLAYER6_DARK"] = 80] = "HUD_COLOUR_NET_PLAYER6_DARK";
-    HudColor[HudColor["HUD_COLOUR_NET_PLAYER7_DARK"] = 81] = "HUD_COLOUR_NET_PLAYER7_DARK";
-    HudColor[HudColor["HUD_COLOUR_NET_PLAYER8_DARK"] = 82] = "HUD_COLOUR_NET_PLAYER8_DARK";
-    HudColor[HudColor["HUD_COLOUR_NET_PLAYER9_DARK"] = 83] = "HUD_COLOUR_NET_PLAYER9_DARK";
-    HudColor[HudColor["HUD_COLOUR_NET_PLAYER10_DARK"] = 84] = "HUD_COLOUR_NET_PLAYER10_DARK";
-    HudColor[HudColor["HUD_COLOUR_NET_PLAYER11_DARK"] = 85] = "HUD_COLOUR_NET_PLAYER11_DARK";
-    HudColor[HudColor["HUD_COLOUR_NET_PLAYER12_DARK"] = 86] = "HUD_COLOUR_NET_PLAYER12_DARK";
-    HudColor[HudColor["HUD_COLOUR_NET_PLAYER13_DARK"] = 87] = "HUD_COLOUR_NET_PLAYER13_DARK";
-    HudColor[HudColor["HUD_COLOUR_NET_PLAYER14_DARK"] = 88] = "HUD_COLOUR_NET_PLAYER14_DARK";
-    HudColor[HudColor["HUD_COLOUR_NET_PLAYER15_DARK"] = 89] = "HUD_COLOUR_NET_PLAYER15_DARK";
-    HudColor[HudColor["HUD_COLOUR_NET_PLAYER16_DARK"] = 90] = "HUD_COLOUR_NET_PLAYER16_DARK";
-    HudColor[HudColor["HUD_COLOUR_NET_PLAYER17_DARK"] = 91] = "HUD_COLOUR_NET_PLAYER17_DARK";
-    HudColor[HudColor["HUD_COLOUR_NET_PLAYER18_DARK"] = 92] = "HUD_COLOUR_NET_PLAYER18_DARK";
-    HudColor[HudColor["HUD_COLOUR_NET_PLAYER19_DARK"] = 93] = "HUD_COLOUR_NET_PLAYER19_DARK";
-    HudColor[HudColor["HUD_COLOUR_NET_PLAYER20_DARK"] = 94] = "HUD_COLOUR_NET_PLAYER20_DARK";
-    HudColor[HudColor["HUD_COLOUR_NET_PLAYER21_DARK"] = 95] = "HUD_COLOUR_NET_PLAYER21_DARK";
-    HudColor[HudColor["HUD_COLOUR_NET_PLAYER22_DARK"] = 96] = "HUD_COLOUR_NET_PLAYER22_DARK";
-    HudColor[HudColor["HUD_COLOUR_NET_PLAYER23_DARK"] = 97] = "HUD_COLOUR_NET_PLAYER23_DARK";
-    HudColor[HudColor["HUD_COLOUR_NET_PLAYER24_DARK"] = 98] = "HUD_COLOUR_NET_PLAYER24_DARK";
-    HudColor[HudColor["HUD_COLOUR_NET_PLAYER25_DARK"] = 99] = "HUD_COLOUR_NET_PLAYER25_DARK";
-    HudColor[HudColor["HUD_COLOUR_NET_PLAYER26_DARK"] = 100] = "HUD_COLOUR_NET_PLAYER26_DARK";
-    HudColor[HudColor["HUD_COLOUR_NET_PLAYER27_DARK"] = 101] = "HUD_COLOUR_NET_PLAYER27_DARK";
-    HudColor[HudColor["HUD_COLOUR_NET_PLAYER28_DARK"] = 102] = "HUD_COLOUR_NET_PLAYER28_DARK";
-    HudColor[HudColor["HUD_COLOUR_NET_PLAYER29_DARK"] = 103] = "HUD_COLOUR_NET_PLAYER29_DARK";
-    HudColor[HudColor["HUD_COLOUR_NET_PLAYER30_DARK"] = 104] = "HUD_COLOUR_NET_PLAYER30_DARK";
-    HudColor[HudColor["HUD_COLOUR_NET_PLAYER31_DARK"] = 105] = "HUD_COLOUR_NET_PLAYER31_DARK";
-    HudColor[HudColor["HUD_COLOUR_NET_PLAYER32_DARK"] = 106] = "HUD_COLOUR_NET_PLAYER32_DARK";
-    HudColor[HudColor["HUD_COLOUR_BRONZE"] = 107] = "HUD_COLOUR_BRONZE";
-    HudColor[HudColor["HUD_COLOUR_SILVER"] = 108] = "HUD_COLOUR_SILVER";
-    HudColor[HudColor["HUD_COLOUR_GOLD"] = 109] = "HUD_COLOUR_GOLD";
-    HudColor[HudColor["HUD_COLOUR_PLATINUM"] = 110] = "HUD_COLOUR_PLATINUM";
-    HudColor[HudColor["HUD_COLOUR_GANG1"] = 111] = "HUD_COLOUR_GANG1";
-    HudColor[HudColor["HUD_COLOUR_GANG2"] = 112] = "HUD_COLOUR_GANG2";
-    HudColor[HudColor["HUD_COLOUR_GANG3"] = 113] = "HUD_COLOUR_GANG3";
-    HudColor[HudColor["HUD_COLOUR_GANG4"] = 114] = "HUD_COLOUR_GANG4";
-    HudColor[HudColor["HUD_COLOUR_SAME_CREW"] = 115] = "HUD_COLOUR_SAME_CREW";
-    HudColor[HudColor["HUD_COLOUR_FREEMODE"] = 116] = "HUD_COLOUR_FREEMODE";
-    HudColor[HudColor["HUD_COLOUR_PAUSE_BG"] = 117] = "HUD_COLOUR_PAUSE_BG";
-    HudColor[HudColor["HUD_COLOUR_FRIENDLY"] = 118] = "HUD_COLOUR_FRIENDLY";
-    HudColor[HudColor["HUD_COLOUR_ENEMY"] = 119] = "HUD_COLOUR_ENEMY";
-    HudColor[HudColor["HUD_COLOUR_LOCATION"] = 120] = "HUD_COLOUR_LOCATION";
-    HudColor[HudColor["HUD_COLOUR_PICKUP"] = 121] = "HUD_COLOUR_PICKUP";
-    HudColor[HudColor["HUD_COLOUR_PAUSE_SINGLEPLAYER"] = 122] = "HUD_COLOUR_PAUSE_SINGLEPLAYER";
-    HudColor[HudColor["HUD_COLOUR_FREEMODE_DARK"] = 123] = "HUD_COLOUR_FREEMODE_DARK";
-    HudColor[HudColor["HUD_COLOUR_INACTIVE_MISSION"] = 124] = "HUD_COLOUR_INACTIVE_MISSION";
-    HudColor[HudColor["HUD_COLOUR_DAMAGE"] = 125] = "HUD_COLOUR_DAMAGE";
-    HudColor[HudColor["HUD_COLOUR_PINKLIGHT"] = 126] = "HUD_COLOUR_PINKLIGHT";
-    HudColor[HudColor["HUD_COLOUR_PM_MITEM_HIGHLIGHT"] = 127] = "HUD_COLOUR_PM_MITEM_HIGHLIGHT";
-    HudColor[HudColor["HUD_COLOUR_SCRIPT_VARIABLE"] = 128] = "HUD_COLOUR_SCRIPT_VARIABLE";
-    HudColor[HudColor["HUD_COLOUR_YOGA"] = 129] = "HUD_COLOUR_YOGA";
-    HudColor[HudColor["HUD_COLOUR_TENNIS"] = 130] = "HUD_COLOUR_TENNIS";
-    HudColor[HudColor["HUD_COLOUR_GOLF"] = 131] = "HUD_COLOUR_GOLF";
-    HudColor[HudColor["HUD_COLOUR_SHOOTING_RANGE"] = 132] = "HUD_COLOUR_SHOOTING_RANGE";
-    HudColor[HudColor["HUD_COLOUR_FLIGHT_SCHOOL"] = 133] = "HUD_COLOUR_FLIGHT_SCHOOL";
-    HudColor[HudColor["HUD_COLOUR_NORTH_BLUE"] = 134] = "HUD_COLOUR_NORTH_BLUE";
-    HudColor[HudColor["HUD_COLOUR_SOCIAL_CLUB"] = 135] = "HUD_COLOUR_SOCIAL_CLUB";
-    HudColor[HudColor["HUD_COLOUR_PLATFORM_BLUE"] = 136] = "HUD_COLOUR_PLATFORM_BLUE";
-    HudColor[HudColor["HUD_COLOUR_PLATFORM_GREEN"] = 137] = "HUD_COLOUR_PLATFORM_GREEN";
-    HudColor[HudColor["HUD_COLOUR_PLATFORM_GREY"] = 138] = "HUD_COLOUR_PLATFORM_GREY";
-    HudColor[HudColor["HUD_COLOUR_FACEBOOK_BLUE"] = 139] = "HUD_COLOUR_FACEBOOK_BLUE";
-    HudColor[HudColor["HUD_COLOUR_INGAME_BG"] = 140] = "HUD_COLOUR_INGAME_BG";
-    HudColor[HudColor["HUD_COLOUR_DARTS"] = 141] = "HUD_COLOUR_DARTS";
-    HudColor[HudColor["HUD_COLOUR_WAYPOINT"] = 142] = "HUD_COLOUR_WAYPOINT";
-    HudColor[HudColor["HUD_COLOUR_MICHAEL"] = 143] = "HUD_COLOUR_MICHAEL";
-    HudColor[HudColor["HUD_COLOUR_FRANKLIN"] = 144] = "HUD_COLOUR_FRANKLIN";
-    HudColor[HudColor["HUD_COLOUR_TREVOR"] = 145] = "HUD_COLOUR_TREVOR";
-    HudColor[HudColor["HUD_COLOUR_GOLF_P1"] = 146] = "HUD_COLOUR_GOLF_P1";
-    HudColor[HudColor["HUD_COLOUR_GOLF_P2"] = 147] = "HUD_COLOUR_GOLF_P2";
-    HudColor[HudColor["HUD_COLOUR_GOLF_P3"] = 148] = "HUD_COLOUR_GOLF_P3";
-    HudColor[HudColor["HUD_COLOUR_GOLF_P4"] = 149] = "HUD_COLOUR_GOLF_P4";
-    HudColor[HudColor["HUD_COLOUR_WAYPOINTLIGHT"] = 150] = "HUD_COLOUR_WAYPOINTLIGHT";
-    HudColor[HudColor["HUD_COLOUR_WAYPOINTDARK"] = 151] = "HUD_COLOUR_WAYPOINTDARK";
-    HudColor[HudColor["HUD_COLOUR_PANEL_LIGHT"] = 152] = "HUD_COLOUR_PANEL_LIGHT";
-    HudColor[HudColor["HUD_COLOUR_MICHAEL_DARK"] = 153] = "HUD_COLOUR_MICHAEL_DARK";
-    HudColor[HudColor["HUD_COLOUR_FRANKLIN_DARK"] = 154] = "HUD_COLOUR_FRANKLIN_DARK";
-    HudColor[HudColor["HUD_COLOUR_TREVOR_DARK"] = 155] = "HUD_COLOUR_TREVOR_DARK";
-    HudColor[HudColor["HUD_COLOUR_OBJECTIVE_ROUTE"] = 156] = "HUD_COLOUR_OBJECTIVE_ROUTE";
-    HudColor[HudColor["HUD_COLOUR_PAUSEMAP_TINT"] = 157] = "HUD_COLOUR_PAUSEMAP_TINT";
-    HudColor[HudColor["HUD_COLOUR_PAUSE_DESELECT"] = 158] = "HUD_COLOUR_PAUSE_DESELECT";
-    HudColor[HudColor["HUD_COLOUR_PM_WEAPONS_PURCHASABLE"] = 159] = "HUD_COLOUR_PM_WEAPONS_PURCHASABLE";
-    HudColor[HudColor["HUD_COLOUR_PM_WEAPONS_LOCKED"] = 160] = "HUD_COLOUR_PM_WEAPONS_LOCKED";
-    HudColor[HudColor["HUD_COLOUR_END_SCREEN_BG"] = 161] = "HUD_COLOUR_END_SCREEN_BG";
-    HudColor[HudColor["HUD_COLOUR_CHOP"] = 162] = "HUD_COLOUR_CHOP";
-    HudColor[HudColor["HUD_COLOUR_PAUSEMAP_TINT_HALF"] = 163] = "HUD_COLOUR_PAUSEMAP_TINT_HALF";
-    HudColor[HudColor["HUD_COLOUR_NORTH_BLUE_OFFICIAL"] = 164] = "HUD_COLOUR_NORTH_BLUE_OFFICIAL";
-    HudColor[HudColor["HUD_COLOUR_SCRIPT_VARIABLE_2"] = 165] = "HUD_COLOUR_SCRIPT_VARIABLE_2";
-    HudColor[HudColor["HUD_COLOUR_H"] = 166] = "HUD_COLOUR_H";
-    HudColor[HudColor["HUD_COLOUR_HDARK"] = 167] = "HUD_COLOUR_HDARK";
-    HudColor[HudColor["HUD_COLOUR_T"] = 168] = "HUD_COLOUR_T";
-    HudColor[HudColor["HUD_COLOUR_TDARK"] = 169] = "HUD_COLOUR_TDARK";
-    HudColor[HudColor["HUD_COLOUR_HSHARD"] = 170] = "HUD_COLOUR_HSHARD";
-    HudColor[HudColor["HUD_COLOUR_CONTROLLER_MICHAEL"] = 171] = "HUD_COLOUR_CONTROLLER_MICHAEL";
-    HudColor[HudColor["HUD_COLOUR_CONTROLLER_FRANKLIN"] = 172] = "HUD_COLOUR_CONTROLLER_FRANKLIN";
-    HudColor[HudColor["HUD_COLOUR_CONTROLLER_TREVOR"] = 173] = "HUD_COLOUR_CONTROLLER_TREVOR";
-    HudColor[HudColor["HUD_COLOUR_CONTROLLER_CHOP"] = 174] = "HUD_COLOUR_CONTROLLER_CHOP";
-    HudColor[HudColor["HUD_COLOUR_VIDEO_EDITOR_VIDEO"] = 175] = "HUD_COLOUR_VIDEO_EDITOR_VIDEO";
-    HudColor[HudColor["HUD_COLOUR_VIDEO_EDITOR_AUDIO"] = 176] = "HUD_COLOUR_VIDEO_EDITOR_AUDIO";
-    HudColor[HudColor["HUD_COLOUR_VIDEO_EDITOR_TEXT"] = 177] = "HUD_COLOUR_VIDEO_EDITOR_TEXT";
-    HudColor[HudColor["HUD_COLOUR_HB_BLUE"] = 178] = "HUD_COLOUR_HB_BLUE";
-    HudColor[HudColor["HUD_COLOUR_HB_YELLOW"] = 179] = "HUD_COLOUR_HB_YELLOW";
-})(HudColor || (HudColor = {}));
-export default HudColor;
diff --git a/node_modules/@durtyfree/altv-nativeui/examples/nativeUI-example/includes/NativeUI/items/UIMenuAutoListItem.js b/node_modules/@durtyfree/altv-nativeui/examples/nativeUI-example/includes/NativeUI/items/UIMenuAutoListItem.js
deleted file mode 100644
index c2181a5..0000000
--- a/node_modules/@durtyfree/altv-nativeui/examples/nativeUI-example/includes/NativeUI/items/UIMenuAutoListItem.js
+++ /dev/null
@@ -1,139 +0,0 @@
-import Font from "../enums/Font";
-import Alignment from "../enums/Alignment";
-import ResText from "../modules/ResText";
-import Sprite from "../modules/Sprite";
-import Color from "../utils/Color";
-import Point from "../utils/Point";
-import Size from "../utils/Size";
-import Screen from "../utils/Screen";
-import UIMenuItem from "./UIMenuItem";
-export default class UIMenuAutoListItem extends UIMenuItem {
-    constructor(text, description = "", lowerThreshold = 0, upperThreshold = 10, startValue = 0, data = null) {
-        super(text, description, data);
-        this._currentOffset = 0;
-        this._leftMoveThreshold = 1;
-        this._rightMoveThreshold = 1;
-        this._lowerThreshold = 0;
-        this._upperThreshold = 10;
-        this._preCaptionText = '';
-        this._postCaptionText = '';
-        let y = 0;
-        this.LowerThreshold = lowerThreshold;
-        this.UpperThreshold = lowerThreshold > upperThreshold ? lowerThreshold : upperThreshold;
-        this.SelectedValue = (startValue < lowerThreshold || startValue > upperThreshold) ? lowerThreshold : startValue;
-        this._arrowLeft = new Sprite("commonmenu", "arrowleft", new Point(110, 105 + y), new Size(30, 30));
-        this._arrowRight = new Sprite("commonmenu", "arrowright", new Point(280, 105 + y), new Size(30, 30));
-        this._itemText = new ResText("", new Point(290, y + 104), 0.35, Color.White, Font.ChaletLondon, Alignment.Right);
-    }
-    get PreCaptionText() {
-        return this._preCaptionText;
-    }
-    set PreCaptionText(text) {
-        if (!text)
-            throw new Error("The pre caption text can't be null");
-        if (typeof text !== 'string')
-            throw new Error("The pre caption text must be a string");
-        this._preCaptionText = text;
-        this._currentOffset = Screen.GetTextWidth(this.PreCaptionText + this._selectedValue.toString() + this.PostCaptionText, this._itemText && this._itemText.Font ? this._itemText.Font : 0, 0.35);
-    }
-    get PostCaptionText() {
-        return this._postCaptionText;
-    }
-    set PostCaptionText(text) {
-        if (!text)
-            throw new Error("The post caption text can't be null");
-        if (typeof text !== 'string')
-            throw new Error("The post caption text must be a string");
-        this._postCaptionText = text;
-        this._currentOffset = Screen.GetTextWidth(this.PreCaptionText + this._selectedValue.toString() + this.PostCaptionText, this._itemText && this._itemText.Font ? this._itemText.Font : 0, 0.35);
-    }
-    get LeftMoveThreshold() {
-        return this._leftMoveThreshold;
-    }
-    set LeftMoveThreshold(value) {
-        if (!value)
-            throw new Error("The left threshold can't be null");
-        this._leftMoveThreshold = value;
-    }
-    get RightMoveThreshold() {
-        return this._rightMoveThreshold;
-    }
-    set RightMoveThreshold(value) {
-        if (!value)
-            throw new Error("The right threshold can't be null");
-        this._rightMoveThreshold = value;
-    }
-    get LowerThreshold() {
-        return this._lowerThreshold;
-    }
-    set LowerThreshold(value) {
-        if (typeof value !== 'number' && !value)
-            throw new Error("The lower threshold can't be null");
-        this._lowerThreshold = value;
-        if (this.SelectedValue < value) {
-            this.SelectedValue = value;
-        }
-    }
-    get UpperThreshold() {
-        return this._upperThreshold;
-    }
-    set UpperThreshold(value) {
-        if (typeof value !== 'number' && !value)
-            throw new Error("The upper threshold can't be null");
-        this._upperThreshold = value;
-        if (this.SelectedValue > value) {
-            this.SelectedValue = value;
-        }
-    }
-    get SelectedValue() {
-        return this._selectedValue;
-    }
-    set SelectedValue(value) {
-        if (value < this._lowerThreshold || value > this._upperThreshold)
-            throw new Error("The value can not be outside the lower or upper limits");
-        this._selectedValue = value;
-        this._currentOffset = Screen.GetTextWidth(this.PreCaptionText + this._selectedValue.toString() + this.PostCaptionText, this._itemText && this._itemText.Font ? this._itemText.Font : 0, this._itemText && this._itemText.Scale ? this._itemText.Scale : 0.35);
-    }
-    SetVerticalPosition(y) {
-        this._arrowLeft.Pos = new Point(300 + this.Offset.X + this.Parent.WidthOffset, 147 + y + this.Offset.Y);
-        this._arrowRight.Pos = new Point(400 + this.Offset.X + this.Parent.WidthOffset, 147 + y + this.Offset.Y);
-        this._itemText.Pos = new Point(300 + this.Offset.X + this.Parent.WidthOffset, y + 147 + this.Offset.Y);
-        super.SetVerticalPosition(y);
-    }
-    SetRightLabel(text) {
-        return this;
-    }
-    SetRightBadge(badge) {
-        return this;
-    }
-    Draw() {
-        super.Draw();
-        const offset = this._currentOffset;
-        this._itemText.Color = this.Enabled
-            ? this.Selected
-                ? this.HighlightedForeColor
-                : this.ForeColor
-            : new Color(163, 159, 148);
-        this._itemText.Caption = this.PreCaptionText + this._selectedValue + this.PostCaptionText;
-        this._arrowLeft.Color = this.Enabled
-            ? this.Selected
-                ? this.HighlightedForeColor
-                : this.ForeColor
-            : new Color(163, 159, 148);
-        this._arrowRight.Color = this.Enabled
-            ? this.Selected
-                ? this.HighlightedForeColor
-                : this.ForeColor
-            : new Color(163, 159, 148);
-        this._arrowLeft.Pos = new Point(380 - offset + this.Offset.X + this.Parent.WidthOffset, this._arrowLeft.Pos.Y);
-        if (this.Selected) {
-            this._arrowLeft.Draw();
-            this._arrowRight.Draw();
-            this._itemText.Pos = new Point(405 + this.Offset.X + this.Parent.WidthOffset, this._itemText.Pos.Y);
-        }
-        else {
-            this._itemText.Pos = new Point(420 + this.Offset.X + this.Parent.WidthOffset, this._itemText.Pos.Y);
-        }
-        this._itemText.Draw();
-    }
-}
diff --git a/node_modules/@durtyfree/altv-nativeui/examples/nativeUI-example/includes/NativeUI/items/UIMenuAutoListItem.ts b/node_modules/@durtyfree/altv-nativeui/examples/nativeUI-example/includes/NativeUI/items/UIMenuAutoListItem.ts
deleted file mode 100644
index 606dd94..0000000
--- a/node_modules/@durtyfree/altv-nativeui/examples/nativeUI-example/includes/NativeUI/items/UIMenuAutoListItem.ts
+++ /dev/null
@@ -1,159 +0,0 @@
-import BadgeStyle from "../enums/BadgeStyle";
-import Font from "../enums/Font";
-import Alignment from "../enums/Alignment";
-import ResText from "../modules/ResText";
-import Sprite from "../modules/Sprite";
-import Color from "../utils/Color";
-import Point from "../utils/Point";
-import Size from "../utils/Size";
-import Screen from "../utils/Screen";
-import UIMenuItem from "./UIMenuItem";
-
-export default class UIMenuAutoListItem extends UIMenuItem {
-    protected _itemText: ResText;
-    protected _arrowLeft: Sprite;
-    protected _arrowRight: Sprite;
-
-    private _currentOffset: number = 0;
-    private _leftMoveThreshold: number = 1;
-    private _rightMoveThreshold: number = 1;
-    private _lowerThreshold: number = 0;
-    private _upperThreshold: number = 10;
-    private _preCaptionText: string = '';
-    private _postCaptionText: string = '';
-    private _selectedValue: number;
-    
-    public get PreCaptionText() {
-        return this._preCaptionText;
-    }
-    public set PreCaptionText(text: string) {
-        if (!text) throw new Error("The pre caption text can't be null");
-        if (typeof text !== 'string') throw new Error("The pre caption text must be a string");
-        this._preCaptionText = text;
-        this._currentOffset = Screen.GetTextWidth(this.PreCaptionText + this._selectedValue.toString() + this.PostCaptionText, this._itemText && this._itemText.Font ? this._itemText.Font : 0, 0.35); // this._itemText && this._itemText.scale ? this._itemText.scale : 0.35
-    }
-
-    public get PostCaptionText() {
-        return this._postCaptionText;
-    }
-    public set PostCaptionText(text: string) {
-        if (!text) throw new Error("The post caption text can't be null");
-        if (typeof text !== 'string') throw new Error("The post caption text must be a string");
-        this._postCaptionText = text;
-        this._currentOffset = Screen.GetTextWidth(this.PreCaptionText + this._selectedValue.toString() + this.PostCaptionText, this._itemText && this._itemText.Font ? this._itemText.Font : 0, 0.35); // this._itemText && this._itemText.scale ? this._itemText.scale : 0.35
-    }
-
-    public get LeftMoveThreshold() {
-        return this._leftMoveThreshold;
-    }
-    public set LeftMoveThreshold(value: number) {
-        if (!value) throw new Error("The left threshold can't be null");
-
-        this._leftMoveThreshold = value;
-    }
-
-    public get RightMoveThreshold() {
-        return this._rightMoveThreshold;
-    }
-    public set RightMoveThreshold(value: number) {
-        if (!value) throw new Error("The right threshold can't be null");
-
-        this._rightMoveThreshold = value;
-    }
-
-    public get LowerThreshold() {
-        return this._lowerThreshold;
-    }
-    public set LowerThreshold(value: number) {
-        if (typeof value !== 'number' && !value) throw new Error("The lower threshold can't be null");
-
-        this._lowerThreshold = value;
-        if (this.SelectedValue < value) {
-            this.SelectedValue = value;
-        }
-    }
-
-    public get UpperThreshold() {
-        return this._upperThreshold;
-    }
-    public set UpperThreshold(value: number) {
-        if (typeof value !== 'number' && !value) throw new Error("The upper threshold can't be null");
-
-        this._upperThreshold = value;
-        if (this.SelectedValue > value) {
-            this.SelectedValue = value;
-        }
-    }
-
-    public get SelectedValue() {
-        return this._selectedValue;
-    }
-    public set SelectedValue(value: number) {
-        if (value < this._lowerThreshold || value > this._upperThreshold) throw new Error("The value can not be outside the lower or upper limits");
-
-        this._selectedValue = value;
-        this._currentOffset = Screen.GetTextWidth(this.PreCaptionText + this._selectedValue.toString() + this.PostCaptionText, this._itemText && this._itemText.Font ? this._itemText.Font : 0, this._itemText && this._itemText.Scale ? this._itemText.Scale : 0.35);
-    }
-
-    constructor(text: string, description: string = "", lowerThreshold: number = 0, upperThreshold: number = 10, startValue: number = 0, data: any = null) {
-        super(text, description, data);
-
-        let y = 0;
-        this.LowerThreshold = lowerThreshold;
-        this.UpperThreshold = lowerThreshold > upperThreshold ? lowerThreshold : upperThreshold;
-        this.SelectedValue = (startValue < lowerThreshold || startValue > upperThreshold) ? lowerThreshold : startValue;
-        this._arrowLeft = new Sprite("commonmenu", "arrowleft", new Point(110, 105 + y), new Size(30, 30));
-        this._arrowRight = new Sprite("commonmenu", "arrowright", new Point(280, 105 + y), new Size(30, 30));
-        this._itemText = new ResText("", new Point(290, y + 104), 0.35, Color.White, Font.ChaletLondon, Alignment.Right);
-    }
-
-    public SetVerticalPosition(y: number) {
-        this._arrowLeft.Pos = new Point(300 + this.Offset.X + this.Parent.WidthOffset, 147 + y + this.Offset.Y);
-        this._arrowRight.Pos = new Point(400 + this.Offset.X + this.Parent.WidthOffset, 147 + y + this.Offset.Y);
-        this._itemText.Pos = new Point(300 + this.Offset.X + this.Parent.WidthOffset, y + 147 + this.Offset.Y);
-        super.SetVerticalPosition(y);
-    }
-
-    public SetRightLabel(text: string) {
-        return this;
-    }
-
-    public SetRightBadge(badge: BadgeStyle) {
-        return this;
-    }
-
-    public Draw() {
-        super.Draw();
-        const offset = this._currentOffset;
-
-        this._itemText.Color = this.Enabled
-            ? this.Selected
-                ? this.HighlightedForeColor
-                : this.ForeColor
-            : new Color(163, 159, 148);
-
-        this._itemText.Caption = this.PreCaptionText + this._selectedValue + this.PostCaptionText;
-
-        this._arrowLeft.Color = this.Enabled
-            ? this.Selected
-                ? this.HighlightedForeColor
-                : this.ForeColor
-            : new Color(163, 159, 148);
-        this._arrowRight.Color = this.Enabled
-            ? this.Selected
-                ? this.HighlightedForeColor
-                : this.ForeColor
-            : new Color(163, 159, 148);
-
-        this._arrowLeft.Pos = new Point(380 - offset + this.Offset.X + this.Parent.WidthOffset, this._arrowLeft.Pos.Y);
-
-        if (this.Selected) {
-            this._arrowLeft.Draw();
-            this._arrowRight.Draw();
-            this._itemText.Pos = new Point(405 + this.Offset.X + this.Parent.WidthOffset, this._itemText.Pos.Y);
-        } else {
-            this._itemText.Pos = new Point(420 + this.Offset.X + this.Parent.WidthOffset, this._itemText.Pos.Y);
-        }
-        this._itemText.Draw();
-    }
-}
\ No newline at end of file
diff --git a/node_modules/@durtyfree/altv-nativeui/examples/nativeUI-example/includes/NativeUI/items/UIMenuCheckboxItem.js b/node_modules/@durtyfree/altv-nativeui/examples/nativeUI-example/includes/NativeUI/items/UIMenuCheckboxItem.js
deleted file mode 100644
index eb895b7..0000000
--- a/node_modules/@durtyfree/altv-nativeui/examples/nativeUI-example/includes/NativeUI/items/UIMenuCheckboxItem.js
+++ /dev/null
@@ -1,45 +0,0 @@
-import Sprite from "../modules/Sprite";
-import Color from "../utils/Color";
-import Point from "../utils/Point";
-import Size from "../utils/Size";
-import UIMenuItem from "./UIMenuItem";
-export default class UIMenuCheckboxItem extends UIMenuItem {
-    constructor(text, check = false, description = "") {
-        super(text, description);
-        this.Checked = false;
-        const y = 0;
-        this._checkedSprite = new Sprite("commonmenu", "shop_box_blank", new Point(410, y + 95), new Size(50, 50));
-        this.Checked = check;
-    }
-    SetVerticalPosition(y) {
-        super.SetVerticalPosition(y);
-        this._checkedSprite.Pos = new Point(380 + this.Offset.X + this.Parent.WidthOffset, y + 138 + this.Offset.Y);
-    }
-    Draw() {
-        super.Draw();
-        this._checkedSprite.Pos = this._checkedSprite.Pos = new Point(380 + this.Offset.X + this.Parent.WidthOffset, this._checkedSprite.Pos.Y);
-        const isDefaultHightlitedForeColor = this.HighlightedForeColor == UIMenuItem.DefaultHighlightedForeColor;
-        if (this.Selected && isDefaultHightlitedForeColor) {
-            this._checkedSprite.TextureName = this.Checked
-                ? "shop_box_tickb"
-                : "shop_box_blankb";
-        }
-        else {
-            this._checkedSprite.TextureName = this.Checked
-                ? "shop_box_tick"
-                : "shop_box_blank";
-        }
-        this._checkedSprite.Color = this.Enabled
-            ? this.Selected && !isDefaultHightlitedForeColor
-                ? this.HighlightedForeColor
-                : this.ForeColor
-            : new Color(163, 159, 148);
-        this._checkedSprite.Draw();
-    }
-    SetRightBadge(badge) {
-        return this;
-    }
-    SetRightLabel(text) {
-        return this;
-    }
-}
diff --git a/node_modules/@durtyfree/altv-nativeui/examples/nativeUI-example/includes/NativeUI/items/UIMenuCheckboxItem.ts b/node_modules/@durtyfree/altv-nativeui/examples/nativeUI-example/includes/NativeUI/items/UIMenuCheckboxItem.ts
deleted file mode 100644
index 3723346..0000000
--- a/node_modules/@durtyfree/altv-nativeui/examples/nativeUI-example/includes/NativeUI/items/UIMenuCheckboxItem.ts
+++ /dev/null
@@ -1,57 +0,0 @@
-import BadgeStyle from "../enums/BadgeStyle";
-import Sprite from "../modules/Sprite";
-import Color from "../utils/Color";
-import Point from "../utils/Point";
-import Size from "../utils/Size";
-import UIMenuItem from "./UIMenuItem";
-
-export default class UIMenuCheckboxItem extends UIMenuItem {
-    private readonly _checkedSprite: Sprite;
-
-    public Checked: boolean = false;
-
-    constructor(text: string, check: boolean = false, description: string = "") {
-        super(text, description);
-
-        const y = 0;
-        this._checkedSprite = new Sprite("commonmenu", "shop_box_blank", new Point(410, y + 95), new Size(50, 50));
-        this.Checked = check;
-    }
-
-    public SetVerticalPosition(y: number) {
-        super.SetVerticalPosition(y);
-        this._checkedSprite.Pos = new Point(380 + this.Offset.X + this.Parent.WidthOffset, y + 138 + this.Offset.Y);
-    }
-
-    public Draw() {
-        super.Draw();
-
-        this._checkedSprite.Pos = this._checkedSprite.Pos = new Point(380 + this.Offset.X + this.Parent.WidthOffset, this._checkedSprite.Pos.Y);
-        const isDefaultHightlitedForeColor = this.HighlightedForeColor == UIMenuItem.DefaultHighlightedForeColor;
-
-        if (this.Selected && isDefaultHightlitedForeColor) {
-            this._checkedSprite.TextureName = this.Checked
-                ? "shop_box_tickb"
-                : "shop_box_blankb";
-        } else {
-            this._checkedSprite.TextureName = this.Checked
-                ? "shop_box_tick"
-                : "shop_box_blank";
-        }
-
-        this._checkedSprite.Color = this.Enabled
-            ? this.Selected && !isDefaultHightlitedForeColor
-                ? this.HighlightedForeColor
-                : this.ForeColor
-            : new Color(163, 159, 148);
-        this._checkedSprite.Draw();
-    }
-
-    public SetRightBadge(badge: BadgeStyle) {
-        return this;
-    }
-
-    public SetRightLabel(text: string) {
-        return this;
-    }
-}
diff --git a/node_modules/@durtyfree/altv-nativeui/examples/nativeUI-example/includes/NativeUI/items/UIMenuDynamicListItem.js b/node_modules/@durtyfree/altv-nativeui/examples/nativeUI-example/includes/NativeUI/items/UIMenuDynamicListItem.js
deleted file mode 100644
index 8ba009d..0000000
--- a/node_modules/@durtyfree/altv-nativeui/examples/nativeUI-example/includes/NativeUI/items/UIMenuDynamicListItem.js
+++ /dev/null
@@ -1,110 +0,0 @@
-import * as alt from 'alt-client';
-import Font from "../enums/Font";
-import Alignment from "../enums/Alignment";
-import ResText from "../modules/ResText";
-import Sprite from "../modules/Sprite";
-import Color from "../utils/Color";
-import Point from "../utils/Point";
-import Size from "../utils/Size";
-import Screen from "../utils/Screen";
-import UIMenuItem from "./UIMenuItem";
-export default class UIMenuDynamicListItem extends UIMenuItem {
-    constructor(text, selectionChangeHandler, description = "", selectedStartValueHandler = null, data = null) {
-        super(text, description, data);
-        this._currentOffset = 0;
-        this._precaptionText = '';
-        this._selectedStartValueHandler = null;
-        this.SelectionChangeHandler = null;
-        if (!this.isVariableFunction(selectionChangeHandler)) {
-            alt.logError(`[UIMenuDynamicListItem] ${text} is not created with a valid selectionChangeHandler, needs to be function. Please see docs.`);
-        }
-        if (!this.isVariableFunction(selectedStartValueHandler)) {
-            alt.logError(`[UIMenuDynamicListItem] ${text} is not created with a valid selectedStartValueHandler, needs to be function. Please see docs.`);
-        }
-        this.SelectionChangeHandler = selectionChangeHandler;
-        this._selectedStartValueHandler = selectedStartValueHandler;
-        let y = 0;
-        this._arrowLeft = new Sprite("commonmenu", "arrowleft", new Point(110, 105 + y), new Size(30, 30));
-        this._arrowRight = new Sprite("commonmenu", "arrowright", new Point(280, 105 + y), new Size(30, 30));
-        this._itemText = new ResText("", new Point(290, y + 104), 0.35, Color.White, Font.ChaletLondon, Alignment.Right);
-    }
-    SelectionChangeHandlerPromise(item, selectedValue, changeDirection) {
-        return new Promise((resolve, reject) => {
-            let newSelectedValue = this.SelectionChangeHandler(item, selectedValue, changeDirection);
-            resolve(newSelectedValue);
-        });
-    }
-    get PreCaptionText() {
-        return this._precaptionText;
-    }
-    set PreCaptionText(text) {
-        if (!text)
-            throw new Error("The pre caption text can't be null");
-        if (typeof text !== 'string')
-            throw new Error("The pre caption text must be a string");
-        this._precaptionText = text;
-        this._currentOffset = Screen.GetTextWidth(this.PreCaptionText + this._selectedValue, this._itemText && this._itemText.Font ? this._itemText.Font : 0, 0.35);
-    }
-    get SelectedValue() {
-        return this._selectedValue;
-    }
-    set SelectedValue(value) {
-        this._selectedValue = value;
-        if (value == undefined)
-            return;
-        this._currentOffset = Screen.GetTextWidth(this.PreCaptionText + this._selectedValue, this._itemText && this._itemText.Font ? this._itemText.Font : 0, this._itemText && this._itemText.Scale ? this._itemText.Scale : 0.35);
-    }
-    SetVerticalPosition(y) {
-        this._arrowLeft.Pos = new Point(300 + this.Offset.X + this.Parent.WidthOffset, 147 + y + this.Offset.Y);
-        this._arrowRight.Pos = new Point(400 + this.Offset.X + this.Parent.WidthOffset, 147 + y + this.Offset.Y);
-        this._itemText.Pos = new Point(300 + this.Offset.X + this.Parent.WidthOffset, y + 147 + this.Offset.Y);
-        super.SetVerticalPosition(y);
-    }
-    SetRightLabel(text) {
-        return this;
-    }
-    SetRightBadge(badge) {
-        return this;
-    }
-    Draw() {
-        super.Draw();
-        if (this._selectedValue == undefined) {
-            if (this._selectedStartValueHandler != null) {
-                this.SelectedValue = this._selectedStartValueHandler();
-            }
-            else {
-                this._selectedValue = "";
-            }
-        }
-        const offset = this._currentOffset;
-        this._itemText.Color = this.Enabled
-            ? this.Selected
-                ? this.HighlightedForeColor
-                : this.ForeColor
-            : new Color(163, 159, 148);
-        this._itemText.Caption = this.PreCaptionText + this._selectedValue;
-        this._arrowLeft.Color = this.Enabled
-            ? this.Selected
-                ? this.HighlightedForeColor
-                : this.ForeColor
-            : new Color(163, 159, 148);
-        this._arrowRight.Color = this.Enabled
-            ? this.Selected
-                ? this.HighlightedForeColor
-                : this.ForeColor
-            : new Color(163, 159, 148);
-        this._arrowLeft.Pos = new Point(380 - offset + this.Offset.X + this.Parent.WidthOffset, this._arrowLeft.Pos.Y);
-        if (this.Selected) {
-            this._arrowLeft.Draw();
-            this._arrowRight.Draw();
-            this._itemText.Pos = new Point(405 + this.Offset.X + this.Parent.WidthOffset, this._itemText.Pos.Y);
-        }
-        else {
-            this._itemText.Pos = new Point(420 + this.Offset.X + this.Parent.WidthOffset, this._itemText.Pos.Y);
-        }
-        this._itemText.Draw();
-    }
-    isVariableFunction(functionToCheck) {
-        return functionToCheck && {}.toString.call(functionToCheck) === '[object Function]';
-    }
-}
diff --git a/node_modules/@durtyfree/altv-nativeui/examples/nativeUI-example/includes/NativeUI/items/UIMenuDynamicListItem.ts b/node_modules/@durtyfree/altv-nativeui/examples/nativeUI-example/includes/NativeUI/items/UIMenuDynamicListItem.ts
deleted file mode 100644
index f20bb9b..0000000
--- a/node_modules/@durtyfree/altv-nativeui/examples/nativeUI-example/includes/NativeUI/items/UIMenuDynamicListItem.ts
+++ /dev/null
@@ -1,142 +0,0 @@
-import * as alt from 'alt-client';
-import BadgeStyle from "../enums/BadgeStyle";
-import Font from "../enums/Font";
-import Alignment from "../enums/Alignment";
-import ChangeDirection from "../enums/ChangeDirection";
-import ResText from "../modules/ResText";
-import Sprite from "../modules/Sprite";
-import Color from "../utils/Color";
-import Point from "../utils/Point";
-import Size from "../utils/Size";
-import Screen from "../utils/Screen";
-import UIMenuItem from "./UIMenuItem";
-
-interface SelectionChangeHandler {
-    (item: UIMenuDynamicListItem, selectedValue: string, changeDirection: ChangeDirection): string
-}
-
-interface SelectedStartValueHandler {
-    (): string
-}
-
-export default class UIMenuDynamicListItem extends UIMenuItem {
-    protected _itemText: ResText;
-    protected _arrowLeft: Sprite;
-    protected _arrowRight: Sprite;
-
-    private _currentOffset: number = 0;
-    private _precaptionText: string = '';
-    private _selectedValue: string;
-    private readonly _selectedStartValueHandler: SelectedStartValueHandler = null;
-
-    public readonly SelectionChangeHandler: SelectionChangeHandler = null;
-    public SelectionChangeHandlerPromise(item: UIMenuDynamicListItem, selectedValue: string, changeDirection: ChangeDirection): Promise<unknown> {
-        return new Promise((resolve, reject) => {
-            let newSelectedValue: string = this.SelectionChangeHandler(item, selectedValue, changeDirection);
-            resolve(newSelectedValue);
-        });
-    }
-
-    public get PreCaptionText() {
-        return this._precaptionText;
-    }
-    public set PreCaptionText(text) {
-        if (!text) throw new Error("The pre caption text can't be null");
-        if (typeof text !== 'string') throw new Error("The pre caption text must be a string");
-        this._precaptionText = text;
-        this._currentOffset = Screen.GetTextWidth(this.PreCaptionText + this._selectedValue, this._itemText && this._itemText.Font ? this._itemText.Font : 0, 0.35);
-    }
-
-    public get SelectedValue(): string {
-        return this._selectedValue;
-    }
-    public set SelectedValue(value: string) {
-        this._selectedValue = value;
-        if (value == undefined)
-            return;
-
-        this._currentOffset = Screen.GetTextWidth(this.PreCaptionText + this._selectedValue, this._itemText && this._itemText.Font ? this._itemText.Font : 0, this._itemText && this._itemText.Scale ? this._itemText.Scale : 0.35);
-    }
-
-    constructor(text: string, selectionChangeHandler: { (item: UIMenuDynamicListItem, selectedValue: string, changeDirection: ChangeDirection): string }, description: string = "", selectedStartValueHandler: { (): string } = null, data: any = null) {
-        super(text, description, data);
-
-        if (!this.isVariableFunction(selectionChangeHandler)) {
-            alt.logError(`[UIMenuDynamicListItem] ${text} is not created with a valid selectionChangeHandler, needs to be function. Please see docs.`);
-        }
-        if (!this.isVariableFunction(selectedStartValueHandler)) {
-            alt.logError(`[UIMenuDynamicListItem] ${text} is not created with a valid selectedStartValueHandler, needs to be function. Please see docs.`);
-        }
-
-        this.SelectionChangeHandler = selectionChangeHandler;
-        this._selectedStartValueHandler = selectedStartValueHandler;
-        let y = 0;
-
-        this._arrowLeft = new Sprite("commonmenu", "arrowleft", new Point(110, 105 + y), new Size(30, 30));
-        this._arrowRight = new Sprite("commonmenu", "arrowright", new Point(280, 105 + y), new Size(30, 30));
-        this._itemText = new ResText("", new Point(290, y + 104), 0.35, Color.White, Font.ChaletLondon, Alignment.Right);
-    }
-
-    public SetVerticalPosition(y: number) {
-        this._arrowLeft.Pos = new Point(300 + this.Offset.X + this.Parent.WidthOffset, 147 + y + this.Offset.Y);
-        this._arrowRight.Pos = new Point(400 + this.Offset.X + this.Parent.WidthOffset, 147 + y + this.Offset.Y);
-        this._itemText.Pos = new Point(300 + this.Offset.X + this.Parent.WidthOffset, y + 147 + this.Offset.Y);
-        super.SetVerticalPosition(y);
-    }
-
-    public SetRightLabel(text: string) {
-        return this;
-    }
-
-    public SetRightBadge(badge: BadgeStyle) {
-        return this;
-    }
-
-    public Draw() {
-        super.Draw();
-        if (this._selectedValue == undefined) {
-            if (this._selectedStartValueHandler != null) {
-                this.SelectedValue = this._selectedStartValueHandler();
-            }
-            else {
-                this._selectedValue = "";
-            }
-        }
-
-        const offset = this._currentOffset;
-
-        this._itemText.Color = this.Enabled
-            ? this.Selected
-                ? this.HighlightedForeColor
-                : this.ForeColor
-            : new Color(163, 159, 148);
-
-        this._itemText.Caption = this.PreCaptionText + this._selectedValue;
-
-        this._arrowLeft.Color = this.Enabled
-            ? this.Selected
-                ? this.HighlightedForeColor
-                : this.ForeColor
-            : new Color(163, 159, 148);
-        this._arrowRight.Color = this.Enabled
-            ? this.Selected
-                ? this.HighlightedForeColor
-                : this.ForeColor
-            : new Color(163, 159, 148);
-
-        this._arrowLeft.Pos = new Point(380 - offset + this.Offset.X + this.Parent.WidthOffset, this._arrowLeft.Pos.Y);
-
-        if (this.Selected) {
-            this._arrowLeft.Draw();
-            this._arrowRight.Draw();
-            this._itemText.Pos = new Point(405 + this.Offset.X + this.Parent.WidthOffset, this._itemText.Pos.Y);
-        } else {
-            this._itemText.Pos = new Point(420 + this.Offset.X + this.Parent.WidthOffset, this._itemText.Pos.Y);
-        }
-        this._itemText.Draw();
-    }
-
-    private isVariableFunction(functionToCheck: any): boolean {
-        return functionToCheck && {}.toString.call(functionToCheck) === '[object Function]';
-    }
-}
\ No newline at end of file
diff --git a/node_modules/@durtyfree/altv-nativeui/examples/nativeUI-example/includes/NativeUI/items/UIMenuItem.js b/node_modules/@durtyfree/altv-nativeui/examples/nativeUI-example/includes/NativeUI/items/UIMenuItem.js
deleted file mode 100644
index 7e7b55a..0000000
--- a/node_modules/@durtyfree/altv-nativeui/examples/nativeUI-example/includes/NativeUI/items/UIMenuItem.js
+++ /dev/null
@@ -1,237 +0,0 @@
-import * as alt from 'alt-client';
-import BadgeStyle from "../enums/BadgeStyle";
-import Font from "../enums/Font";
-import Alignment from "../enums/Alignment";
-import ResRectangle from "../modules/ResRectangle";
-import ResText from "../modules/ResText";
-import Sprite from "../modules/Sprite";
-import Color from "../utils/Color";
-import Point from "../utils/Point";
-import Size from "../utils/Size";
-import UUIDV4 from "../utils/UUIDV4";
-export default class UIMenuItem {
-    constructor(text, description = "", data = null) {
-        this.Id = UUIDV4();
-        this.BackColor = UIMenuItem.DefaultBackColor;
-        this.HighlightedBackColor = UIMenuItem.DefaultHighlightedBackColor;
-        this.ForeColor = UIMenuItem.DefaultForeColor;
-        this.HighlightedForeColor = UIMenuItem.DefaultHighlightedForeColor;
-        this.RightLabel = "";
-        this.LeftBadge = BadgeStyle.None;
-        this.RightBadge = BadgeStyle.None;
-        this.Enabled = true;
-        this.Data = data;
-        this._rectangle = new ResRectangle(new Point(0, 0), new Size(431, 38), new Color(150, 0, 0, 0));
-        this._text = new ResText(text, new Point(8, 0), 0.33, Color.WhiteSmoke, Font.ChaletLondon, Alignment.Left);
-        this.Description = description;
-        this._selectedSprite = new Sprite("commonmenu", "gradient_nav", new Point(0, 0), new Size(431, 38));
-        this._badgeLeft = new Sprite("commonmenu", "", new Point(0, 0), new Size(40, 40));
-        this._badgeRight = new Sprite("commonmenu", "", new Point(0, 0), new Size(40, 40));
-        this._labelText = new ResText("", new Point(0, 0), 0.35, Color.White, 0, Alignment.Right);
-    }
-    get Text() {
-        return this._text.Caption;
-    }
-    set Text(text) {
-        this._text.Caption = text;
-    }
-    get Description() {
-        return this._description;
-    }
-    set Description(text) {
-        this._description = text;
-        if (this.hasOwnProperty('Parent')) {
-            this.Parent.UpdateDescriptionCaption();
-        }
-    }
-    SetVerticalPosition(y) {
-        this._rectangle.Pos = new Point(this.Offset.X, y + 144 + this.Offset.Y);
-        this._selectedSprite.Pos = new Point(0 + this.Offset.X, y + 144 + this.Offset.Y);
-        this._text.Pos = new Point(8 + this.Offset.X, y + 147 + this.Offset.Y);
-        this._badgeLeft.Pos = new Point(0 + this.Offset.X, y + 142 + this.Offset.Y);
-        this._badgeRight.Pos = new Point(385 + this.Offset.X, y + 142 + this.Offset.Y);
-        this._labelText.Pos = new Point(420 + this.Offset.X, y + 148 + this.Offset.Y);
-    }
-    addEvent(event, ...args) {
-        this._event = { event: event, args: args };
-    }
-    fireEvent() {
-        if (this._event) {
-            alt.emit(this._event.event, ...this._event.args);
-        }
-    }
-    Draw() {
-        this._rectangle.Size = new Size(431 + this.Parent.WidthOffset, 38);
-        this._selectedSprite.Size = new Size(431 + this.Parent.WidthOffset, 38);
-        if (this.Hovered && !this.Selected) {
-            this._rectangle.Color = new Color(255, 255, 255, 20);
-            this._rectangle.Draw();
-        }
-        this._selectedSprite.Color = this.Selected
-            ? this.HighlightedBackColor
-            : this.BackColor;
-        this._selectedSprite.Draw();
-        this._text.Color = this.Enabled
-            ? this.Selected
-                ? this.HighlightedForeColor
-                : this.ForeColor
-            : new Color(163, 159, 148);
-        if (this.LeftBadge != BadgeStyle.None) {
-            this._text.Pos = new Point(35 + this.Offset.X, this._text.Pos.Y);
-            this._badgeLeft.TextureDict = this.BadgeToSpriteLib(this.LeftBadge);
-            this._badgeLeft.TextureName = this.BadgeToSpriteName(this.LeftBadge, this.Selected);
-            this._badgeLeft.Color = this.IsBagdeWhiteSprite(this.LeftBadge)
-                ? this.Enabled
-                    ? this.Selected
-                        ? this.HighlightedForeColor
-                        : this.ForeColor
-                    : new Color(163, 159, 148)
-                : Color.White;
-            this._badgeLeft.Draw();
-        }
-        else {
-            this._text.Pos = new Point(8 + this.Offset.X, this._text.Pos.Y);
-        }
-        if (this.RightBadge != BadgeStyle.None) {
-            this._badgeRight.Pos = new Point(385 + this.Offset.X + this.Parent.WidthOffset, this._badgeRight.Pos.Y);
-            this._badgeRight.TextureDict = this.BadgeToSpriteLib(this.RightBadge);
-            this._badgeRight.TextureName = this.BadgeToSpriteName(this.RightBadge, this.Selected);
-            this._badgeRight.Color = this.IsBagdeWhiteSprite(this.RightBadge)
-                ? this.Enabled
-                    ? this.Selected
-                        ? this.HighlightedForeColor
-                        : this.ForeColor
-                    : new Color(163, 159, 148)
-                : Color.White;
-            this._badgeRight.Draw();
-        }
-        if (this.RightLabel && this.RightLabel !== "") {
-            this._labelText.Pos = new Point(420 + this.Offset.X + this.Parent.WidthOffset, this._labelText.Pos.Y);
-            this._labelText.Caption = this.RightLabel;
-            this._labelText.Color = this._text.Color = this.Enabled
-                ? this.Selected
-                    ? this.HighlightedForeColor
-                    : this.ForeColor
-                : new Color(163, 159, 148);
-            this._labelText.Draw();
-        }
-        this._text.Draw();
-    }
-    SetLeftBadge(badge) {
-        this.LeftBadge = badge;
-    }
-    SetRightBadge(badge) {
-        this.RightBadge = badge;
-    }
-    SetRightLabel(text) {
-        this.RightLabel = text;
-    }
-    BadgeToSpriteLib(badge) {
-        switch (badge) {
-            case BadgeStyle.Sale:
-                return "mpshopsale";
-            case BadgeStyle.Audio1:
-            case BadgeStyle.Audio2:
-            case BadgeStyle.Audio3:
-            case BadgeStyle.AudioInactive:
-            case BadgeStyle.AudioMute:
-                return "mpleaderboard";
-            default:
-                return "commonmenu";
-        }
-    }
-    BadgeToSpriteName(badge, selected) {
-        switch (badge) {
-            case BadgeStyle.None:
-                return "";
-            case BadgeStyle.BronzeMedal:
-                return "mp_medal_bronze";
-            case BadgeStyle.GoldMedal:
-                return "mp_medal_gold";
-            case BadgeStyle.SilverMedal:
-                return "medal_silver";
-            case BadgeStyle.Alert:
-                return "mp_alerttriangle";
-            case BadgeStyle.Crown:
-                return "mp_hostcrown";
-            case BadgeStyle.Ammo:
-                return selected ? "shop_ammo_icon_b" : "shop_ammo_icon_a";
-            case BadgeStyle.Armour:
-                return selected ? "shop_armour_icon_b" : "shop_armour_icon_a";
-            case BadgeStyle.Barber:
-                return selected ? "shop_barber_icon_b" : "shop_barber_icon_a";
-            case BadgeStyle.Clothes:
-                return selected ? "shop_clothing_icon_b" : "shop_clothing_icon_a";
-            case BadgeStyle.Franklin:
-                return selected ? "shop_franklin_icon_b" : "shop_franklin_icon_a";
-            case BadgeStyle.Bike:
-                return selected ? "shop_garage_bike_icon_b" : "shop_garage_bike_icon_a";
-            case BadgeStyle.Car:
-                return selected ? "shop_garage_icon_b" : "shop_garage_icon_a";
-            case BadgeStyle.Gun:
-                return selected ? "shop_gunclub_icon_b" : "shop_gunclub_icon_a";
-            case BadgeStyle.Heart:
-                return selected ? "shop_health_icon_b" : "shop_health_icon_a";
-            case BadgeStyle.Lock:
-                return "shop_lock";
-            case BadgeStyle.Makeup:
-                return selected ? "shop_makeup_icon_b" : "shop_makeup_icon_a";
-            case BadgeStyle.Mask:
-                return selected ? "shop_mask_icon_b" : "shop_mask_icon_a";
-            case BadgeStyle.Michael:
-                return selected ? "shop_michael_icon_b" : "shop_michael_icon_a";
-            case BadgeStyle.Star:
-                return "shop_new_star";
-            case BadgeStyle.Tatoo:
-                return selected ? "shop_tattoos_icon_b" : "shop_tattoos_icon_";
-            case BadgeStyle.Tick:
-                return "shop_tick_icon";
-            case BadgeStyle.Trevor:
-                return selected ? "shop_trevor_icon_b" : "shop_trevor_icon_a";
-            case BadgeStyle.Sale:
-                return "saleicon";
-            case BadgeStyle.ArrowLeft:
-                return "arrowleft";
-            case BadgeStyle.ArrowRight:
-                return "arrowright";
-            case BadgeStyle.Audio1:
-                return "leaderboard_audio_1";
-            case BadgeStyle.Audio2:
-                return "leaderboard_audio_2";
-            case BadgeStyle.Audio3:
-                return "leaderboard_audio_3";
-            case BadgeStyle.AudioInactive:
-                return "leaderboard_audio_inactive";
-            case BadgeStyle.AudioMute:
-                return "leaderboard_audio_mute";
-            default:
-                return "";
-        }
-    }
-    IsBagdeWhiteSprite(badge) {
-        switch (badge) {
-            case BadgeStyle.Lock:
-            case BadgeStyle.Tick:
-            case BadgeStyle.Crown:
-                return true;
-            default:
-                return false;
-        }
-    }
-    BadgeToColor(badge, selected) {
-        switch (badge) {
-            case BadgeStyle.Lock:
-            case BadgeStyle.Tick:
-            case BadgeStyle.Crown:
-                return selected
-                    ? new Color(255, 0, 0, 0)
-                    : new Color(255, 255, 255, 255);
-            default:
-                return new Color(255, 255, 255, 255);
-        }
-    }
-}
-UIMenuItem.DefaultBackColor = Color.Empty;
-UIMenuItem.DefaultHighlightedBackColor = Color.White;
-UIMenuItem.DefaultForeColor = Color.WhiteSmoke;
-UIMenuItem.DefaultHighlightedForeColor = Color.Black;
diff --git a/node_modules/@durtyfree/altv-nativeui/examples/nativeUI-example/includes/NativeUI/items/UIMenuItem.ts b/node_modules/@durtyfree/altv-nativeui/examples/nativeUI-example/includes/NativeUI/items/UIMenuItem.ts
deleted file mode 100644
index af3400c..0000000
--- a/node_modules/@durtyfree/altv-nativeui/examples/nativeUI-example/includes/NativeUI/items/UIMenuItem.ts
+++ /dev/null
@@ -1,285 +0,0 @@
-import * as alt from 'alt-client';
-import BadgeStyle from "../enums/BadgeStyle";
-import Font from "../enums/Font";
-import Alignment from "../enums/Alignment";
-import NativeUI from "../NativeUi";
-import ResRectangle from "../modules/ResRectangle";
-import ResText from "../modules/ResText";
-import Sprite from "../modules/Sprite";
-import Color from "../utils/Color";
-import Point from "../utils/Point";
-import Size from "../utils/Size";
-import UUIDV4 from "../utils/UUIDV4";
-
-export default class UIMenuItem {
-    public readonly Id: string = UUIDV4();
-
-    public static readonly DefaultBackColor: Color = Color.Empty;
-    public static readonly DefaultHighlightedBackColor: Color = Color.White;
-    public static readonly DefaultForeColor: Color = Color.WhiteSmoke;
-    public static readonly DefaultHighlightedForeColor: Color = Color.Black;
-
-    private _event: { event: string; args: any[] };
-
-    protected _rectangle: ResRectangle;
-    protected _text: ResText;
-    protected _description: string;
-    protected _selectedSprite: Sprite;
-    protected _badgeLeft: Sprite;
-    protected _badgeRight: Sprite;
-    protected _labelText: ResText;
-
-    public BackColor: Color = UIMenuItem.DefaultBackColor;
-    public HighlightedBackColor: Color = UIMenuItem.DefaultHighlightedBackColor;
-
-    public ForeColor: Color = UIMenuItem.DefaultForeColor;
-    public HighlightedForeColor: Color = UIMenuItem.DefaultHighlightedForeColor;
-
-    public Enabled: boolean;
-    public Selected: boolean;
-    public Hovered: boolean;
-    public Data: any;
-
-    public Offset: Point;
-    public Parent: NativeUI;
-
-    public get Text() {
-        return this._text.Caption;
-    }
-    public set Text(text) {
-        this._text.Caption = text;
-    }
-
-    public get Description() {
-        return this._description;
-    }
-    public set Description(text) {
-        this._description = text;
-        if (this.hasOwnProperty('Parent')) {
-            this.Parent.UpdateDescriptionCaption();
-        }
-    }
-
-    public RightLabel: string = "";
-    public LeftBadge: BadgeStyle = BadgeStyle.None;
-    public RightBadge: BadgeStyle = BadgeStyle.None;
-
-    constructor(text: string, description = "", data: any = null) {
-        this.Enabled = true;
-        this.Data = data;
-
-        this._rectangle = new ResRectangle(new Point(0, 0), new Size(431, 38), new Color(150, 0, 0, 0));
-        this._text = new ResText(text, new Point(8, 0), 0.33, Color.WhiteSmoke, Font.ChaletLondon, Alignment.Left);
-        this.Description = description;
-        this._selectedSprite = new Sprite("commonmenu", "gradient_nav", new Point(0, 0), new Size(431, 38));
-
-        this._badgeLeft = new Sprite("commonmenu", "", new Point(0, 0), new Size(40, 40));
-        this._badgeRight = new Sprite("commonmenu", "", new Point(0, 0), new Size(40, 40));
-
-        this._labelText = new ResText("", new Point(0, 0), 0.35, Color.White, 0, Alignment.Right);
-    }
-
-    public SetVerticalPosition(y: number) {
-        this._rectangle.Pos = new Point(this.Offset.X, y + 144 + this.Offset.Y);
-        this._selectedSprite.Pos = new Point(0 + this.Offset.X, y + 144 + this.Offset.Y);
-        this._text.Pos = new Point(8 + this.Offset.X, y + 147 + this.Offset.Y);
-
-        this._badgeLeft.Pos = new Point(0 + this.Offset.X, y + 142 + this.Offset.Y);
-        this._badgeRight.Pos = new Point(385 + this.Offset.X, y + 142 + this.Offset.Y);
-
-        this._labelText.Pos = new Point(420 + this.Offset.X, y + 148 + this.Offset.Y);
-    }
-
-    public addEvent(event: string, ...args: any[]) {
-        this._event = { event: event, args: args };
-    }
-
-    public fireEvent() {
-        if (this._event) {
-            alt.emit(this._event.event, ...this._event.args);
-        }
-    }
-
-    public Draw() {
-        this._rectangle.Size = new Size(431 + this.Parent.WidthOffset, 38);
-        this._selectedSprite.Size = new Size(431 + this.Parent.WidthOffset, 38);
-
-        if (this.Hovered && !this.Selected) {
-            this._rectangle.Color = new Color(255, 255, 255, 20);
-            this._rectangle.Draw();
-        }
-
-        this._selectedSprite.Color = this.Selected
-            ? this.HighlightedBackColor
-            : this.BackColor;
-        this._selectedSprite.Draw();
-
-        this._text.Color = this.Enabled
-            ? this.Selected
-                ? this.HighlightedForeColor
-                : this.ForeColor
-            : new Color(163, 159, 148);
-
-        if (this.LeftBadge != BadgeStyle.None) {
-            this._text.Pos = new Point(35 + this.Offset.X, this._text.Pos.Y);
-            this._badgeLeft.TextureDict = this.BadgeToSpriteLib(this.LeftBadge);
-            this._badgeLeft.TextureName = this.BadgeToSpriteName(this.LeftBadge, this.Selected);
-            this._badgeLeft.Color = this.IsBagdeWhiteSprite(this.LeftBadge)
-                ? this.Enabled
-                    ? this.Selected
-                        ? this.HighlightedForeColor
-                        : this.ForeColor
-                    : new Color(163, 159, 148)
-                : Color.White;
-            this._badgeLeft.Draw();
-        } else {
-            this._text.Pos = new Point(8 + this.Offset.X, this._text.Pos.Y);
-        }
-
-        if (this.RightBadge != BadgeStyle.None) {
-            this._badgeRight.Pos = new Point(385 + this.Offset.X + this.Parent.WidthOffset, this._badgeRight.Pos.Y);
-            this._badgeRight.TextureDict = this.BadgeToSpriteLib(this.RightBadge);
-            this._badgeRight.TextureName = this.BadgeToSpriteName(this.RightBadge, this.Selected);
-            this._badgeRight.Color = this.IsBagdeWhiteSprite(this.RightBadge)
-                ? this.Enabled
-                    ? this.Selected
-                        ? this.HighlightedForeColor
-                        : this.ForeColor
-                    : new Color(163, 159, 148)
-                : Color.White;
-            this._badgeRight.Draw();
-        }
-
-        if (this.RightLabel && this.RightLabel !== "") {
-            this._labelText.Pos = new Point(420 + this.Offset.X + this.Parent.WidthOffset, this._labelText.Pos.Y);
-            this._labelText.Caption = this.RightLabel;
-            this._labelText.Color = this._text.Color = this.Enabled
-                ? this.Selected
-                    ? this.HighlightedForeColor
-                    : this.ForeColor
-                : new Color(163, 159, 148);
-            this._labelText.Draw();
-        }
-        this._text.Draw();
-    }
-
-    public SetLeftBadge(badge: BadgeStyle) {
-        this.LeftBadge = badge;
-    }
-
-    public SetRightBadge(badge: BadgeStyle) {
-        this.RightBadge = badge;
-    }
-
-    public SetRightLabel(text: string) {
-        this.RightLabel = text;
-    }
-
-    public BadgeToSpriteLib(badge: BadgeStyle) {
-        switch (badge) {
-            case BadgeStyle.Sale:
-                return "mpshopsale";
-            case BadgeStyle.Audio1:
-            case BadgeStyle.Audio2:
-            case BadgeStyle.Audio3:
-            case BadgeStyle.AudioInactive:
-            case BadgeStyle.AudioMute:
-                return "mpleaderboard";
-            default:
-                return "commonmenu";
-        }
-    }
-
-    public BadgeToSpriteName(badge: BadgeStyle, selected: boolean) {
-        switch (badge) {
-            case BadgeStyle.None:
-                return "";
-            case BadgeStyle.BronzeMedal:
-                return "mp_medal_bronze";
-            case BadgeStyle.GoldMedal:
-                return "mp_medal_gold";
-            case BadgeStyle.SilverMedal:
-                return "medal_silver";
-            case BadgeStyle.Alert:
-                return "mp_alerttriangle";
-            case BadgeStyle.Crown:
-                return "mp_hostcrown";
-            case BadgeStyle.Ammo:
-                return selected ? "shop_ammo_icon_b" : "shop_ammo_icon_a";
-            case BadgeStyle.Armour:
-                return selected ? "shop_armour_icon_b" : "shop_armour_icon_a";
-            case BadgeStyle.Barber:
-                return selected ? "shop_barber_icon_b" : "shop_barber_icon_a";
-            case BadgeStyle.Clothes:
-                return selected ? "shop_clothing_icon_b" : "shop_clothing_icon_a";
-            case BadgeStyle.Franklin:
-                return selected ? "shop_franklin_icon_b" : "shop_franklin_icon_a";
-            case BadgeStyle.Bike:
-                return selected ? "shop_garage_bike_icon_b" : "shop_garage_bike_icon_a";
-            case BadgeStyle.Car:
-                return selected ? "shop_garage_icon_b" : "shop_garage_icon_a";
-            case BadgeStyle.Gun:
-                return selected ? "shop_gunclub_icon_b" : "shop_gunclub_icon_a";
-            case BadgeStyle.Heart:
-                return selected ? "shop_health_icon_b" : "shop_health_icon_a";
-            case BadgeStyle.Lock:
-                return "shop_lock";
-            case BadgeStyle.Makeup:
-                return selected ? "shop_makeup_icon_b" : "shop_makeup_icon_a";
-            case BadgeStyle.Mask:
-                return selected ? "shop_mask_icon_b" : "shop_mask_icon_a";
-            case BadgeStyle.Michael:
-                return selected ? "shop_michael_icon_b" : "shop_michael_icon_a";
-            case BadgeStyle.Star:
-                return "shop_new_star";
-            case BadgeStyle.Tatoo:
-                return selected ? "shop_tattoos_icon_b" : "shop_tattoos_icon_";
-            case BadgeStyle.Tick:
-                return "shop_tick_icon";
-            case BadgeStyle.Trevor:
-                return selected ? "shop_trevor_icon_b" : "shop_trevor_icon_a";
-            case BadgeStyle.Sale:
-                return "saleicon";
-            case BadgeStyle.ArrowLeft:
-                return "arrowleft";
-            case BadgeStyle.ArrowRight:
-                return "arrowright";
-            case BadgeStyle.Audio1:
-                return "leaderboard_audio_1";
-            case BadgeStyle.Audio2:
-                return "leaderboard_audio_2";
-            case BadgeStyle.Audio3:
-                return "leaderboard_audio_3";
-            case BadgeStyle.AudioInactive:
-                return "leaderboard_audio_inactive";
-            case BadgeStyle.AudioMute:
-                return "leaderboard_audio_mute";
-            default:
-                return "";
-        }
-    }
-
-    public IsBagdeWhiteSprite(badge: BadgeStyle) {
-        switch (badge) {
-            case BadgeStyle.Lock:
-            case BadgeStyle.Tick:
-            case BadgeStyle.Crown:
-                return true;
-            default:
-                return false;
-        }
-    }
-
-    public BadgeToColor(badge: BadgeStyle, selected: boolean): Color {
-        switch (badge) {
-            case BadgeStyle.Lock:
-            case BadgeStyle.Tick:
-            case BadgeStyle.Crown:
-                return selected
-                    ? new Color(255, 0, 0, 0)
-                    : new Color(255, 255, 255, 255);
-            default:
-                return new Color(255, 255, 255, 255);
-        }
-    }
-}
\ No newline at end of file
diff --git a/node_modules/@durtyfree/altv-nativeui/examples/nativeUI-example/includes/NativeUI/items/UIMenuListItem.js b/node_modules/@durtyfree/altv-nativeui/examples/nativeUI-example/includes/NativeUI/items/UIMenuListItem.js
deleted file mode 100644
index 59afe2f..0000000
--- a/node_modules/@durtyfree/altv-nativeui/examples/nativeUI-example/includes/NativeUI/items/UIMenuListItem.js
+++ /dev/null
@@ -1,127 +0,0 @@
-import Font from "../enums/Font";
-import Alignment from "../enums/Alignment";
-import ItemsCollection from "../modules/ItemsCollection";
-import ListItem from "../modules/ListItem";
-import ResText from "../modules/ResText";
-import Sprite from "../modules/Sprite";
-import Color from "../utils/Color";
-import Point from "../utils/Point";
-import Size from "../utils/Size";
-import Screen from "../utils/Screen";
-import UIMenuItem from "./UIMenuItem";
-export default class UIMenuListItem extends UIMenuItem {
-    constructor(text, description = "", collection = new ItemsCollection([]), startIndex = 0, data = null) {
-        super(text, description, data);
-        this.ScrollingEnabled = true;
-        this.HoldTimeBeforeScroll = 200;
-        this._currentOffset = 0;
-        this._itemsCollection = [];
-        this._index = 0;
-        let y = 0;
-        this.Collection = collection.getListItems();
-        this.Index = startIndex;
-        this._arrowLeft = new Sprite("commonmenu", "arrowleft", new Point(110, 105 + y), new Size(30, 30));
-        this._arrowRight = new Sprite("commonmenu", "arrowright", new Point(280, 105 + y), new Size(30, 30));
-        this._itemText = new ResText("", new Point(290, y + 104), 0.35, Color.White, Font.ChaletLondon, Alignment.Right);
-    }
-    get Collection() {
-        return this._itemsCollection;
-    }
-    set Collection(v) {
-        if (!v)
-            throw new Error("The collection can't be null");
-        this._itemsCollection = v;
-    }
-    set SelectedItem(v) {
-        const idx = this.Collection.findIndex(li => li.Id === v.Id);
-        if (idx > 0)
-            this.Index = idx;
-        else
-            this.Index = 0;
-    }
-    get SelectedItem() {
-        return this.Collection.length > 0 ? this.Collection[this.Index] : null;
-    }
-    get SelectedValue() {
-        return this.SelectedItem == null
-            ? null
-            : this.SelectedItem.Data == null
-                ? this.SelectedItem.DisplayText
-                : this.SelectedItem.Data;
-    }
-    get Index() {
-        if (this.Collection == null)
-            return -1;
-        if (this.Collection != null && this.Collection.length == 0)
-            return -1;
-        return this._index % this.Collection.length;
-    }
-    set Index(value) {
-        if (this.Collection == null)
-            return;
-        if (this.Collection != null && this.Collection.length == 0)
-            return;
-        this._index = 100000000 - (100000000 % this.Collection.length) + value;
-        const caption = this.Collection.length >= this.Index
-            ? this.Collection[this.Index].DisplayText
-            : " ";
-        this._currentOffset = Screen.GetTextWidth(caption, this._itemText && this._itemText.Font ? this._itemText.Font : 0, 0.35);
-    }
-    setCollection(collection) {
-        this.Collection = collection.getListItems();
-    }
-    setCollectionItem(index, item, resetSelection = true) {
-        if (index > this.Collection.length)
-            throw new Error("Index out of bounds");
-        if (typeof item === "string")
-            item = new ListItem(item);
-        this.Collection.splice(index, 1, item);
-        if (resetSelection)
-            this.Index = 0;
-    }
-    SetVerticalPosition(y) {
-        this._arrowLeft.Pos = new Point(300 + this.Offset.X + this.Parent.WidthOffset, 147 + y + this.Offset.Y);
-        this._arrowRight.Pos = new Point(400 + this.Offset.X + this.Parent.WidthOffset, 147 + y + this.Offset.Y);
-        this._itemText.Pos = new Point(300 + this.Offset.X + this.Parent.WidthOffset, y + 147 + this.Offset.Y);
-        super.SetVerticalPosition(y);
-    }
-    SetRightLabel(text) {
-        return this;
-    }
-    SetRightBadge(badge) {
-        return this;
-    }
-    Draw() {
-        super.Draw();
-        const caption = this.Collection.length >= this.Index
-            ? this.Collection[this.Index].DisplayText
-            : " ";
-        const offset = this._currentOffset;
-        this._itemText.Color = this.Enabled
-            ? this.Selected
-                ? this.HighlightedForeColor
-                : this.ForeColor
-            : new Color(163, 159, 148);
-        this._itemText.Caption = caption;
-        this._arrowLeft.Color = this.Enabled
-            ? this.Selected
-                ? this.HighlightedForeColor
-                : this.ForeColor
-            : new Color(163, 159, 148);
-        this._arrowRight.Color = this.Enabled
-            ? this.Selected
-                ? this.HighlightedForeColor
-                : this.ForeColor
-            : new Color(163, 159, 148);
-        this._arrowLeft.Pos = new Point(380 - offset + this.Offset.X + this.Parent.WidthOffset, this._arrowLeft.Pos.Y);
-        if (this.Selected) {
-            this._arrowLeft.Draw();
-            this._arrowRight.Draw();
-            this._itemText.Pos = new Point(405 + this.Offset.X + this.Parent.WidthOffset, this._itemText.Pos.Y);
-        }
-        else {
-            this._itemText.Pos = new Point(420 + this.Offset.X + this.Parent.WidthOffset, this._itemText.Pos.Y);
-        }
-        this._itemText.Draw();
-    }
-}
diff --git a/node_modules/@durtyfree/altv-nativeui/examples/nativeUI-example/includes/NativeUI/items/UIMenuListItem.ts b/node_modules/@durtyfree/altv-nativeui/examples/nativeUI-example/includes/NativeUI/items/UIMenuListItem.ts
deleted file mode 100644
index 437428c..0000000
--- a/node_modules/@durtyfree/altv-nativeui/examples/nativeUI-example/includes/NativeUI/items/UIMenuListItem.ts
+++ /dev/null
@@ -1,159 +0,0 @@
-import BadgeStyle from "../enums/BadgeStyle";
-import Font from "../enums/Font";
-import Alignment from "../enums/Alignment";
-import ItemsCollection from "../modules/ItemsCollection";
-import ListItem from "../modules/ListItem";
-import ResText from "../modules/ResText";
-import Sprite from "../modules/Sprite";
-import Color from "../utils/Color";
-import Point from "../utils/Point";
-import Size from "../utils/Size";
-import Screen from "../utils/Screen";
-import UIMenuItem from "./UIMenuItem";
-
-export default class UIMenuListItem extends UIMenuItem {
-    public ScrollingEnabled: boolean = true;
-    public HoldTimeBeforeScroll: number = 200;
-
-    protected _itemText: ResText;
-    protected _arrowLeft: Sprite;
-    protected _arrowRight: Sprite;
-
-    private _currentOffset: number = 0;
-    private _itemsCollection: Array<ListItem> = [];
-
-    public get Collection() {
-        return this._itemsCollection;
-    }
-    public set Collection(v) {
-        if (!v) throw new Error("The collection can't be null");
-        this._itemsCollection = v;
-    }
-
-    public set SelectedItem(v: ListItem) {
-        const idx = this.Collection.findIndex(li => li.Id === v.Id);
-        if (idx > 0)
-            this.Index = idx;
-        else
-            this.Index = 0;
-    }
-
-    public get SelectedItem() {
-        return this.Collection.length > 0 ? this.Collection[this.Index] : null;
-    }
-
-    public get SelectedValue() {
-        return this.SelectedItem == null
-            ? null
-            : this.SelectedItem.Data == null
-                ? this.SelectedItem.DisplayText
-                : this.SelectedItem.Data;
-    }
-
-    protected _index: number = 0;
-
-    public get Index() {
-        if (this.Collection == null)
-            return -1;
-        if (this.Collection != null && this.Collection.length == 0)
-            return -1;
-
-        return this._index % this.Collection.length;
-    }
-    public set Index(value) {
-        if (this.Collection == null)
-            return;
-        if (this.Collection != null && this.Collection.length == 0)
-            return;
-
-        this._index = 100000000 - (100000000 % this.Collection.length) + value;
-
-        const caption = this.Collection.length >= this.Index
-            ? this.Collection[this.Index].DisplayText
-            : " ";
-        this._currentOffset = Screen.GetTextWidth(caption, this._itemText && this._itemText.Font ? this._itemText.Font : 0, 0.35); // this._itemText && this._itemText.font ? this._itemText.font : 0, this._itemText && this._itemText.scale ? this._itemText.scale : 0.35
-    }
-
-    constructor(text: string, description: string = "", collection: ItemsCollection = new ItemsCollection([]), startIndex: number = 0, data: any = null) {
-        super(text, description, data);
-
-        let y = 0;
-        this.Collection = collection.getListItems();
-        this.Index = startIndex;
-        this._arrowLeft = new Sprite("commonmenu", "arrowleft", new Point(110, 105 + y), new Size(30, 30));
-        this._arrowRight = new Sprite("commonmenu", "arrowright", new Point(280, 105 + y), new Size(30, 30));
-        this._itemText = new ResText("", new Point(290, y + 104), 0.35, Color.White, Font.ChaletLondon, Alignment.Right);
-    }
-
-    public setCollection(collection: ItemsCollection) {
-        this.Collection = collection.getListItems();
-    }
-
-    public setCollectionItem(index: number, item: ListItem | string, resetSelection: boolean = true) {
-        if (index > this.Collection.length)
-            // Placeholder for formatting
-            throw new Error("Index out of bounds");
-        if (typeof item === "string")
-            // Placeholder for formatting
-            item = new ListItem(item);
-
-        this.Collection.splice(index, 1, item);
-
-        if (resetSelection)
-            // Placeholder for formatting
-            this.Index = 0;
-    }
-
-    public SetVerticalPosition(y: number) {
-        this._arrowLeft.Pos = new Point(300 + this.Offset.X + this.Parent.WidthOffset, 147 + y + this.Offset.Y);
-        this._arrowRight.Pos = new Point(400 + this.Offset.X + this.Parent.WidthOffset, 147 + y + this.Offset.Y);
-        this._itemText.Pos = new Point(300 + this.Offset.X + this.Parent.WidthOffset, y + 147 + this.Offset.Y);
-        super.SetVerticalPosition(y);
-    }
-
-    public SetRightLabel(text: string) {
-        return this;
-    }
-
-    public SetRightBadge(badge: BadgeStyle) {
-        return this;
-    }
-
-    public Draw() {
-        super.Draw();
-        const caption = this.Collection.length >= this.Index
-            ? this.Collection[this.Index].DisplayText
-            : " ";
-        const offset = this._currentOffset;
-
-        this._itemText.Color = this.Enabled
-            ? this.Selected
-                ? this.HighlightedForeColor
-                : this.ForeColor
-            : new Color(163, 159, 148);
-
-        this._itemText.Caption = caption;
-
-        this._arrowLeft.Color = this.Enabled
-            ? this.Selected
-                ? this.HighlightedForeColor
-                : this.ForeColor
-            : new Color(163, 159, 148);
-        this._arrowRight.Color = this.Enabled
-            ? this.Selected
-                ? this.HighlightedForeColor
-                : this.ForeColor
-            : new Color(163, 159, 148);
-
-        this._arrowLeft.Pos = new Point(380 - offset + this.Offset.X + this.Parent.WidthOffset, this._arrowLeft.Pos.Y);
-
-        if (this.Selected) {
-            this._arrowLeft.Draw();
-            this._arrowRight.Draw();
-            this._itemText.Pos = new Point(405 + this.Offset.X + this.Parent.WidthOffset, this._itemText.Pos.Y);
-        } else {
-            this._itemText.Pos = new Point(420 + this.Offset.X + this.Parent.WidthOffset, this._itemText.Pos.Y);
-        }
-        this._itemText.Draw();
-    }
-}
diff --git a/node_modules/@durtyfree/altv-nativeui/examples/nativeUI-example/includes/NativeUI/items/UIMenuSliderItem.js b/node_modules/@durtyfree/altv-nativeui/examples/nativeUI-example/includes/NativeUI/items/UIMenuSliderItem.js
deleted file mode 100644
index 0fd7bff..0000000
--- a/node_modules/@durtyfree/altv-nativeui/examples/nativeUI-example/includes/NativeUI/items/UIMenuSliderItem.js
+++ /dev/null
@@ -1,65 +0,0 @@
-import ResRectangle from "../modules/ResRectangle";
-import Sprite from "../modules/Sprite";
-import Color from "../utils/Color";
-import Point from "../utils/Point";
-import Size from "../utils/Size";
-import UIMenuItem from "./UIMenuItem";
-export default class UIMenuSliderItem extends UIMenuItem {
-    constructor(text, items, index, description = "", divider = false, data = null) {
-        super(text, description, data);
-        const y = 0;
-        this._items = items;
-        this._arrowLeft = new Sprite("commonmenutu", "arrowleft", new Point(0, 105 + y), new Size(15, 15));
-        this._arrowRight = new Sprite("commonmenutu", "arrowright", new Point(0, 105 + y), new Size(15, 15));
-        this._rectangleBackground = new ResRectangle(new Point(0, 0), new Size(150, 9), new Color(4, 32, 57, 255));
-        this._rectangleSlider = new ResRectangle(new Point(0, 0), new Size(75, 9), new Color(57, 116, 200, 255));
-        if (divider) {
-            this._rectangleDivider = new ResRectangle(new Point(0, 0), new Size(2.5, 20), Color.WhiteSmoke);
-        }
-        else {
-            this._rectangleDivider = new ResRectangle(new Point(0, 0), new Size(2.5, 20), Color.Transparent);
-        }
-        this.Index = index;
-    }
-    get Index() {
-        return this._index % this._items.length;
-    }
-    set Index(value) {
-        this._index = 100000000 - (100000000 % this._items.length) + value;
-    }
-    SetVerticalPosition(y) {
-        this._rectangleBackground.Pos = new Point(250 + this.Offset.X + this.Parent.WidthOffset, y + 158.5 + this.Offset.Y);
-        this._rectangleSlider.Pos = new Point(250 + this.Offset.X + this.Parent.WidthOffset, y + 158.5 + this.Offset.Y);
-        this._rectangleDivider.Pos = new Point(323.5 + this.Offset.X + this.Parent.WidthOffset, y + 153 + this.Offset.Y);
-        this._arrowLeft.Pos = new Point(235 + this.Offset.X + this.Parent.WidthOffset, 155.5 + y + this.Offset.Y);
-        this._arrowRight.Pos = new Point(400 + this.Offset.X + this.Parent.WidthOffset, 155.5 + y + this.Offset.Y);
-        super.SetVerticalPosition(y);
-    }
-    IndexToItem(index) {
-        return this._items[index];
-    }
-    Draw() {
-        super.Draw();
-        this._arrowLeft.Color = this.Enabled
-            ? this.Selected
-                ? Color.Black
-                : Color.WhiteSmoke
-            : new Color(163, 159, 148);
-        this._arrowRight.Color = this.Enabled
-            ? this.Selected
-                ? Color.Black
-                : Color.WhiteSmoke
-            : new Color(163, 159, 148);
-        let offset = ((this._rectangleBackground.Size.Width - this._rectangleSlider.Size.Width) / (this._items.length - 1)) * this.Index;
-        this._rectangleSlider.Pos = new Point(250 + this.Offset.X + offset + +this.Parent.WidthOffset, this._rectangleSlider.Pos.Y);
-        if (this.Selected) {
-            this._arrowLeft.Draw();
-            this._arrowRight.Draw();
-        }
-        this._rectangleBackground.Draw();
-        this._rectangleSlider.Draw();
-        this._rectangleDivider.Draw();
-    }
-    SetRightBadge(badge) { }
-    SetRightLabel(text) { }
-}
diff --git a/node_modules/@durtyfree/altv-nativeui/examples/nativeUI-example/includes/NativeUI/items/UIMenuSliderItem.ts b/node_modules/@durtyfree/altv-nativeui/examples/nativeUI-example/includes/NativeUI/items/UIMenuSliderItem.ts
deleted file mode 100644
index fb5fde9..0000000
--- a/node_modules/@durtyfree/altv-nativeui/examples/nativeUI-example/includes/NativeUI/items/UIMenuSliderItem.ts
+++ /dev/null
@@ -1,82 +0,0 @@
-import BadgeStyle from "../enums/BadgeStyle";
-import ResRectangle from "../modules/ResRectangle";
-import Sprite from "../modules/Sprite";
-import Color from "../utils/Color";
-import Point from "../utils/Point";
-import Size from "../utils/Size";
-import UIMenuItem from "./UIMenuItem";
-
-export default class UIMenuSliderItem extends UIMenuItem {
-    private _arrowLeft: Sprite;
-    private _arrowRight: Sprite;
-    private _rectangleBackground: ResRectangle;
-    private _rectangleSlider: ResRectangle;
-    private _rectangleDivider: ResRectangle;
-    private _items: any[];
-    private _index: number;
-
-    public get Index() {
-        return this._index % this._items.length;
-    }
-    public set Index(value) {
-        this._index = 100000000 - (100000000 % this._items.length) + value;
-    }
-
-    constructor(text: string, items: any[], index: number, description: string = "", divider: boolean = false, data: any = null) {
-        super(text, description, data);
-
-        const y: number = 0;
-        this._items = items;
-        this._arrowLeft = new Sprite("commonmenutu", "arrowleft", new Point(0, 105 + y), new Size(15, 15));
-        this._arrowRight = new Sprite("commonmenutu", "arrowright", new Point(0, 105 + y), new Size(15, 15));
-        this._rectangleBackground = new ResRectangle(new Point(0, 0), new Size(150, 9), new Color(4, 32, 57, 255));
-        this._rectangleSlider = new ResRectangle(new Point(0, 0), new Size(75, 9), new Color(57, 116, 200, 255));
-        if (divider) {
-            this._rectangleDivider = new ResRectangle(new Point(0, 0), new Size(2.5, 20), Color.WhiteSmoke);
-        } else {
-            this._rectangleDivider = new ResRectangle(new Point(0, 0), new Size(2.5, 20), Color.Transparent);
-        }
-        this.Index = index;
-    }
-
-    public SetVerticalPosition(y: number) {
-        this._rectangleBackground.Pos = new Point(250 + this.Offset.X + this.Parent.WidthOffset, y + 158.5 + this.Offset.Y);
-        this._rectangleSlider.Pos = new Point(250 + this.Offset.X + this.Parent.WidthOffset, y + 158.5 + this.Offset.Y);
-        this._rectangleDivider.Pos = new Point(323.5 + this.Offset.X + this.Parent.WidthOffset, y + 153 + this.Offset.Y);
-        this._arrowLeft.Pos = new Point(235 + this.Offset.X + this.Parent.WidthOffset, 155.5 + y + this.Offset.Y);
-        this._arrowRight.Pos = new Point(400 + this.Offset.X + this.Parent.WidthOffset, 155.5 + y + this.Offset.Y);
-
-        super.SetVerticalPosition(y);
-    }
-
-    public IndexToItem(index: number) {
-        return this._items[index];
-    }
-
-    public Draw() {
-        super.Draw();
-        this._arrowLeft.Color = this.Enabled
-            ? this.Selected
-                ? Color.Black
-                : Color.WhiteSmoke
-            : new Color(163, 159, 148);
-        this._arrowRight.Color = this.Enabled
-            ? this.Selected
-                ? Color.Black
-                : Color.WhiteSmoke
-            : new Color(163, 159, 148);
-        let offset = ((this._rectangleBackground.Size.Width - this._rectangleSlider.Size.Width) / (this._items.length - 1)) * this.Index;
-        this._rectangleSlider.Pos = new Point(250 + this.Offset.X + offset + +this.Parent.WidthOffset, this._rectangleSlider.Pos.Y);
-        if (this.Selected) {
-            this._arrowLeft.Draw();
-            this._arrowRight.Draw();
-        }
-        this._rectangleBackground.Draw();
-        this._rectangleSlider.Draw();
-        this._rectangleDivider.Draw();
-    }
-
-    public SetRightBadge(badge: BadgeStyle) { }
-
-    public SetRightLabel(text: string) { }
-}
diff --git a/node_modules/@durtyfree/altv-nativeui/examples/nativeUI-example/includes/NativeUI/modules/BigMessage.js b/node_modules/@durtyfree/altv-nativeui/examples/nativeUI-example/includes/NativeUI/modules/BigMessage.js
deleted file mode 100644
index 4c96007..0000000
--- a/node_modules/@durtyfree/altv-nativeui/examples/nativeUI-example/includes/NativeUI/modules/BigMessage.js
+++ /dev/null
@@ -1,39 +0,0 @@
-import * as alt from 'alt-client';
-import Message from './Message';
-export default class BigMessage extends Message {
-    static Initialize(scaleForm, transitionOutAnimName) {
-        super.Initialize(scaleForm, transitionOutAnimName);
-        alt.everyTick(() => this.Render());
-    }
-    static ShowMissionPassedMessage(msg, subtitle = "", time = 5000) {
-        this.ShowCustomShard("SHOW_MISSION_PASSED_MESSAGE", time, msg, subtitle, 100, true, 0, true);
-    }
-    static ShowColoredShard(msg, desc, textColor, bgColor, time = 5000) {
-        this.ShowCustomShard("SHOW_SHARD_CENTERED_MP_MESSAGE", time, msg, desc, bgColor, textColor);
-    }
-    static ShowOldMessage(msg, time = 5000) {
-        this.ShowCustomShard("SHOW_MISSION_PASSED_MESSAGE", time, msg);
-    }
-    static ShowSimpleShard(title, subtitle = "", time = 5000) {
-        this.ShowCustomShard("SHOW_SHARD_CREW_RANKUP_MP_MESSAGE", time, title, subtitle);
-    }
-    static ShowRankupMessage(msg, subtitle, rank, time = 5000) {
-        this.ShowCustomShard("SHOW_BIG_MP_MESSAGE", time, msg, subtitle, rank, "", "");
-    }
-    static ShowPlaneMessage(title, planeName, planeHash, time = 5000) {
-        this.ShowCustomShard("SHOW_PLANE_MESSAGE", time, title, planeName, planeHash, "", "");
-    }
-    static ShowWeaponPurchasedMessage(bigMessage, weaponName, weaponHash, time = 5000) {
-        this.ShowCustomShard("SHOW_WEAPON_PURCHASED", time, bigMessage, weaponName, weaponHash, "", 100);
-    }
-    static ShowWastedMessage(title, message, color, darkenBackground, time = 5000) {
-        this.ShowCustomShard("SHOW_SHARD_WASTED_MP_MESSAGE", time, title, message, color, darkenBackground);
-    }
-    static ShowMpMessageLarge(msg, subtitle = "", time = 5000) {
-        this.ShowComplexCustomShard(() => {
-            this.Scaleform.callFunction("SHOW_CENTERED_MP_MESSAGE_LARGE", msg, subtitle, 100, true, 100);
-            this.Scaleform.callFunction("TRANSITION_IN");
-        }, time);
-    }
-}
-BigMessage.Initialize("MP_BIG_MESSAGE_FREEMODE", "TRANSITION_OUT");
diff --git a/node_modules/@durtyfree/altv-nativeui/examples/nativeUI-example/includes/NativeUI/modules/BigMessage.ts b/node_modules/@durtyfree/altv-nativeui/examples/nativeUI-example/includes/NativeUI/modules/BigMessage.ts
deleted file mode 100644
index a358924..0000000
--- a/node_modules/@durtyfree/altv-nativeui/examples/nativeUI-example/includes/NativeUI/modules/BigMessage.ts
+++ /dev/null
@@ -1,50 +0,0 @@
-﻿import * as alt from 'alt-client';
-import HudColor from '../enums/HudColor';
-import Message from './Message';
-
-export default class BigMessage extends Message {
-    public static Initialize(scaleForm: string, transitionOutAnimName: string) {
-        super.Initialize(scaleForm, transitionOutAnimName);
-        alt.everyTick(() => this.Render());
-    }
-
-    public static ShowMissionPassedMessage(msg: string, subtitle: string = "", time: number = 5000): void {
-        this.ShowCustomShard("SHOW_MISSION_PASSED_MESSAGE", time, msg, subtitle, 100, true, 0, true);
-    }
-
-    public static ShowColoredShard(msg: string, desc: string, textColor: HudColor, bgColor: HudColor, time: number = 5000): void {
-        this.ShowCustomShard("SHOW_SHARD_CENTERED_MP_MESSAGE", time, msg, desc, bgColor as number, textColor as number);
-    }
-
-    public static ShowOldMessage(msg: string, time: number = 5000): void {
-        this.ShowCustomShard("SHOW_MISSION_PASSED_MESSAGE", time, msg);
-    }
-
-    public static ShowSimpleShard(title: string, subtitle: string = "", time: number = 5000): void {
-        this.ShowCustomShard("SHOW_SHARD_CREW_RANKUP_MP_MESSAGE", time, title, subtitle);
-    }
-
-    public static ShowRankupMessage(msg: string, subtitle: string, rank: number, time: number = 5000): void {
-        this.ShowCustomShard("SHOW_BIG_MP_MESSAGE", time, msg, subtitle, rank, "", "");
-    }
-
-    public static ShowPlaneMessage(title: string, planeName: string, planeHash: number, time: number = 5000): void {
-        this.ShowCustomShard("SHOW_PLANE_MESSAGE", time, title, planeName, planeHash, "", "");
-    }
-
-    public static ShowWeaponPurchasedMessage(bigMessage: string, weaponName: string, weaponHash: number, time: number = 5000): void {
-        this.ShowCustomShard("SHOW_WEAPON_PURCHASED", time, bigMessage, weaponName, weaponHash, "", 100);
-    }
-
-    public static ShowWastedMessage(title: string, message: string, color: HudColor, darkenBackground: boolean, time: number = 5000): void {
-        this.ShowCustomShard("SHOW_SHARD_WASTED_MP_MESSAGE", time, title, message, color as number, darkenBackground);
-    }
-
-    public static ShowMpMessageLarge(msg: string, subtitle: string = "", time: number = 5000): void {
-        this.ShowComplexCustomShard(() => {
-            this.Scaleform.callFunction("SHOW_CENTERED_MP_MESSAGE_LARGE", msg, subtitle, 100, true, 100);
-            this.Scaleform.callFunction("TRANSITION_IN");
-        }, time);
-    }
-}
-BigMessage.Initialize("MP_BIG_MESSAGE_FREEMODE", "TRANSITION_OUT");
\ No newline at end of file
diff --git a/node_modules/@durtyfree/altv-nativeui/examples/nativeUI-example/includes/NativeUI/modules/Container.js b/node_modules/@durtyfree/altv-nativeui/examples/nativeUI-example/includes/NativeUI/modules/Container.js
deleted file mode 100644
index 0fa5328..0000000
--- a/node_modules/@durtyfree/altv-nativeui/examples/nativeUI-example/includes/NativeUI/modules/Container.js
+++ /dev/null
@@ -1,30 +0,0 @@
-import game from 'natives';
-import Size from "../utils/Size";
-import Rectangle from "./Rectangle";
-import Screen from "../utils/Screen";
-export default class Container extends Rectangle {
-    constructor(pos, size, color) {
-        super(pos, size, color);
-        this.Items = [];
-    }
-    addItem(item) {
-        this.Items.push(item);
-    }
-    Draw(offset) {
-        if (!this.Enabled)
-            return;
-        offset = offset || new Size();
-        const screenw = Screen.Width;
-        const screenh = Screen.Height;
-        const height = 1080.0;
-        const ratio = screenw / screenh;
-        const width = height * ratio;
-        const w = this.Size.Width / width;
-        const h = this.Size.Height / height;
-        const x = (this.Pos.X + offset.Width) / width + w * 0.5;
-        const y = (this.Pos.Y + offset.Height) / height + h * 0.5;
-        game.drawRect(x, y, w, h, this.Color.R, this.Color.G, this.Color.B, this.Color.A, false);
-        for (var item of this.Items)
-            item.Draw(new Size(this.Pos.X + offset.Width, this.Pos.Y + offset.Height));
-    }
-}
diff --git a/node_modules/@durtyfree/altv-nativeui/examples/nativeUI-example/includes/NativeUI/modules/Container.ts b/node_modules/@durtyfree/altv-nativeui/examples/nativeUI-example/includes/NativeUI/modules/Container.ts
deleted file mode 100644
index d4b244b..0000000
--- a/node_modules/@durtyfree/altv-nativeui/examples/nativeUI-example/includes/NativeUI/modules/Container.ts
+++ /dev/null
@@ -1,39 +0,0 @@
-import game from 'natives';
-import Size from "../utils/Size";
-import Rectangle from "./Rectangle";
-import Screen from "../utils/Screen";
-import Point from '../utils/Point';
-import Color from '../utils/Color';
-
-export default class Container extends Rectangle {
-    public Items: any[];
-
-    constructor(pos: Point, size: Size, color: Color) {
-        super(pos, size, color);
-        this.Items = [];
-    }
-
-    addItem(item: any) {
-        this.Items.push(item);
-    }
-
-    Draw(offset?: Size) {
-        if (!this.Enabled) return;
-        offset = offset || new Size();
-        const screenw = Screen.Width;
-        const screenh = Screen.Height;
-        const height = 1080.0;
-        const ratio = screenw / screenh;
-        const width = height * ratio;
-
-        const w = this.Size.Width / width;
-        const h = this.Size.Height / height;
-        const x = (this.Pos.X + offset.Width) / width + w * 0.5;
-        const y = (this.Pos.Y + offset.Height) / height + h * 0.5;
-
-        game.drawRect(x, y, w, h, this.Color.R, this.Color.G, this.Color.B, this.Color.A, false);
-
-        for (var item of this.Items)
-            item.Draw(new Size(this.Pos.X + offset.Width, this.Pos.Y + offset.Height));
-    }
-}
diff --git a/node_modules/@durtyfree/altv-nativeui/examples/nativeUI-example/includes/NativeUI/modules/IElement.js b/node_modules/@durtyfree/altv-nativeui/examples/nativeUI-example/includes/NativeUI/modules/IElement.js
deleted file mode 100644
index 1fa076f..0000000
--- a/node_modules/@durtyfree/altv-nativeui/examples/nativeUI-example/includes/NativeUI/modules/IElement.js
+++ /dev/null
@@ -1,5 +0,0 @@
-export default class IElement {
-    constructor() {
-        this.Enabled = true;
-    }
-}
diff --git a/node_modules/@durtyfree/altv-nativeui/examples/nativeUI-example/includes/NativeUI/modules/IElement.ts b/node_modules/@durtyfree/altv-nativeui/examples/nativeUI-example/includes/NativeUI/modules/IElement.ts
deleted file mode 100644
index d927161..0000000
--- a/node_modules/@durtyfree/altv-nativeui/examples/nativeUI-example/includes/NativeUI/modules/IElement.ts
+++ /dev/null
@@ -1,7 +0,0 @@
-export default class IElement {
-    public Enabled: boolean;
-
-	constructor() {
-		this.Enabled = true;
-	}
-}
diff --git a/node_modules/@durtyfree/altv-nativeui/examples/nativeUI-example/includes/NativeUI/modules/InstructionalButton.js b/node_modules/@durtyfree/altv-nativeui/examples/nativeUI-example/includes/NativeUI/modules/InstructionalButton.js
deleted file mode 100644
index 3a3354a..0000000
--- a/node_modules/@durtyfree/altv-nativeui/examples/nativeUI-example/includes/NativeUI/modules/InstructionalButton.js
+++ /dev/null
@@ -1,17 +0,0 @@
-import game from 'natives';
-export default class InstructionalButton {
-    constructor(text, control, buttonString = null) {
-        this._itemBind = null;
-        this.Text = text;
-        this._buttonControl = control;
-        this._usingControls = buttonString == null;
-        this._buttonString = buttonString;
-    }
-    get ItemBind() { return this._itemBind; }
-    BindToItem(item) {
-        this._itemBind = item;
-    }
-    GetButtonId() {
-        return this._usingControls ? game.getControlInstructionalButton(2, this._buttonControl, false) : "t_" + this._buttonString;
-    }
-}
diff --git a/node_modules/@durtyfree/altv-nativeui/examples/nativeUI-example/includes/NativeUI/modules/InstructionalButton.ts b/node_modules/@durtyfree/altv-nativeui/examples/nativeUI-example/includes/NativeUI/modules/InstructionalButton.ts
deleted file mode 100644
index a350645..0000000
--- a/node_modules/@durtyfree/altv-nativeui/examples/nativeUI-example/includes/NativeUI/modules/InstructionalButton.ts
+++ /dev/null
@@ -1,39 +0,0 @@
-import game from 'natives';
-import UIMenuItem from "../items/UIMenuItem";
-import Control from '../enums/Control';
-
-export default class InstructionalButton {
-    public Text: string;
-    public get ItemBind(): UIMenuItem { return this._itemBind; }
-
-    private _itemBind: UIMenuItem = null;
-    private readonly _buttonString: string;
-    private readonly _buttonControl: Control;
-    private readonly _usingControls: boolean;
-
-    /*
-    * Add a dynamic button to the instructional buttons array.
-    * Changes whether the controller is being used and changes depending on keybinds.
-    * @param control GTA.Control that gets converted into a button.
-    * @param keystring Custom keyboard button, like "I", or "O", or "F5".
-    * @param text Help text that goes with the button.
-    */
-    constructor(text: string, control: Control, buttonString: string = null) {
-        this.Text = text;
-        this._buttonControl = control;
-        this._usingControls = buttonString == null;
-        this._buttonString = buttonString;
-    }
-
-    /* 
-    * Bind this button to an item, so it's only shown when that item is selected.
-    * @param item Item to bind to.
-    */
-    public BindToItem(item: UIMenuItem): void {
-        this._itemBind = item;
-    }
-
-    public GetButtonId(): string {
-        return this._usingControls ? game.getControlInstructionalButton(2, this._buttonControl as number, false) : "t_" + this._buttonString;
-    }
-}
diff --git a/node_modules/@durtyfree/altv-nativeui/examples/nativeUI-example/includes/NativeUI/modules/ItemsCollection.js b/node_modules/@durtyfree/altv-nativeui/examples/nativeUI-example/includes/NativeUI/modules/ItemsCollection.js
deleted file mode 100644
index eab7e69..0000000
--- a/node_modules/@durtyfree/altv-nativeui/examples/nativeUI-example/includes/NativeUI/modules/ItemsCollection.js
+++ /dev/null
@@ -1,26 +0,0 @@
-import ListItem from "../modules/ListItem";
-export default class ItemsCollection {
-    constructor(items) {
-        if (items.length === 0)
-            throw new Error("ItemsCollection cannot be empty");
-        this.items = items;
-    }
-    length() {
-        return this.items.length;
-    }
-    getListItems() {
-        const items = [];
-        for (const item of this.items) {
-            if (item instanceof ListItem) {
-                items.push(item);
-            }
-            else if (typeof item == "string") {
-                items.push(new ListItem(item));
-            }
-            else if (typeof item == "number") {
-                items.push(new ListItem(item.toString()));
-            }
-        }
-        return items;
-    }
-}
diff --git a/node_modules/@durtyfree/altv-nativeui/examples/nativeUI-example/includes/NativeUI/modules/ItemsCollection.ts b/node_modules/@durtyfree/altv-nativeui/examples/nativeUI-example/includes/NativeUI/modules/ItemsCollection.ts
deleted file mode 100644
index 539e4a4..0000000
--- a/node_modules/@durtyfree/altv-nativeui/examples/nativeUI-example/includes/NativeUI/modules/ItemsCollection.ts
+++ /dev/null
@@ -1,28 +0,0 @@
-import ListItem from "../modules/ListItem";
-
-export default class ItemsCollection {
-    private items: ListItem[] | string[] | number[];
-
-    constructor(items: ListItem[] | string[] | number[]) {
-		if (items.length === 0) throw new Error("ItemsCollection cannot be empty");
-		this.items = items;
-	}
-
-	public length() {
-		return this.items.length;
-	}
-
-	public getListItems() {
-		const items = [];
-		for (const item of this.items) {
-			if (item instanceof ListItem) {
-				items.push(item);
-			} else if (typeof item == "string") {
-                items.push(new ListItem(item));
-            } else if (typeof item == "number") {
-                items.push(new ListItem(item.toString()));
-            }
-		}
-		return items;
-	}
-}
diff --git a/node_modules/@durtyfree/altv-nativeui/examples/nativeUI-example/includes/NativeUI/modules/ListItem.js b/node_modules/@durtyfree/altv-nativeui/examples/nativeUI-example/includes/NativeUI/modules/ListItem.js
deleted file mode 100644
index d080801..0000000
--- a/node_modules/@durtyfree/altv-nativeui/examples/nativeUI-example/includes/NativeUI/modules/ListItem.js
+++ /dev/null
@@ -1,8 +0,0 @@
-import UUIDV4 from "../utils/UUIDV4";
-export default class ListItem {
-    constructor(text = "", data = null) {
-        this.Id = UUIDV4();
-        this.DisplayText = text;
-        this.Data = data;
-    }
-}
diff --git a/node_modules/@durtyfree/altv-nativeui/examples/nativeUI-example/includes/NativeUI/modules/ListItem.ts b/node_modules/@durtyfree/altv-nativeui/examples/nativeUI-example/includes/NativeUI/modules/ListItem.ts
deleted file mode 100644
index 0170414..0000000
--- a/node_modules/@durtyfree/altv-nativeui/examples/nativeUI-example/includes/NativeUI/modules/ListItem.ts
+++ /dev/null
@@ -1,13 +0,0 @@
-import UUIDV4 from "../utils/UUIDV4";
-
-export default class ListItem {
-	public readonly Id: string = UUIDV4();
-
-	public DisplayText: string;
-	public Data: any;
-
-	constructor(text: string = "", data: any = null) {
-		this.DisplayText = text;
-		this.Data = data;
-	}
-}
diff --git a/node_modules/@durtyfree/altv-nativeui/examples/nativeUI-example/includes/NativeUI/modules/Message.js b/node_modules/@durtyfree/altv-nativeui/examples/nativeUI-example/includes/NativeUI/modules/Message.js
deleted file mode 100644
index 82cab6c..0000000
--- a/node_modules/@durtyfree/altv-nativeui/examples/nativeUI-example/includes/NativeUI/modules/Message.js
+++ /dev/null
@@ -1,81 +0,0 @@
-import * as alt from 'alt-client';
-import Scaleform from '../utils/Scaleform';
-export default class Message {
-    static Initialize(scaleForm, transitionOutAnimName) {
-        this._transitionOutAnimName = transitionOutAnimName;
-        this._scaleform = new Scaleform(scaleForm);
-    }
-    static get IsVisible() {
-        return this._messageVisible;
-    }
-    static get Scaleform() {
-        return this._scaleform;
-    }
-    static Load() {
-        if (this._delayedTransitionInTimeout != null) {
-            alt.clearTimeout(this._delayedTransitionInTimeout);
-            this._delayedTransitionInTimeout = null;
-        }
-    }
-    static SetDelayedTransition(messageHandler, time) {
-        this._delayedTransitionInTimeout = alt.setTimeout(() => {
-            this._delayedTransitionInTimeout = null;
-            this.TransitionIn(messageHandler, time);
-        }, this._transitionOutTimeMs);
-    }
-    static ShowCustomShard(funcName, time = 5000, ...funcArgs) {
-        this.ShowComplexCustomShard(() => {
-            this._scaleform.callFunction(funcName, ...funcArgs);
-        }, time);
-    }
-    static ShowComplexCustomShard(messageHandler, time = 5000) {
-        this.Load();
-        if (this._messageVisible) {
-            this.TransitionOut();
-            this.SetDelayedTransition(() => messageHandler(), time);
-        }
-        else {
-            this.TransitionIn(messageHandler, time);
-        }
-    }
-    static TransitionOut() {
-        if (!this._messageVisible)
-            return;
-        if (this._transitionOutTimeout != null) {
-            alt.clearTimeout(this._transitionOutTimeout);
-            this._transitionOutTimeout = null;
-        }
-        if (this._transitionOutFinishedTimeout != null) {
-            alt.clearTimeout(this._transitionOutFinishedTimeout);
-            this._transitionOutFinishedTimeout = null;
-        }
-        this._scaleform.callFunction(this._transitionOutAnimName);
-        this._transitionOutFinishedTimeout = alt.setTimeout(() => {
-            this._messageVisible = false;
-            this._scaleform.recreate();
-        }, this._transitionOutTimeMs);
-    }
-    static TransitionIn(messageHandler, transitionOutTime = 500) {
-        this._messageVisible = true;
-        messageHandler();
-        this.SetTransitionOutTimer(transitionOutTime);
-    }
-    static SetTransitionOutTimer(time) {
-        this._transitionOutTimeout = alt.setTimeout(() => {
-            this._transitionOutTimeout = null;
-            this.TransitionOut();
-        }, time);
-    }
-    static Render() {
-        if (this._messageVisible) {
-            this._scaleform.render2D();
-        }
-    }
-}
-Message._messageVisible = false;
-Message._transitionOutTimeout = null;
-Message._transitionOutFinishedTimeout = null;
-Message._delayedTransitionInTimeout = null;
-Message._scaleform = null;
-Message._transitionOutTimeMs = 500;
-Message._transitionOutAnimName = null;
diff --git a/node_modules/@durtyfree/altv-nativeui/examples/nativeUI-example/includes/NativeUI/modules/Message.ts b/node_modules/@durtyfree/altv-nativeui/examples/nativeUI-example/includes/NativeUI/modules/Message.ts
deleted file mode 100644
index 8ed1742..0000000
--- a/node_modules/@durtyfree/altv-nativeui/examples/nativeUI-example/includes/NativeUI/modules/Message.ts
+++ /dev/null
@@ -1,95 +0,0 @@
-﻿import * as alt from 'alt-client';
-import Scaleform from '../utils/Scaleform';
-
-export default class Message {
-    private static _messageVisible: boolean = false;
-    private static _transitionOutTimeout: number = null;
-    private static _transitionOutFinishedTimeout: number = null;
-    private static _delayedTransitionInTimeout: number = null;
-    private static _scaleform: Scaleform = null;
-    private static _transitionOutTimeMs: number = 500;
-    private static _transitionOutAnimName: string = null;
-
-    protected static Initialize(scaleForm: string, transitionOutAnimName: string) {
-        this._transitionOutAnimName = transitionOutAnimName;
-        this._scaleform = new Scaleform(scaleForm);
-    }
-
-    public static get IsVisible(): boolean {
-        return this._messageVisible;
-    }
-
-    protected static get Scaleform(): Scaleform {
-        return this._scaleform;
-    }
-
-    private static Load() {
-        //Make sure there is no delayed transition existing
-        if (this._delayedTransitionInTimeout != null) {
-            alt.clearTimeout(this._delayedTransitionInTimeout);
-            this._delayedTransitionInTimeout = null;
-        }
-    }
-
-    //Delayed transition is needed when transition out got played before, this is the case when bigmessage is called before other one is finished showing.
-    private static SetDelayedTransition(messageHandler: { (): void }, time: number) {
-        this._delayedTransitionInTimeout = alt.setTimeout(() => {
-            this._delayedTransitionInTimeout = null;
-            this.TransitionIn(messageHandler, time);
-        }, this._transitionOutTimeMs);
-    }
-
-    public static ShowCustomShard(funcName: string, time: number = 5000, ...funcArgs: any[]): void {
-        this.ShowComplexCustomShard(() => {
-            this._scaleform.callFunction(funcName, ...funcArgs);
-        }, time);
-    }
-
-    public static ShowComplexCustomShard(messageHandler: { (): void }, time: number = 5000): void {
-        this.Load();
-        if (this._messageVisible) { //When a shard is already shown
-            this.TransitionOut();
-            this.SetDelayedTransition(() => messageHandler(), time);
-        }
-        else {
-            this.TransitionIn(messageHandler, time);
-        }
-    }
-
-    protected static TransitionOut() {
-        if (!this._messageVisible)
-            return;
-        if (this._transitionOutTimeout != null) {
-            alt.clearTimeout(this._transitionOutTimeout);
-            this._transitionOutTimeout = null;
-        }
-        if (this._transitionOutFinishedTimeout != null) {
-            alt.clearTimeout(this._transitionOutFinishedTimeout);
-            this._transitionOutFinishedTimeout = null;
-        }
-        this._scaleform.callFunction(this._transitionOutAnimName);
-        this._transitionOutFinishedTimeout = alt.setTimeout(() => {
-            this._messageVisible = false;
-            this._scaleform.recreate();
-        }, this._transitionOutTimeMs);
-    }
-
-    private static TransitionIn(messageHandler: { (): void }, transitionOutTime: number = 500) {
-        this._messageVisible = true;
-        messageHandler();
-        this.SetTransitionOutTimer(transitionOutTime);
-    }
-
-    private static SetTransitionOutTimer(time: number) {
-        this._transitionOutTimeout = alt.setTimeout(() => {
-            this._transitionOutTimeout = null;
-            this.TransitionOut();
-        }, time);
-    }
-
-    protected static Render() {
-        if (this._messageVisible) {
-            this._scaleform.render2D();
-        }
-    }
-}
\ No newline at end of file
diff --git a/node_modules/@durtyfree/altv-nativeui/examples/nativeUI-example/includes/NativeUI/modules/MidsizedMessage.js b/node_modules/@durtyfree/altv-nativeui/examples/nativeUI-example/includes/NativeUI/modules/MidsizedMessage.js
deleted file mode 100644
index c24a62c..0000000
--- a/node_modules/@durtyfree/altv-nativeui/examples/nativeUI-example/includes/NativeUI/modules/MidsizedMessage.js
+++ /dev/null
@@ -1,21 +0,0 @@
-import * as alt from 'alt-client';
-import Message from './Message';
-export default class MidsizedMessage extends Message {
-    static Initialize(scaleForm, transitionOutAnimName) {
-        super.Initialize(scaleForm, transitionOutAnimName);
-        alt.everyTick(() => this.Render());
-    }
-    static ShowMidsizedMessage(title, message = "", time = 5000) {
-        this.ShowCustomShard("SHOW_MIDSIZED_MESSAGE", time, title, message);
-    }
-    static ShowBridgesKnivesProgress(title, totalToDo, message, info, completed, time = 5000) {
-        this.ShowCustomShard("SHOW_BRIDGES_KNIVES_PROGRESS", time, title, totalToDo, message, info, completed);
-    }
-    static ShowCondensedShardMessage(title, message, bgColor, useDarkerShard, time = 5000) {
-        this.ShowCustomShard("SHOW_COND_SHARD_MESSAGE", time, title, message, bgColor, useDarkerShard);
-    }
-    static ShowMidsizedShardMessage(title, message, bgColor, useDarkerShard, useCondensedShard, time = 5000) {
-        this.ShowCustomShard("SHOW_SHARD_MIDSIZED_MESSAGE", time, title, message, bgColor, useDarkerShard, useCondensedShard);
-    }
-}
-MidsizedMessage.Initialize("MIDSIZED_MESSAGE", "SHARD_ANIM_OUT");
diff --git a/node_modules/@durtyfree/altv-nativeui/examples/nativeUI-example/includes/NativeUI/modules/MidsizedMessage.ts b/node_modules/@durtyfree/altv-nativeui/examples/nativeUI-example/includes/NativeUI/modules/MidsizedMessage.ts
deleted file mode 100644
index 678cd4b..0000000
--- a/node_modules/@durtyfree/altv-nativeui/examples/nativeUI-example/includes/NativeUI/modules/MidsizedMessage.ts
+++ /dev/null
@@ -1,27 +0,0 @@
-﻿import * as alt from 'alt-client';
-import HudColor from '../enums/HudColor';
-import Message from './Message';
-
-export default class MidsizedMessage extends Message {
-    public static Initialize(scaleForm: string, transitionOutAnimName: string) {
-        super.Initialize(scaleForm, transitionOutAnimName);
-        alt.everyTick(() => this.Render());
-    }
-
-    public static ShowMidsizedMessage(title: string, message: string = "", time: number = 5000): void {
-        this.ShowCustomShard("SHOW_MIDSIZED_MESSAGE", time, title, message);
-    }
-
-    public static ShowBridgesKnivesProgress(title: string, totalToDo: number, message: string, info: string, completed: number, time: number = 5000): void {
-        this.ShowCustomShard("SHOW_BRIDGES_KNIVES_PROGRESS", time, title, totalToDo, message, info, completed);
-    }
-
-    public static ShowCondensedShardMessage(title: string, message: string, bgColor: HudColor, useDarkerShard: boolean, time: number = 5000): void {
-        this.ShowCustomShard("SHOW_COND_SHARD_MESSAGE", time, title, message, bgColor, useDarkerShard);
-    }
-
-    public static ShowMidsizedShardMessage(title: string, message: string, bgColor: HudColor, useDarkerShard: boolean, useCondensedShard: boolean, time: number = 5000): void {
-        this.ShowCustomShard("SHOW_SHARD_MIDSIZED_MESSAGE", time, title, message, bgColor, useDarkerShard, useCondensedShard);
-    }
-}
-MidsizedMessage.Initialize("MIDSIZED_MESSAGE", "SHARD_ANIM_OUT");
\ No newline at end of file
diff --git a/node_modules/@durtyfree/altv-nativeui/examples/nativeUI-example/includes/NativeUI/modules/Rectangle.js b/node_modules/@durtyfree/altv-nativeui/examples/nativeUI-example/includes/NativeUI/modules/Rectangle.js
deleted file mode 100644
index fb65f5d..0000000
--- a/node_modules/@durtyfree/altv-nativeui/examples/nativeUI-example/includes/NativeUI/modules/Rectangle.js
+++ /dev/null
@@ -1,27 +0,0 @@
-import game from 'natives';
-import Point from "../utils/Point";
-import Size from "../utils/Size";
-import IElement from "./IElement";
-export default class Rectangle extends IElement {
-    constructor(pos, size, color) {
-        super();
-        this.Enabled = true;
-        this.Pos = pos;
-        this.Size = size;
-        this.Color = color;
-    }
-    Draw(pos, size, color) {
-        if (!pos)
-            pos = new Size(0, 0);
-        if (!size && !color) {
-            pos = new Point(this.Pos.X + pos.Width, this.Pos.Y + pos.Height);
-            size = this.Size;
-            color = this.Color;
-        }
-        const w = size.Width / 1280.0;
-        const h = size.Height / 720.0;
-        const x = pos.X / 1280.0 + w * 0.5;
-        const y = pos.Y / 720.0 + h * 0.5;
-        game.drawRect(x, y, w, h, color.R, color.G, color.B, color.A, false);
-    }
-}
diff --git a/node_modules/@durtyfree/altv-nativeui/examples/nativeUI-example/includes/NativeUI/modules/Rectangle.ts b/node_modules/@durtyfree/altv-nativeui/examples/nativeUI-example/includes/NativeUI/modules/Rectangle.ts
deleted file mode 100644
index 60bf62b..0000000
--- a/node_modules/@durtyfree/altv-nativeui/examples/nativeUI-example/includes/NativeUI/modules/Rectangle.ts
+++ /dev/null
@@ -1,34 +0,0 @@
-import game from 'natives';
-import Color from "../utils/Color";
-import Point from "../utils/Point";
-import Size from "../utils/Size";
-import IElement from "./IElement";
-
-export default class Rectangle extends IElement {
-	public Pos: Point;
-	public Size: Size;
-    public Color: Color;
-
-	constructor(pos: Point, size: Size, color: Color) {
-		super();
-		this.Enabled = true;
-		this.Pos = pos;
-		this.Size = size;
-		this.Color = color;
-	}
-
-    public Draw(pos: Point | Size, size: Size, color: Color) {
-		if (!pos) pos = new Size(0, 0);
-		if (!size && !color) {
-            pos = new Point(this.Pos.X + (pos as Size).Width, this.Pos.Y + (pos as Size).Height);
-			size = this.Size;
-			color = this.Color;
-		}
-		const w = size.Width / 1280.0;
-        const h = size.Height / 720.0;
-        const x = (pos as Point).X / 1280.0 + w * 0.5;
-        const y = (pos as Point).Y / 720.0 + h * 0.5;
-
-        game.drawRect(x, y, w, h, color.R, color.G, color.B, color.A, false);
-	}
-}
diff --git a/node_modules/@durtyfree/altv-nativeui/examples/nativeUI-example/includes/NativeUI/modules/ResRectangle.js b/node_modules/@durtyfree/altv-nativeui/examples/nativeUI-example/includes/NativeUI/modules/ResRectangle.js
deleted file mode 100644
index 6fd1616..0000000
--- a/node_modules/@durtyfree/altv-nativeui/examples/nativeUI-example/includes/NativeUI/modules/ResRectangle.js
+++ /dev/null
@@ -1,29 +0,0 @@
-import game from 'natives';
-import Point from "../utils/Point";
-import Size from "../utils/Size";
-import Rectangle from "./Rectangle";
-import Screen from "../utils/Screen";
-export default class ResRectangle extends Rectangle {
-    constructor(pos, size, color) {
-        super(pos, size, color);
-    }
-    Draw(pos, size, color) {
-        if (!pos)
-            pos = new Size();
-        if (pos && !size && !color) {
-            pos = new Point(this.Pos.X + pos.Width, this.Pos.Y + pos.Height);
-            size = this.Size;
-            color = this.Color;
-        }
-        const screenw = Screen.Width;
-        const screenh = Screen.Height;
-        const height = 1080.0;
-        const ratio = screenw / screenh;
-        const width = height * ratio;
-        const w = size.Width / width;
-        const h = size.Height / height;
-        const x = pos.X / width + w * 0.5;
-        const y = pos.Y / height + h * 0.5;
-        game.drawRect(x, y, w, h, color.R, color.G, color.B, color.A, false);
-    }
-}
diff --git a/node_modules/@durtyfree/altv-nativeui/examples/nativeUI-example/includes/NativeUI/modules/ResRectangle.ts b/node_modules/@durtyfree/altv-nativeui/examples/nativeUI-example/includes/NativeUI/modules/ResRectangle.ts
deleted file mode 100644
index bf92f13..0000000
--- a/node_modules/@durtyfree/altv-nativeui/examples/nativeUI-example/includes/NativeUI/modules/ResRectangle.ts
+++ /dev/null
@@ -1,38 +0,0 @@
-import game from 'natives';
-import Point from "../utils/Point";
-import Size from "../utils/Size";
-import Rectangle from "./Rectangle";
-import Screen from "../utils/Screen";
-import Color from '../utils/Color';
-
-export default class ResRectangle extends Rectangle {
-    constructor(pos: Point, size: Size, color: Color) {
-		super(pos, size, color);
-	}
-
-    public Draw(): void;
-    public Draw(offset: any): void;
-    public Draw(pos: Point | Size, size: Size, color: Color): void;
-
-    public Draw(pos?: Point | Size, size?: Size, color?: Color) {
-		if (!pos) pos = new Size();
-		if (pos && !size && !color) {
-            pos = new Point(this.Pos.X + (pos as Size).Width, this.Pos.Y + (pos as Size).Height);
-			size = this.Size;
-			color = this.Color;
-		}
-
-        const screenw = Screen.Width;
-		const screenh = Screen.Height;
-		const height = 1080.0;
-		const ratio = screenw / screenh;
-		const width = height * ratio;
-
-		const w = size.Width / width;
-		const h = size.Height / height;
-        const x = (pos as Point).X / width + w * 0.5;
-        const y = (pos as Point).Y / height + h * 0.5;
-
-        game.drawRect(x, y, w, h, color.R, color.G, color.B, color.A, false);
-	}
-}
diff --git a/node_modules/@durtyfree/altv-nativeui/examples/nativeUI-example/includes/NativeUI/modules/ResText.js b/node_modules/@durtyfree/altv-nativeui/examples/nativeUI-example/includes/NativeUI/modules/ResText.js
deleted file mode 100644
index 8b6bf27..0000000
--- a/node_modules/@durtyfree/altv-nativeui/examples/nativeUI-example/includes/NativeUI/modules/ResText.js
+++ /dev/null
@@ -1,82 +0,0 @@
-import * as alt from 'alt-client';
-import Alignment from "../enums/Alignment";
-import game from 'natives';
-import Color from "../utils/Color";
-import Point from "../utils/Point";
-import Size from "../utils/Size";
-import Text from "./Text";
-import Screen from "../utils/Screen";
-export default class ResText extends Text {
-    constructor(caption, pos, scale, color, font, centered) {
-        super(caption, pos, scale, color || new Color(255, 255, 255), font || 0, false);
-        this.TextAlignment = Alignment.Left;
-        this.Wrap = 0;
-        if (centered)
-            this.TextAlignment = centered;
-    }
-    get WordWrap() {
-        return new Size(this.Wrap, 0);
-    }
-    set WordWrap(value) {
-        this.Wrap = value.Width;
-    }
-    Draw(arg1, pos, scale, color, font, arg2, dropShadow, outline, wordWrap) {
-        let caption = arg1;
-        let centered = arg2;
-        let textAlignment = arg2;
-        if (!arg1)
-            arg1 = new Size(0, 0);
-        if (arg1 && !pos) {
-            textAlignment = this.TextAlignment;
-            caption = this.Caption;
-            pos = new Point(this.Pos.X + arg1.Width, this.Pos.Y + arg1.Height);
-            scale = this.Scale;
-            color = this.Color;
-            font = this.Font;
-            if (centered == true || centered == false) {
-                centered = this.Centered;
-            }
-            else {
-                centered = undefined;
-                dropShadow = this.DropShadow;
-                outline = this.Outline;
-                wordWrap = this.WordWrap;
-            }
-        }
-        const screenw = Screen.Width;
-        const screenh = Screen.Height;
-        const height = 1080.0;
-        const ratio = screenw / screenh;
-        const width = height * ratio;
-        const x = this.Pos.X / width;
-        const y = this.Pos.Y / height;
-        game.setTextFont(parseInt(font));
-        game.setTextScale(1.0, scale);
-        game.setTextColour(color.R, color.G, color.B, color.A);
-        if (centered !== undefined) {
-            game.setTextCentre(centered);
-        }
-        else {
-            if (dropShadow)
-                game.setTextDropshadow(2, 0, 0, 0, 0);
-            if (outline)
-                alt.logWarning("[NativeUI] ResText outline not working!");
-            switch (textAlignment) {
-                case Alignment.Centered:
-                    game.setTextCentre(true);
-                    break;
-                case Alignment.Right:
-                    game.setTextRightJustify(true);
-                    game.setTextWrap(0.0, x);
-                    break;
-            }
-            if (this.Wrap) {
-                const xsize = (this.Pos.X + this.Wrap) / width;
-                game.setTextWrap(x, xsize);
-            }
-        }
-        game.beginTextCommandDisplayText("CELL_EMAIL_BCON");
-        Text.AddLongString(caption);
-        game.endTextCommandDisplayText(x, y, 0);
-    }
-}
diff --git a/node_modules/@durtyfree/altv-nativeui/examples/nativeUI-example/includes/NativeUI/modules/ResText.ts b/node_modules/@durtyfree/altv-nativeui/examples/nativeUI-example/includes/NativeUI/modules/ResText.ts
deleted file mode 100644
index a3f81a2..0000000
--- a/node_modules/@durtyfree/altv-nativeui/examples/nativeUI-example/includes/NativeUI/modules/ResText.ts
+++ /dev/null
@@ -1,96 +0,0 @@
-import * as alt from 'alt-client';
-import Alignment from "../enums/Alignment";
-import game from 'natives';
-import Color from "../utils/Color";
-import Point from "../utils/Point";
-import Size from "../utils/Size";
-import Text from "./Text";
-import Screen from "../utils/Screen";
-
-export default class ResText extends Text {
-    public TextAlignment: Alignment = Alignment.Left;
-    public DropShadow: boolean;
-    public Outline: boolean;
-    public Wrap: number = 0;
-
-    public get WordWrap() {
-        return new Size(this.Wrap, 0);
-    }
-    public set WordWrap(value) {
-        this.Wrap = value.Width;
-    }
-
-    constructor(caption: string, pos: Point, scale: number, color?: Color, font?: number, centered?: Alignment) {
-        super(caption, pos, scale, color || new Color(255, 255, 255), font || 0, false);
-        if (centered) this.TextAlignment = centered;
-    }
-
-    public Draw(): void;
-    public Draw(offset: Size): void;
-    public Draw(caption: Size, pos: Point, scale: number, color: Color, font: string | number, arg2: any): void;
-
-    public Draw(arg1?: any, pos?: Point, scale?: number, color?: Color, font?: string | number, arg2?: any, dropShadow?: boolean, outline?: boolean, wordWrap?: Size) {
-        let caption = arg1;
-        let centered = arg2;
-        let textAlignment = arg2;
-        if (!arg1) arg1 = new Size(0, 0);
-
-        if (arg1 && !pos) {
-            textAlignment = this.TextAlignment;
-            caption = this.Caption;
-            pos = new Point(this.Pos.X + arg1.Width, this.Pos.Y + arg1.Height);
-            scale = this.Scale;
-            color = this.Color;
-            font = this.Font;
-            if (centered == true || centered == false) {
-                centered = this.Centered;
-            } else {
-                centered = undefined;
-                dropShadow = this.DropShadow;
-                outline = this.Outline;
-                wordWrap = this.WordWrap;
-            }
-        }
-
-        const screenw = Screen.Width;
-        const screenh = Screen.Height;
-
-        const height = 1080.0;
-        const ratio = screenw / screenh;
-        const width = height * ratio;
-
-        const x = this.Pos.X / width;
-        const y = this.Pos.Y / height;
-
-        game.setTextFont(parseInt(font as string));
-        game.setTextScale(1.0, scale);
-        game.setTextColour(color.R, color.G, color.B, color.A);
-
-        if (centered !== undefined) {
-            game.setTextCentre(centered);
-        } else {
-            if (dropShadow) game.setTextDropshadow(2, 0, 0, 0, 0);
-
-            if (outline) alt.logWarning("[NativeUI] ResText outline not working!");
-
-            switch (textAlignment) {
-                case Alignment.Centered:
-                    game.setTextCentre(true);
-                    break;
-                case Alignment.Right:
-                    game.setTextRightJustify(true);
-                    game.setTextWrap(0.0, x);
-                    break;
-            }
-
-            if (this.Wrap) {
-                const xsize = (this.Pos.X + this.Wrap) / width;
-                game.setTextWrap(x, xsize);
-            }
-        }
-
-        game.beginTextCommandDisplayText("CELL_EMAIL_BCON");
-        Text.AddLongString(caption as string);
-        game.endTextCommandDisplayText(x, y, 0);
-    }
-}
\ No newline at end of file
diff --git a/node_modules/@durtyfree/altv-nativeui/examples/nativeUI-example/includes/NativeUI/modules/Sprite.js b/node_modules/@durtyfree/altv-nativeui/examples/nativeUI-example/includes/NativeUI/modules/Sprite.js
deleted file mode 100644
index 3106ad1..0000000
--- a/node_modules/@durtyfree/altv-nativeui/examples/nativeUI-example/includes/NativeUI/modules/Sprite.js
+++ /dev/null
@@ -1,63 +0,0 @@
-import * as alt from 'alt-client';
-import game from 'natives';
-import Color from "../utils/Color";
-import Screen from "../utils/Screen";
-export default class Sprite {
-    constructor(textureDict, textureName, pos, size, heading = 0, color = new Color(255, 255, 255)) {
-        this.TextureDict = textureDict;
-        this.TextureName = textureName;
-        this.Pos = pos;
-        this.Size = size;
-        this.Heading = heading;
-        this.Color = color;
-        this.Visible = true;
-    }
-    LoadTextureDictionary() {
-        this.requestTextureDictPromise(this._textureDict).then((succ) => { });
-    }
-    requestTextureDictPromise(textureDict) {
-        return new Promise((resolve, reject) => {
-            game.requestStreamedTextureDict(textureDict, true);
-            let inter = alt.setInterval(() => {
-                if (game.hasStreamedTextureDictLoaded(textureDict)) {
-                    alt.clearInterval(inter);
-                    return resolve(true);
-                }
-            }, 10);
-        });
-    }
-    set TextureDict(v) {
-        this._textureDict = v;
-        if (!this.IsTextureDictionaryLoaded)
-            this.LoadTextureDictionary();
-    }
-    get TextureDict() {
-        return this._textureDict;
-    }
-    get IsTextureDictionaryLoaded() {
-        return game.hasStreamedTextureDictLoaded(this._textureDict);
-    }
-    Draw(textureDictionary, textureName, pos, size, heading, color, loadTexture) {
-        textureDictionary = textureDictionary || this.TextureDict;
-        textureName = textureName || this.TextureName;
-        pos = pos || this.Pos;
-        size = size || this.Size;
-        heading = heading || this.Heading;
-        color = color || this.Color;
-        loadTexture = loadTexture || true;
-        if (loadTexture) {
-            if (!game.hasStreamedTextureDictLoaded(textureDictionary))
-                game.requestStreamedTextureDict(textureDictionary, true);
-        }
-        const screenw = Screen.Width;
-        const screenh = Screen.Height;
-        const height = 1080.0;
-        const ratio = screenw / screenh;
-        const width = height * ratio;
-        const w = this.Size.Width / width;
-        const h = this.Size.Height / height;
-        const x = this.Pos.X / width + w * 0.5;
-        const y = this.Pos.Y / height + h * 0.5;
-        game.drawSprite(textureDictionary, textureName, x, y, w, h, heading, color.R, color.G, color.B, color.A, true);
-    }
-}
diff --git a/node_modules/@durtyfree/altv-nativeui/examples/nativeUI-example/includes/NativeUI/modules/Sprite.ts b/node_modules/@durtyfree/altv-nativeui/examples/nativeUI-example/includes/NativeUI/modules/Sprite.ts
deleted file mode 100644
index 8788b0d..0000000
--- a/node_modules/@durtyfree/altv-nativeui/examples/nativeUI-example/includes/NativeUI/modules/Sprite.ts
+++ /dev/null
@@ -1,82 +0,0 @@
-import * as alt from 'alt-client';
-import game from 'natives';
-import Color from "../utils/Color";
-import Point from "../utils/Point";
-import Size from "../utils/Size";
-import Screen from "../utils/Screen";
-
-export default class Sprite {
-    public TextureName: string;
-    public Pos: Point;
-    public Size: Size;
-    public Heading: number;
-    public Color: Color;
-    public Visible: boolean;
-
-    private _textureDict: string;
-
-    constructor(textureDict: string, textureName: string, pos: Point, size: Size, heading = 0, color = new Color(255, 255, 255)) {
-        this.TextureDict = textureDict;
-        this.TextureName = textureName;
-        this.Pos = pos;
-        this.Size = size;
-        this.Heading = heading;
-        this.Color = color;
-        this.Visible = true;
-    }
-
-    public LoadTextureDictionary() {
-        this.requestTextureDictPromise(this._textureDict).then((succ) => { });
-    }
-    private requestTextureDictPromise(textureDict: string) {
-        return new Promise((resolve, reject) => {
-            game.requestStreamedTextureDict(textureDict, true);
-            let inter = alt.setInterval(() => {
-                if (game.hasStreamedTextureDictLoaded(textureDict)) {
-                    alt.clearInterval(inter);
-                    return resolve(true);
-                }
-            }, 10);
-        });
-    }
-
-    public set TextureDict(v) {
-        this._textureDict = v;
-        if (!this.IsTextureDictionaryLoaded) this.LoadTextureDictionary();
-    }
-    public get TextureDict(): string {
-        return this._textureDict;
-    }
-
-    public get IsTextureDictionaryLoaded() {
-        return game.hasStreamedTextureDictLoaded(this._textureDict);
-    }
-
-    public Draw(textureDictionary?: string, textureName?: string, pos?: Point, size?: Size, heading?: number, color?: Color, loadTexture?: boolean) {
-        textureDictionary = textureDictionary || this.TextureDict;
-        textureName = textureName || this.TextureName;
-        pos = pos || this.Pos;
-        size = size || this.Size;
-        heading = heading || this.Heading;
-        color = color || this.Color;
-        loadTexture = loadTexture || true;
-
-        if (loadTexture) {
-            if (!game.hasStreamedTextureDictLoaded(textureDictionary))
-                game.requestStreamedTextureDict(textureDictionary, true);
-        }
-
-        const screenw = Screen.Width;
-        const screenh = Screen.Height;
-        const height = 1080.0;
-        const ratio = screenw / screenh;
-        const width = height * ratio;
-
-        const w = this.Size.Width / width;
-        const h = this.Size.Height / height;
-        const x = this.Pos.X / width + w * 0.5;
-        const y = this.Pos.Y / height + h * 0.5;
-
-        game.drawSprite(textureDictionary, textureName, x, y, w, h, heading, color.R, color.G, color.B, color.A, true);
-    }
-}
diff --git a/node_modules/@durtyfree/altv-nativeui/examples/nativeUI-example/includes/NativeUI/modules/Text.js b/node_modules/@durtyfree/altv-nativeui/examples/nativeUI-example/includes/NativeUI/modules/Text.js
deleted file mode 100644
index 72e5188..0000000
--- a/node_modules/@durtyfree/altv-nativeui/examples/nativeUI-example/includes/NativeUI/modules/Text.js
+++ /dev/null
@@ -1,51 +0,0 @@
-import game from 'natives';
-import Color from "../utils/Color";
-import Point from "../utils/Point";
-import IElement from "./IElement";
-export default class Text extends IElement {
-    constructor(caption, pos, scale, color, font, centered) {
-        super();
-        this.Caption = caption;
-        this.Pos = pos;
-        this.Scale = scale;
-        this.Color = color || new Color(255, 255, 255, 255);
-        this.Font = font || 0;
-        this.Centered = centered || false;
-    }
-    Draw(caption, pos, scale, color, font, centered) {
-        if (caption && !pos && !scale && !color && !font && !centered) {
-            pos = new Point(this.Pos.X + caption.Width, this.Pos.Y + caption.Height);
-            scale = this.Scale;
-            color = this.Color;
-            font = this.Font;
-            centered = this.Centered;
-        }
-        const x = pos.X / 1280.0;
-        const y = pos.Y / 720.0;
-        game.setTextFont(parseInt(font));
-        game.setTextScale(scale, scale);
-        game.setTextColour(color.R, color.G, color.B, color.A);
-        game.setTextCentre(centered);
-        game.beginTextCommandDisplayText("STRING");
-        Text.AddLongString(caption);
-        game.endTextCommandDisplayText(x, y, 0);
-    }
-    static AddLongString(text) {
-        if (!text.length)
-            return;
-        const maxStringLength = 99;
-        for (let i = 0, position; i < text.length; i += maxStringLength) {
-            let currentText = text.substr(i, i + maxStringLength);
-            let currentIndex = i;
-            if ((currentText.match(/~/g) || []).length % 2 !== 0) {
-                position = currentText.lastIndexOf('~');
-                i -= (maxStringLength - position);
-            }
-            else {
-                position = Math.min(maxStringLength, text.length - currentIndex);
-            }
-            game.addTextComponentSubstringPlayerName(text.substr(currentIndex, position));
-        }
-    }
-}
-export { Text };
diff --git a/node_modules/@durtyfree/altv-nativeui/examples/nativeUI-example/includes/NativeUI/modules/Text.ts b/node_modules/@durtyfree/altv-nativeui/examples/nativeUI-example/includes/NativeUI/modules/Text.ts
deleted file mode 100644
index c30abb6..0000000
--- a/node_modules/@durtyfree/altv-nativeui/examples/nativeUI-example/includes/NativeUI/modules/Text.ts
+++ /dev/null
@@ -1,78 +0,0 @@
-import game from 'natives';
-import Color from "../utils/Color";
-import Point from "../utils/Point";
-import IElement from "./IElement";
-import Size from '../utils/Size';
-
-export default class Text extends IElement {
-    public Caption: string;
-    public Pos: Point;
-    public Scale: number;
-    public Color: Color;
-    public Font: number;
-    public Centered: boolean;
-
-    constructor(caption: string, pos: Point, scale: number, color: Color, font: number, centered: boolean) {
-        super();
-        this.Caption = caption;
-        this.Pos = pos;
-        this.Scale = scale;
-        this.Color = color || new Color(255, 255, 255, 255);
-        this.Font = font || 0;
-        this.Centered = centered || false;
-    }
-
-    public Draw(caption: Size, pos: Point, scale: number, color: Color, font: string | number, centered: boolean) {
-        if (caption && !pos && !scale && !color && !font && !centered) {
-            pos = new Point(this.Pos.X + caption.Width, this.Pos.Y + caption.Height);
-            scale = this.Scale;
-            color = this.Color;
-            font = this.Font;
-            centered = this.Centered;
-        }
-        const x = pos.X / 1280.0;
-        const y = pos.Y / 720.0;
-
-        game.setTextFont(parseInt(font as string));
-        game.setTextScale(scale, scale);
-        game.setTextColour(color.R, color.G, color.B, color.A);
-        game.setTextCentre(centered);
-        game.beginTextCommandDisplayText("STRING");
-        Text.AddLongString(caption as any);
-        game.endTextCommandDisplayText(x, y, 0);
-    }
-
-    public static AddLongString(text: string) {
-        if (!text.length)
-            return;
-
-        const maxStringLength = 99;
-        const splittedArrayOfStrings = [];
-        
-        let i = 0;
-        let position;
-        let next;
-        let currentText;
-
-        while(i < text.length) {
-            next = (i + maxStringLength) > text.length ? text.length : i + maxStringLength;
-            position = next;
-            currentText = text.substring(i, position);
-            if(((currentText.match(/~/g)||[]).length % 2) !== 0 && (i + maxStringLength) <= text.length) {
-                position = currentText.lastIndexOf('~');
-                currentText = text.substring(i, i + position);
-                i = i + position;
-            } else {
-                i = next;
-            }
-            splittedArrayOfStrings.push(currentText);
-        }
-        for(const str of splittedArrayOfStrings) {
-            game.addTextComponentSubstringPlayerName(str);
-        }
-    }
-}
-
-export {
-    Text
-}
diff --git a/node_modules/@durtyfree/altv-nativeui/examples/nativeUI-example/includes/NativeUI/utils/Color.js b/node_modules/@durtyfree/altv-nativeui/examples/nativeUI-example/includes/NativeUI/utils/Color.js
deleted file mode 100644
index dd25226..0000000
--- a/node_modules/@durtyfree/altv-nativeui/examples/nativeUI-example/includes/NativeUI/utils/Color.js
+++ /dev/null
@@ -1,13 +0,0 @@
-export default class Color {
-    constructor(r, g, b, a = 255) {
-        this.R = r;
-        this.G = g;
-        this.B = b;
-        this.A = a;
-    }
-}
-Color.Empty = new Color(0, 0, 0, 0);
-Color.Transparent = new Color(0, 0, 0, 0);
-Color.Black = new Color(0, 0, 0, 255);
-Color.White = new Color(255, 255, 255, 255);
-Color.WhiteSmoke = new Color(245, 245, 245, 255);
diff --git a/node_modules/@durtyfree/altv-nativeui/examples/nativeUI-example/includes/NativeUI/utils/Color.ts b/node_modules/@durtyfree/altv-nativeui/examples/nativeUI-example/includes/NativeUI/utils/Color.ts
deleted file mode 100644
index e3a628e..0000000
--- a/node_modules/@durtyfree/altv-nativeui/examples/nativeUI-example/includes/NativeUI/utils/Color.ts
+++ /dev/null
@@ -1,19 +0,0 @@
-export default class Color {
-	public static Empty = new Color(0, 0, 0, 0);
-	public static Transparent = new Color(0, 0, 0, 0);
-	public static Black = new Color(0, 0, 0, 255);
-	public static White = new Color(255, 255, 255, 255);
-	public static WhiteSmoke = new Color(245, 245, 245, 255);
-
-	public R: number;
-	public G: number;
-	public B: number;
-    public A: number;
-
-    constructor(r: number, g: number, b: number, a = 255) {
-		this.R = r;
-		this.G = g;
-		this.B = b;
-		this.A = a;
-	}
-}
diff --git a/node_modules/@durtyfree/altv-nativeui/examples/nativeUI-example/includes/NativeUI/utils/Common.js b/node_modules/@durtyfree/altv-nativeui/examples/nativeUI-example/includes/NativeUI/utils/Common.js
deleted file mode 100644
index 610afe8..0000000
--- a/node_modules/@durtyfree/altv-nativeui/examples/nativeUI-example/includes/NativeUI/utils/Common.js
+++ /dev/null
@@ -1,6 +0,0 @@
-import game from 'natives';
-export default class Common {
-    static PlaySound(audioName, audioRef) {
-        game.playSound(-1, audioName, audioRef, false, 0, true);
-    }
-}
diff --git a/node_modules/@durtyfree/altv-nativeui/examples/nativeUI-example/includes/NativeUI/utils/Common.ts b/node_modules/@durtyfree/altv-nativeui/examples/nativeUI-example/includes/NativeUI/utils/Common.ts
deleted file mode 100644
index fcc99da..0000000
--- a/node_modules/@durtyfree/altv-nativeui/examples/nativeUI-example/includes/NativeUI/utils/Common.ts
+++ /dev/null
@@ -1,7 +0,0 @@
-import game from 'natives';
-
-export default class Common {
-    public static PlaySound(audioName: string, audioRef: string) {
-        game.playSound(-1, audioName, audioRef, false, 0, true);
-    }
-}
diff --git a/node_modules/@durtyfree/altv-nativeui/examples/nativeUI-example/includes/NativeUI/utils/LiteEvent.js b/node_modules/@durtyfree/altv-nativeui/examples/nativeUI-example/includes/NativeUI/utils/LiteEvent.js
deleted file mode 100644
index f214f95..0000000
--- a/node_modules/@durtyfree/altv-nativeui/examples/nativeUI-example/includes/NativeUI/utils/LiteEvent.js
+++ /dev/null
@@ -1,20 +0,0 @@
-export default class LiteEvent {
-    constructor() {
-        this.handlers = [];
-    }
-    on(handler) {
-        this.handlers.push(handler);
-    }
-    off(handler) {
-        this.handlers = this.handlers.filter(h => h !== handler);
-    }
-    emit(...args) {
-        this.handlers.slice(0).forEach(h => h(...args));
-    }
-    expose() {
-        return this;
-    }
-    count() {
-        return this.handlers.length;
-    }
-}
diff --git a/node_modules/@durtyfree/altv-nativeui/examples/nativeUI-example/includes/NativeUI/utils/LiteEvent.ts b/node_modules/@durtyfree/altv-nativeui/examples/nativeUI-example/includes/NativeUI/utils/LiteEvent.ts
deleted file mode 100644
index 62dc88c..0000000
--- a/node_modules/@durtyfree/altv-nativeui/examples/nativeUI-example/includes/NativeUI/utils/LiteEvent.ts
+++ /dev/null
@@ -1,28 +0,0 @@
-interface ILiteEvent {
-	on(handler: { (...args: any[]): void }): void;
-	off(handler: { (...args: any[]): void }): void;
-}
-
-export default class LiteEvent implements ILiteEvent {
-	private handlers: { (...args: any[]): void }[] = [];
-
-	public on(handler: { (...args: any[]): void }): void {
-		this.handlers.push(handler);
-	}
-
-	public off(handler: { (...args: any[]): void }): void {
-		this.handlers = this.handlers.filter(h => h !== handler);
-	}
-
-	public emit(...args: any[]) {
-		this.handlers.slice(0).forEach(h => h(...args));
-	}
-
-	public expose(): ILiteEvent {
-		return this;
-	}
-
-	public count(): number {
-		return this.handlers.length;
-	}
-}
diff --git a/node_modules/@durtyfree/altv-nativeui/examples/nativeUI-example/includes/NativeUI/utils/Point.js b/node_modules/@durtyfree/altv-nativeui/examples/nativeUI-example/includes/NativeUI/utils/Point.js
deleted file mode 100644
index 78ecab8..0000000
--- a/node_modules/@durtyfree/altv-nativeui/examples/nativeUI-example/includes/NativeUI/utils/Point.js
+++ /dev/null
@@ -1,25 +0,0 @@
-export default class Point {
-    constructor(x, y) {
-        this.X = 0;
-        this.Y = 0;
-        this.X = x;
-        this.Y = y;
-    }
-    static Parse(arg) {
-        if (typeof arg === "object") {
-            if (arg.length) {
-                return new Point(arg[0], arg[1]);
-            }
-            else if (arg.X && arg.Y) {
-                return new Point(arg.X, arg.Y);
-            }
-        }
-        else if (typeof arg === "string") {
-            if (arg.indexOf(",") !== -1) {
-                const arr = arg.split(",");
-                return new Point(parseFloat(arr[0]), parseFloat(arr[1]));
-            }
-        }
-        return new Point(0, 0);
-    }
-}
diff --git a/node_modules/@durtyfree/altv-nativeui/examples/nativeUI-example/includes/NativeUI/utils/Point.ts b/node_modules/@durtyfree/altv-nativeui/examples/nativeUI-example/includes/NativeUI/utils/Point.ts
deleted file mode 100644
index 829aad3..0000000
--- a/node_modules/@durtyfree/altv-nativeui/examples/nativeUI-example/includes/NativeUI/utils/Point.ts
+++ /dev/null
@@ -1,29 +0,0 @@
-export default class Point {
-	public X: number = 0;
-    public Y: number = 0;
-
-	constructor(x: number, y: number) {
-		this.X = x;
-		this.Y = y;
-	}
-
-    public static Parse(point: number[]): Point;
-    public static Parse(point: { X: number; Y: number }): Point;
-    public static Parse(arg: any): Point {
-		if (typeof arg === "object") {
-			if (arg.length) {
-				// Array
-				return new Point(arg[0], arg[1]);
-			} else if (arg.X && arg.Y) {
-				// Object
-				return new Point(arg.X, arg.Y);
-			}
-		} else if (typeof arg === "string") {
-			if (arg.indexOf(",") !== -1) {
-				const arr = arg.split(",");
-				return new Point(parseFloat(arr[0]), parseFloat(arr[1]));
-			}
-		}
-		return new Point(0, 0);
-	}
-}
diff --git a/node_modules/@durtyfree/altv-nativeui/examples/nativeUI-example/includes/NativeUI/utils/Scaleform.js b/node_modules/@durtyfree/altv-nativeui/examples/nativeUI-example/includes/NativeUI/utils/Scaleform.js
deleted file mode 100644
index e51f802..0000000
--- a/node_modules/@durtyfree/altv-nativeui/examples/nativeUI-example/includes/NativeUI/utils/Scaleform.js
+++ /dev/null
@@ -1,75 +0,0 @@
-import * as alt from 'alt-client';
-import * as game from 'natives';
-export default class Scaleform {
-    constructor(scaleForm) {
-        this._handle = 0;
-        this.scaleForm = scaleForm;
-        this._handle = game.requestScaleformMovie(this.scaleForm);
-    }
-    get handle() {
-        return this._handle;
-    }
-    get isValid() {
-        return this._handle != 0;
-    }
-    get isLoaded() {
-        return game.hasScaleformMovieLoaded(this._handle);
-    }
-    callFunctionHead(funcName, ...args) {
-        if (!this.isValid || !this.isLoaded)
-            return;
-        game.beginScaleformMovieMethod(this._handle, funcName);
-        args.forEach((arg) => {
-            switch (typeof arg) {
-                case "number":
-                    {
-                        if (Number(arg) === arg && arg % 1 !== 0) {
-                            game.scaleformMovieMethodAddParamFloat(arg);
-                        }
-                        else {
-                            game.scaleformMovieMethodAddParamInt(arg);
-                        }
-                    }
-                case "string":
-                    {
-                        game.scaleformMovieMethodAddParamPlayerNameString(arg);
-                        break;
-                    }
-                case "boolean":
-                    {
-                        game.scaleformMovieMethodAddParamBool(arg);
-                        break;
-                    }
-                default:
-                    {
-                        alt.logError(`Unknown argument type ${typeof arg} = ${arg.toString()} passed to scaleform with handle ${this._handle}`);
-                    }
-            }
-        });
-    }
-    callFunction(funcName, ...args) {
-        this.callFunctionHead(funcName, ...args);
-        game.endScaleformMovieMethod();
-    }
-    callFunctionReturn(funcName, ...args) {
-        this.callFunctionHead(funcName, ...args);
-        return game.endScaleformMovieMethodReturnValue();
-    }
-    render2D() {
-        if (!this.isValid || !this.isLoaded)
-            return;
-        game.drawScaleformMovieFullscreen(this._handle, 255, 255, 255, 255, 0);
-    }
-    recreate() {
-        if (!this.isValid || !this.isLoaded)
-            return;
-        game.setScaleformMovieAsNoLongerNeeded(this._handle);
-        this._handle = game.requestScaleformMovie(this.scaleForm);
-    }
-    destroy() {
-        if (!this.isValid)
-            return;
-        game.setScaleformMovieAsNoLongerNeeded(this._handle);
-        this._handle = 0;
-    }
-}
diff --git a/node_modules/@durtyfree/altv-nativeui/examples/nativeUI-example/includes/NativeUI/utils/Scaleform.ts b/node_modules/@durtyfree/altv-nativeui/examples/nativeUI-example/includes/NativeUI/utils/Scaleform.ts
deleted file mode 100644
index 76d8a8f..0000000
--- a/node_modules/@durtyfree/altv-nativeui/examples/nativeUI-example/includes/NativeUI/utils/Scaleform.ts
+++ /dev/null
@@ -1,90 +0,0 @@
-﻿import * as alt from 'alt-client';
-import * as game from 'natives';
-
-export default class Scaleform {
-    private _handle: number = 0;
-    private scaleForm: string;
-
-    public constructor(scaleForm: string) {
-        this.scaleForm = scaleForm;
-        this._handle = game.requestScaleformMovie(this.scaleForm);
-    }
-
-    public get handle(): number {
-        return this._handle;
-    }
-
-    public get isValid(): boolean {
-        return this._handle != 0;
-    }
-
-    public get isLoaded(): boolean {
-        return game.hasScaleformMovieLoaded(this._handle);
-    }
-
-    private callFunctionHead(funcName: string, ...args: any[]): void {
-        if (!this.isValid || !this.isLoaded)
-            return;
-
-        game.beginScaleformMovieMethod(this._handle, funcName);
-        //alt.log("Running func head " + funcName + "(" + args + ") on " + this.handle + " (" + this.scaleForm + ")");
-
-        args.forEach((arg: any) => {
-            switch (typeof arg) {
-                case "number":
-                    {
-                        if (Number(arg) === arg && arg % 1 !== 0) {
-                            game.scaleformMovieMethodAddParamFloat(arg);
-                        }
-                        else {
-                            game.scaleformMovieMethodAddParamInt(arg);
-                        }
-                    }
-                case "string":
-                    {
-                        game.scaleformMovieMethodAddParamPlayerNameString(arg as string);
-                        break;
-                    }
-                case "boolean":
-                    {
-                        game.scaleformMovieMethodAddParamBool(arg);
-                        break;
-                    }
-                default:
-                    {
-                        alt.logError(`Unknown argument type ${typeof arg} = ${arg.toString()} passed to scaleform with handle ${this._handle}`);
-                    }
-            }
-        });
-    }
-
-    public callFunction(funcName: string, ...args: any[]): void {
-        this.callFunctionHead(funcName, ...args);
-        game.endScaleformMovieMethod();
-    }
-
-    public callFunctionReturn(funcName: string, ...args: any[]): number {
-        this.callFunctionHead(funcName, ...args);
-        return game.endScaleformMovieMethodReturnValue();
-    }
-
-    public render2D(): void {
-        if (!this.isValid || !this.isLoaded)
-            return;
-        game.drawScaleformMovieFullscreen(this._handle, 255, 255, 255, 255, 0);
-    }
-
-    public recreate(): void {
-        if (!this.isValid || !this.isLoaded)
-            return;
-        game.setScaleformMovieAsNoLongerNeeded(this._handle);
-        this._handle = game.requestScaleformMovie(this.scaleForm);
-    }
-
-    public destroy(): void {
-        if (!this.isValid)
-            return;
-        game.setScaleformMovieAsNoLongerNeeded(this._handle);
-        this._handle = 0;
-    }
-}
\ No newline at end of file
diff --git a/node_modules/@durtyfree/altv-nativeui/examples/nativeUI-example/includes/NativeUI/utils/Screen.js b/node_modules/@durtyfree/altv-nativeui/examples/nativeUI-example/includes/NativeUI/utils/Screen.js
deleted file mode 100644
index 1e4d310..0000000
--- a/node_modules/@durtyfree/altv-nativeui/examples/nativeUI-example/includes/NativeUI/utils/Screen.js
+++ /dev/null
@@ -1,56 +0,0 @@
-import * as alt from 'alt-client';
-import game from 'natives';
-import Size from "./Size";
-import Text from '../modules/Text';
-const gameScreen = game.getActiveScreenResolution(0, 0);
-export default class Screen {
-    static get ResolutionMaintainRatio() {
-        const ratio = Screen.Width / Screen.Height;
-        const width = 1080.0 * ratio;
-        return new Size(width, 1080.0);
-    }
-    static MousePosition(relative = false) {
-        const res = Screen.ResolutionMaintainRatio;
-        const cursor = alt.getCursorPos();
-        let [mouseX, mouseY] = [cursor.x, cursor.y];
-        if (relative)
-            [mouseX, mouseY] = [cursor.x / res.Width, cursor.y / res.Height];
-        return {
-            X: mouseX,
-            Y: mouseY
-        };
-    }
-    static IsMouseInBounds(topLeft, boxSize) {
-        const mousePosition = Screen.MousePosition();
-        return (mousePosition.X >= topLeft.X &&
-            mousePosition.X <= topLeft.X + boxSize.Width &&
-            (mousePosition.Y > topLeft.Y && mousePosition.Y < topLeft.Y + boxSize.Height));
-    }
-    static GetTextWidth(text, font, scale) {
-        game.beginTextCommandGetWidth("CELL_EMAIL_BCON");
-        Text.AddLongString(text);
-        game.setTextFont(font);
-        game.setTextScale(1.0, scale);
-        const width = game.endTextCommandGetWidth(true);
-        const res = Screen.ResolutionMaintainRatio;
-        return res.Width * width;
-    }
-    static GetLineCount(text, position, font, scale, wrap) {
-        game.beginTextCommandLineCount("CELL_EMAIL_BCON");
-        Text.AddLongString(text);
-        const res = Screen.ResolutionMaintainRatio;
-        const x = position.X / res.Width;
-        const y = position.Y / res.Height;
-        game.setTextFont(font);
-        game.setTextScale(1.0, scale);
-        if (wrap > 0) {
-            const start = position.X / res.Width;
-            const end = start + (wrap / res.Width);
-            game.setTextWrap(x, end);
-        }
-        let lineCount = game.endTextCommandLineCount(x, y);
-        return lineCount;
-    }
-}
-Screen.Width = gameScreen[1];
-Screen.Height = gameScreen[2];
diff --git a/node_modules/@durtyfree/altv-nativeui/examples/nativeUI-example/includes/NativeUI/utils/Screen.ts b/node_modules/@durtyfree/altv-nativeui/examples/nativeUI-example/includes/NativeUI/utils/Screen.ts
deleted file mode 100644
index fb8e080..0000000
--- a/node_modules/@durtyfree/altv-nativeui/examples/nativeUI-example/includes/NativeUI/utils/Screen.ts
+++ /dev/null
@@ -1,88 +0,0 @@
-import * as alt from 'alt-client';
-import game from 'natives';
-import Font from "../enums/Font";
-import Point from "./Point";
-import Size from "./Size";
-import Text from '../modules/Text';
-
-const gameScreen = game.getActiveScreenResolution(0, 0);
-
-export default class Screen {
-    public static Width: number = gameScreen[1];
-    public static Height: number = gameScreen[2];
-
-    public static get ResolutionMaintainRatio(): Size {
-        const ratio = Screen.Width / Screen.Height;
-        const width = 1080.0 * ratio;
-
-        return new Size(width, 1080.0);
-    }
-
-    public static MousePosition(relative: boolean = false): { X: number; Y: number } {
-        const res = Screen.ResolutionMaintainRatio;
-        const cursor: { x: number; y: number; } = alt.getCursorPos() as { x: number; y: number; };
-        let [mouseX, mouseY] = [cursor.x, cursor.y];
-        if (relative)
-            [mouseX, mouseY] = [cursor.x / res.Width, cursor.y / res.Height];
-        return {
-            X: mouseX,
-            Y: mouseY
-        };
-    }
-
-    public static IsMouseInBounds(topLeft: Point, boxSize: Size) {
-        const mousePosition = Screen.MousePosition();
-        return (
-            mousePosition.X >= topLeft.X &&
-            mousePosition.X <= topLeft.X + boxSize.Width &&
-            (mousePosition.Y > topLeft.Y && mousePosition.Y < topLeft.Y + boxSize.Height)
-        );
-    }
-
-    public static GetTextWidth(text: string, font: Font, scale: number): number {
-        // Start by requesting the game to start processing a width measurement
-        game.beginTextCommandGetWidth("CELL_EMAIL_BCON");
-        // Add the text string
-        Text.AddLongString(text);
-
-        // Set the properties for the text
-        game.setTextFont(font);
-        game.setTextScale(1.0, scale);
-
-        // Ask the game for the relative string width
-        const width: number = game.endTextCommandGetWidth(true);
-        // And return the literal result
-        const res = Screen.ResolutionMaintainRatio;
-        return res.Width * width;
-    }
-
-    public static GetLineCount(text: string, position: Point, font: Font, scale: number, wrap: number): number {
-        // Tell the game that we are going to request the number of lines
-        game.beginTextCommandLineCount("CELL_EMAIL_BCON");
-        // Add the text that has been sent to us
-        Text.AddLongString(text);
-
-        // Get the resolution with the correct aspect ratio
-        const res: Size = Screen.ResolutionMaintainRatio;
-        // Calculate the x and y positions
-        const x: number = position.X / res.Width;
-        const y: number = position.Y / res.Height;
-
-        // Set the properties for the text
-        game.setTextFont(font);
-        game.setTextScale(1.0, scale);
-
-        // If there is some text wrap to add
-        if (wrap > 0) {
-            // Calculate the wrap size
-            const start: number = position.X / res.Width;
-            const end: number = start + (wrap / res.Width);
-            // And apply it
-            game.setTextWrap(x, end);
-        }
-
-        // Finally, return the number of lines being made by the string  
-        let lineCount = game.endTextCommandLineCount(x, y);
-        return lineCount;
-    }
-}
\ No newline at end of file
diff --git a/node_modules/@durtyfree/altv-nativeui/examples/nativeUI-example/includes/NativeUI/utils/Size.js b/node_modules/@durtyfree/altv-nativeui/examples/nativeUI-example/includes/NativeUI/utils/Size.js
deleted file mode 100644
index 1ae11e5..0000000
--- a/node_modules/@durtyfree/altv-nativeui/examples/nativeUI-example/includes/NativeUI/utils/Size.js
+++ /dev/null
@@ -1,6 +0,0 @@
-export default class Size {
-    constructor(w = 0, h = 0) {
-        this.Width = w;
-        this.Height = h;
-    }
-}
diff --git a/node_modules/@durtyfree/altv-nativeui/examples/nativeUI-example/includes/NativeUI/utils/Size.ts b/node_modules/@durtyfree/altv-nativeui/examples/nativeUI-example/includes/NativeUI/utils/Size.ts
deleted file mode 100644
index ba47222..0000000
--- a/node_modules/@durtyfree/altv-nativeui/examples/nativeUI-example/includes/NativeUI/utils/Size.ts
+++ /dev/null
@@ -1,9 +0,0 @@
-export default class Size {
-	public Width: number;
-    public Height: number;
-
-	constructor(w: number = 0, h: number = 0) {
-		this.Width = w;
-		this.Height = h;
-	}
-}
diff --git a/node_modules/@durtyfree/altv-nativeui/examples/nativeUI-example/includes/NativeUI/utils/UUIDV4.js b/node_modules/@durtyfree/altv-nativeui/examples/nativeUI-example/includes/NativeUI/utils/UUIDV4.js
deleted file mode 100644
index 8a65d2c..0000000
--- a/node_modules/@durtyfree/altv-nativeui/examples/nativeUI-example/includes/NativeUI/utils/UUIDV4.js
+++ /dev/null
@@ -1,24 +0,0 @@
-export default function UUIDV4() {
-    let uuid = "";
-    let ii;
-    for (ii = 0; ii < 32; ii += 1) {
-        switch (ii) {
-            case 8:
-            case 20:
-                uuid += "-";
-                uuid += ((Math.random() * 16) | 0).toString(16);
-                break;
-            case 12:
-                uuid += "-";
-                uuid += "4";
-                break;
-            case 16:
-                uuid += "-";
-                uuid += ((Math.random() * 4) | 8).toString(16);
-                break;
-            default:
-                uuid += ((Math.random() * 16) | 0).toString(16);
-        }
-    }
-    return uuid;
-}
diff --git a/node_modules/@durtyfree/altv-nativeui/examples/nativeUI-example/includes/NativeUI/utils/UUIDV4.ts b/node_modules/@durtyfree/altv-nativeui/examples/nativeUI-example/includes/NativeUI/utils/UUIDV4.ts
deleted file mode 100644
index a781d41..0000000
--- a/node_modules/@durtyfree/altv-nativeui/examples/nativeUI-example/includes/NativeUI/utils/UUIDV4.ts
+++ /dev/null
@@ -1,25 +0,0 @@
-export default function UUIDV4(): string {
-    let uuid: string = "";
-    let ii: number;
-
-	for (ii = 0; ii < 32; ii += 1) {
-		switch (ii) {
-			case 8:
-			case 20:
-				uuid += "-";
-				uuid += ((Math.random() * 16) | 0).toString(16);
-				break;
-			case 12:
-				uuid += "-";
-				uuid += "4";
-				break;
-			case 16:
-				uuid += "-";
-				uuid += ((Math.random() * 4) | 8).toString(16);
-				break;
-			default:
-				uuid += ((Math.random() * 16) | 0).toString(16);
-		}
-	}
-	return uuid;
-}
diff --git a/node_modules/@durtyfree/altv-nativeui/examples/nativeUI-example/resource.cfg b/node_modules/@durtyfree/altv-nativeui/examples/nativeUI-example/resource.cfg
deleted file mode 100644
index 3cf6282..0000000
--- a/node_modules/@durtyfree/altv-nativeui/examples/nativeUI-example/resource.cfg
+++ /dev/null
@@ -1,9 +0,0 @@
-type: js
-
-main: _keep.mjs
-client-main: client.js
-
-client-files: [
-  client.js,
-  includes/*,
-]
diff --git a/node_modules/@durtyfree/altv-nativeui/rollup.config.js b/node_modules/@durtyfree/altv-nativeui/rollup.config.js
deleted file mode 100644
index 755e9ae..0000000
--- a/node_modules/@durtyfree/altv-nativeui/rollup.config.js
+++ /dev/null
@@ -1,27 +0,0 @@
-import {resolve} from "path";
-import typescript from "rollup-plugin-typescript2";
-import {terser} from "rollup-plugin-terser";
-
-const input = resolve(__dirname, "src/NativeUi.ts");
-
-const file = (min) => {
-    const path = `dist/nativeui/nativeui${min ? ".min" : ""}.js`
-    return {
-        file: resolve(__dirname, path),
-        name: "NativeUI",
-        format: "es",
-        plugins: [ min ? terser() : void 0 ]
-    }
-}
-
-export default {
-    input,
-    output: [
-        file(false),
-        file(true)
-    ],
-    external: ["alt-client", "natives"],
-    plugins: [
-        typescript({useTsconfigDeclarationDir: true, abortOnError: false})
-    ]
-}; 
\ No newline at end of file
diff --git a/node_modules/@durtyfree/altv-nativeui/src/NativeUi.d.ts b/node_modules/@durtyfree/altv-nativeui/src/NativeUi.d.ts
new file mode 100644
index 0000000..8e0c4ef
--- /dev/null
+++ b/node_modules/@durtyfree/altv-nativeui/src/NativeUi.d.ts
@@ -0,0 +1,141 @@
+import BadgeStyle from "./enums/BadgeStyle";
+import Font from "./enums/Font";
+import Alignment from './enums/Alignment';
+import Control from './enums/Control';
+import HudColor from './enums/HudColor';
+import ChangeDirection from './enums/ChangeDirection';
+import UIMenuCheckboxItem from "./items/UIMenuCheckboxItem";
+import UIMenuItem from "./items/UIMenuItem";
+import UIMenuListItem from "./items/UIMenuListItem";
+import UIMenuAutoListItem from "./items/UIMenuAutoListItem";
+import UIMenuSliderItem from "./items/UIMenuSliderItem";
+import ItemsCollection from "./modules/ItemsCollection";
+import ListItem from "./modules/ListItem";
+import ResRectangle from "./modules/ResRectangle";
+import ResText from "./modules/ResText";
+import Sprite from "./modules/Sprite";
+import Color from "./utils/Color";
+import LiteEvent from "./utils/LiteEvent";
+import Point from "./utils/Point";
+import Size from "./utils/Size";
+import InstructionalButton from './modules/InstructionalButton';
+import BigMessage from './modules/BigMessage';
+import MidsizedMessage from './modules/MidsizedMessage';
+import UIMenuDynamicListItem from './items/UIMenuDynamicListItem';
+export default class NativeUI {
+    private _visible;
+    private _counterPretext;
+    private _counterOverride;
+    private _spriteLibrary;
+    private _spriteName;
+    private _offset;
+    private _lastUpDownNavigation;
+    private _lastLeftRightNavigation;
+    private _extraOffset;
+    private _buttonsEnabled;
+    private _justOpened;
+    private _justOpenedFromPool;
+    private _justClosedFromPool;
+    private _poolOpening;
+    private _safezoneOffset;
+    private _activeItem;
+    private _maxItemsOnScreen;
+    private _minItem;
+    private _maxItem;
+    private _mouseEdgeEnabled;
+    private _bannerSprite;
+    private _bannerRectangle;
+    private _recalculateDescriptionNextFrame;
+    private readonly _instructionalButtons;
+    private readonly _instructionalButtonsScaleform;
+    private readonly _defaultTitleScale;
+    private readonly _maxMenuItems;
+    private readonly _mainMenu;
+    private readonly _upAndDownSprite;
+    private readonly _titleResText;
+    private readonly _subtitleResText;
+    private readonly _extraRectangleUp;
+    private readonly _extraRectangleDown;
+    private readonly _descriptionBar;
+    private readonly _descriptionRectangle;
+    private readonly _descriptionText;
+    private readonly _counterText;
+    private readonly _background;
+    readonly Id: string;
+    readonly SelectTextLocalized: string;
+    readonly BackTextLocalized: string;
+    WidthOffset: number;
+    ParentMenu: NativeUI;
+    ParentItem: UIMenuItem;
+    Children: Map<string, NativeUI>;
+    MouseControlsEnabled: boolean;
+    CloseableByUser: boolean;
+    AUDIO_LIBRARY: string;
+    AUDIO_UPDOWN: string;
+    AUDIO_LEFTRIGHT: string;
+    AUDIO_SELECT: string;
+    AUDIO_BACK: string;
+    AUDIO_ERROR: string;
+    MenuItems: (UIMenuItem | UIMenuListItem | UIMenuAutoListItem | UIMenuDynamicListItem | UIMenuSliderItem | UIMenuCheckboxItem)[];
+    readonly IndexChange: LiteEvent;
+    readonly ListChange: LiteEvent;
+    readonly AutoListChange: LiteEvent;
+    readonly DynamicListChange: LiteEvent;
+    readonly SliderChange: LiteEvent;
+    readonly CheckboxChange: LiteEvent;
+    readonly ItemSelect: LiteEvent;
+    readonly MenuOpen: LiteEvent;
+    readonly MenuClose: LiteEvent;
+    readonly MenuChange: LiteEvent;
+    GetSpriteBanner(): Sprite;
+    GetRectangleBanner(): ResRectangle;
+    GetTitle(): ResText;
+    get MaxItemsVisible(): number;
+    set MaxItemsVisible(value: number);
+    get Title(): string;
+    set Title(text: string);
+    get GetSubTitle(): ResText;
+    get SubTitle(): string;
+    set SubTitle(text: string);
+    get Visible(): boolean;
+    set Visible(toggle: boolean);
+    get CurrentSelection(): number;
+    set CurrentSelection(v: number);
+    constructor(title: string, subtitle: string, offset: Point, spriteLibrary?: string, spriteName?: string);
+    DisableInstructionalButtons(disable: boolean): void;
+    AddInstructionalButton(button: InstructionalButton): void;
+    SetSpriteBannerType(spriteBanner: Sprite): void;
+    SetRectangleBannerType(rectangle: ResRectangle): void;
+    AddSpriteBannerType(spriteBanner: Sprite): void;
+    SetNoBannerType(): void;
+    RemoveInstructionalButton(button: InstructionalButton): void;
+    private RecalculateDescriptionPosition;
+    SetMenuWidthOffset(widthOffset: number): void;
+    AddItem(item: UIMenuItem): void;
+    RemoveItem(item: UIMenuItem): void;
+    RefreshIndex(): void;
+    Clear(): void;
+    Open(): void;
+    private CleanUp;
+    Close(closeChildren?: boolean): void;
+    GoLeft(): void;
+    GoRight(): void;
+    SelectItem(): void;
+    HasCurrentSelectionChildren(): boolean;
+    IsMouseInListItemArrows(item: UIMenuItem, topLeft: Point, safezone: any): 1 | 2 | 0;
+    ProcessMouse(): void;
+    ProcessControl(): void;
+    GoUpOverflow(): void;
+    GoUp(): void;
+    GoDownOverflow(): void;
+    GoDown(): void;
+    GoBack(): void;
+    BindMenuToItem(menuToBind: NativeUI, itemToBindTo: UIMenuItem): void;
+    AddSubMenu(subMenu: NativeUI, itemToBindTo: UIMenuItem): void;
+    ReleaseMenuFromItem(releaseFrom: UIMenuItem): boolean;
+    UpdateDescriptionCaption(): void;
+    CalculateDescription(): void;
+    UpdateScaleform(): void;
+    private render;
+}
+export { NativeUI as Menu, UIMenuItem, UIMenuListItem, UIMenuAutoListItem, UIMenuDynamicListItem, UIMenuCheckboxItem, UIMenuSliderItem, BadgeStyle, ChangeDirection, Font, Alignment, Control, HudColor, Sprite, ResRectangle, InstructionalButton, Point, Size, Color, ItemsCollection, ListItem, BigMessage, MidsizedMessage };
diff --git a/node_modules/@durtyfree/altv-nativeui/src/enums/Alignment.d.ts b/node_modules/@durtyfree/altv-nativeui/src/enums/Alignment.d.ts
new file mode 100644
index 0000000..e0223dd
--- /dev/null
+++ b/node_modules/@durtyfree/altv-nativeui/src/enums/Alignment.d.ts
@@ -0,0 +1,6 @@
+export declare enum Alignment {
+    Left = 0,
+    Centered = 1,
+    Right = 2
+}
+export default Alignment;
diff --git a/node_modules/@durtyfree/altv-nativeui/src/enums/BadgeStyle.d.ts b/node_modules/@durtyfree/altv-nativeui/src/enums/BadgeStyle.d.ts
new file mode 100644
index 0000000..63b833d
--- /dev/null
+++ b/node_modules/@durtyfree/altv-nativeui/src/enums/BadgeStyle.d.ts
@@ -0,0 +1,34 @@
+declare enum BadgeStyle {
+    None = 0,
+    BronzeMedal = 1,
+    GoldMedal = 2,
+    SilverMedal = 3,
+    Alert = 4,
+    Crown = 5,
+    Ammo = 6,
+    Armour = 7,
+    Barber = 8,
+    Clothes = 9,
+    Franklin = 10,
+    Bike = 11,
+    Car = 12,
+    Gun = 13,
+    Heart = 14,
+    Makeup = 15,
+    Mask = 16,
+    Michael = 17,
+    Star = 18,
+    Tatoo = 19,
+    Trevor = 20,
+    Lock = 21,
+    Tick = 22,
+    Sale = 23,
+    ArrowLeft = 24,
+    ArrowRight = 25,
+    Audio1 = 26,
+    Audio2 = 27,
+    Audio3 = 28,
+    AudioInactive = 29,
+    AudioMute = 30
+}
+export default BadgeStyle;
diff --git a/node_modules/@durtyfree/altv-nativeui/src/enums/ChangeDirection.d.ts b/node_modules/@durtyfree/altv-nativeui/src/enums/ChangeDirection.d.ts
new file mode 100644
index 0000000..2d26443
--- /dev/null
+++ b/node_modules/@durtyfree/altv-nativeui/src/enums/ChangeDirection.d.ts
@@ -0,0 +1,5 @@
+declare enum ChangeDirection {
+    Left = 0,
+    Right = 1
+}
+export default ChangeDirection;
diff --git a/node_modules/@durtyfree/altv-nativeui/src/enums/Control.d.ts b/node_modules/@durtyfree/altv-nativeui/src/enums/Control.d.ts
new file mode 100644
index 0000000..ef4537b
--- /dev/null
+++ b/node_modules/@durtyfree/altv-nativeui/src/enums/Control.d.ts
@@ -0,0 +1,349 @@
+declare enum Control {
+    NextCamera = 0,
+    LookLeftRight = 1,
+    LookUpDown = 2,
+    LookUpOnly = 3,
+    LookDownOnly = 4,
+    LookLeftOnly = 5,
+    LookRightOnly = 6,
+    CinematicSlowMo = 7,
+    FlyUpDown = 8,
+    FlyLeftRight = 9,
+    ScriptedFlyZUp = 10,
+    ScriptedFlyZDown = 11,
+    WeaponWheelUpDown = 12,
+    WeaponWheelLeftRight = 13,
+    WeaponWheelNext = 14,
+    WeaponWheelPrev = 15,
+    SelectNextWeapon = 16,
+    SelectPrevWeapon = 17,
+    SkipCutscene = 18,
+    CharacterWheel = 19,
+    MultiplayerInfo = 20,
+    Sprint = 21,
+    Jump = 22,
+    Enter = 23,
+    Attack = 24,
+    Aim = 25,
+    LookBehind = 26,
+    Phone = 27,
+    SpecialAbility = 28,
+    SpecialAbilitySecondary = 29,
+    MoveLeftRight = 30,
+    MoveUpDown = 31,
+    MoveUpOnly = 32,
+    MoveDownOnly = 33,
+    MoveLeftOnly = 34,
+    MoveRightOnly = 35,
+    Duck = 36,
+    SelectWeapon = 37,
+    Pickup = 38,
+    SniperZoom = 39,
+    SniperZoomInOnly = 40,
+    SniperZoomOutOnly = 41,
+    SniperZoomInSecondary = 42,
+    SniperZoomOutSecondary = 43,
+    Cover = 44,
+    Reload = 45,
+    Talk = 46,
+    Detonate = 47,
+    HUDSpecial = 48,
+    Arrest = 49,
+    AccurateAim = 50,
+    Context = 51,
+    ContextSecondary = 52,
+    WeaponSpecial = 53,
+    WeaponSpecial2 = 54,
+    Dive = 55,
+    DropWeapon = 56,
+    DropAmmo = 57,
+    ThrowGrenade = 58,
+    VehicleMoveLeftRight = 59,
+    VehicleMoveUpDown = 60,
+    VehicleMoveUpOnly = 61,
+    VehicleMoveDownOnly = 62,
+    VehicleMoveLeftOnly = 63,
+    VehicleMoveRightOnly = 64,
+    VehicleSpecial = 65,
+    VehicleGunLeftRight = 66,
+    VehicleGunUpDown = 67,
+    VehicleAim = 68,
+    VehicleAttack = 69,
+    VehicleAttack2 = 70,
+    VehicleAccelerate = 71,
+    VehicleBrake = 72,
+    VehicleDuck = 73,
+    VehicleHeadlight = 74,
+    VehicleExit = 75,
+    VehicleHandbrake = 76,
+    VehicleHotwireLeft = 77,
+    VehicleHotwireRight = 78,
+    VehicleLookBehind = 79,
+    VehicleCinCam = 80,
+    VehicleNextRadio = 81,
+    VehiclePrevRadio = 82,
+    VehicleNextRadioTrack = 83,
+    VehiclePrevRadioTrack = 84,
+    VehicleRadioWheel = 85,
+    VehicleHorn = 86,
+    VehicleFlyThrottleUp = 87,
+    VehicleFlyThrottleDown = 88,
+    VehicleFlyYawLeft = 89,
+    VehicleFlyYawRight = 90,
+    VehiclePassengerAim = 91,
+    VehiclePassengerAttack = 92,
+    VehicleSpecialAbilityFranklin = 93,
+    VehicleStuntUpDown = 94,
+    VehicleCinematicUpDown = 95,
+    VehicleCinematicUpOnly = 96,
+    VehicleCinematicDownOnly = 97,
+    VehicleCinematicLeftRight = 98,
+    VehicleSelectNextWeapon = 99,
+    VehicleSelectPrevWeapon = 100,
+    VehicleRoof = 101,
+    VehicleJump = 102,
+    VehicleGrapplingHook = 103,
+    VehicleShuffle = 104,
+    VehicleDropProjectile = 105,
+    VehicleMouseControlOverride = 106,
+    VehicleFlyRollLeftRight = 107,
+    VehicleFlyRollLeftOnly = 108,
+    VehicleFlyRollRightOnly = 109,
+    VehicleFlyPitchUpDown = 110,
+    VehicleFlyPitchUpOnly = 111,
+    VehicleFlyPitchDownOnly = 112,
+    VehicleFlyUnderCarriage = 113,
+    VehicleFlyAttack = 114,
+    VehicleFlySelectNextWeapon = 115,
+    VehicleFlySelectPrevWeapon = 116,
+    VehicleFlySelectTargetLeft = 117,
+    VehicleFlySelectTargetRight = 118,
+    VehicleFlyVerticalFlightMode = 119,
+    VehicleFlyDuck = 120,
+    VehicleFlyAttackCamera = 121,
+    VehicleFlyMouseControlOverride = 122,
+    VehicleSubTurnLeftRight = 123,
+    VehicleSubTurnLeftOnly = 124,
+    VehicleSubTurnRightOnly = 125,
+    VehicleSubPitchUpDown = 126,
+    VehicleSubPitchUpOnly = 127,
+    VehicleSubPitchDownOnly = 128,
+    VehicleSubThrottleUp = 129,
+    VehicleSubThrottleDown = 130,
+    VehicleSubAscend = 131,
+    VehicleSubDescend = 132,
+    VehicleSubTurnHardLeft = 133,
+    VehicleSubTurnHardRight = 134,
+    VehicleSubMouseControlOverride = 135,
+    VehiclePushbikePedal = 136,
+    VehiclePushbikeSprint = 137,
+    VehiclePushbikeFrontBrake = 138,
+    VehiclePushbikeRearBrake = 139,
+    MeleeAttackLight = 140,
+    MeleeAttackHeavy = 141,
+    MeleeAttackAlternate = 142,
+    MeleeBlock = 143,
+    ParachuteDeploy = 144,
+    ParachuteDetach = 145,
+    ParachuteTurnLeftRight = 146,
+    ParachuteTurnLeftOnly = 147,
+    ParachuteTurnRightOnly = 148,
+    ParachutePitchUpDown = 149,
+    ParachutePitchUpOnly = 150,
+    ParachutePitchDownOnly = 151,
+    ParachuteBrakeLeft = 152,
+    ParachuteBrakeRight = 153,
+    ParachuteSmoke = 154,
+    ParachutePrecisionLanding = 155,
+    Map = 156,
+    SelectWeaponUnarmed = 157,
+    SelectWeaponMelee = 158,
+    SelectWeaponHandgun = 159,
+    SelectWeaponShotgun = 160,
+    SelectWeaponSmg = 161,
+    SelectWeaponAutoRifle = 162,
+    SelectWeaponSniper = 163,
+    SelectWeaponHeavy = 164,
+    SelectWeaponSpecial = 165,
+    SelectCharacterMichael = 166,
+    SelectCharacterFranklin = 167,
+    SelectCharacterTrevor = 168,
+    SelectCharacterMultiplayer = 169,
+    SaveReplayClip = 170,
+    SpecialAbilityPC = 171,
+    PhoneUp = 172,
+    PhoneDown = 173,
+    PhoneLeft = 174,
+    PhoneRight = 175,
+    PhoneSelect = 176,
+    PhoneCancel = 177,
+    PhoneOption = 178,
+    PhoneExtraOption = 179,
+    PhoneScrollForward = 180,
+    PhoneScrollBackward = 181,
+    PhoneCameraFocusLock = 182,
+    PhoneCameraGrid = 183,
+    PhoneCameraSelfie = 184,
+    PhoneCameraDOF = 185,
+    PhoneCameraExpression = 186,
+    FrontendDown = 187,
+    FrontendUp = 188,
+    FrontendLeft = 189,
+    FrontendRight = 190,
+    FrontendRdown = 191,
+    FrontendRup = 192,
+    FrontendRleft = 193,
+    FrontendRright = 194,
+    FrontendAxisX = 195,
+    FrontendAxisY = 196,
+    FrontendRightAxisX = 197,
+    FrontendRightAxisY = 198,
+    FrontendPause = 199,
+    FrontendPauseAlternate = 200,
+    FrontendAccept = 201,
+    FrontendCancel = 202,
+    FrontendX = 203,
+    FrontendY = 204,
+    FrontendLb = 205,
+    FrontendRb = 206,
+    FrontendLt = 207,
+    FrontendRt = 208,
+    FrontendLs = 209,
+    FrontendRs = 210,
+    FrontendLeaderboard = 211,
+    FrontendSocialClub = 212,
+    FrontendSocialClubSecondary = 213,
+    FrontendDelete = 214,
+    FrontendEndscreenAccept = 215,
+    FrontendEndscreenExpand = 216,
+    FrontendSelect = 217,
+    ScriptLeftAxisX = 218,
+    ScriptLeftAxisY = 219,
+    ScriptRightAxisX = 220,
+    ScriptRightAxisY = 221,
+    ScriptRUp = 222,
+    ScriptRDown = 223,
+    ScriptRLeft = 224,
+    ScriptRRight = 225,
+    ScriptLB = 226,
+    ScriptRB = 227,
+    ScriptLT = 228,
+    ScriptRT = 229,
+    ScriptLS = 230,
+    ScriptRS = 231,
+    ScriptPadUp = 232,
+    ScriptPadDown = 233,
+    ScriptPadLeft = 234,
+    ScriptPadRight = 235,
+    ScriptSelect = 236,
+    CursorAccept = 237,
+    CursorCancel = 238,
+    CursorX = 239,
+    CursorY = 240,
+    CursorScrollUp = 241,
+    CursorScrollDown = 242,
+    EnterCheatCode = 243,
+    InteractionMenu = 244,
+    MpTextChatAll = 245,
+    MpTextChatTeam = 246,
+    MpTextChatFriends = 247,
+    MpTextChatCrew = 248,
+    PushToTalk = 249,
+    CreatorLS = 250,
+    CreatorRS = 251,
+    CreatorLT = 252,
+    CreatorRT = 253,
+    CreatorMenuToggle = 254,
+    CreatorAccept = 255,
+    CreatorDelete = 256,
+    Attack2 = 257,
+    RappelJump = 258,
+    RappelLongJump = 259,
+    RappelSmashWindow = 260,
+    PrevWeapon = 261,
+    NextWeapon = 262,
+    MeleeAttack1 = 263,
+    MeleeAttack2 = 264,
+    Whistle = 265,
+    MoveLeft = 266,
+    MoveRight = 267,
+    MoveUp = 268,
+    MoveDown = 269,
+    LookLeft = 270,
+    LookRight = 271,
+    LookUp = 272,
+    LookDown = 273,
+    SniperZoomIn = 274,
+    SniperZoomOut = 275,
+    SniperZoomInAlternate = 276,
+    SniperZoomOutAlternate = 277,
+    VehicleMoveLeft = 278,
+    VehicleMoveRight = 279,
+    VehicleMoveUp = 280,
+    VehicleMoveDown = 281,
+    VehicleGunLeft = 282,
+    VehicleGunRight = 283,
+    VehicleGunUp = 284,
+    VehicleGunDown = 285,
+    VehicleLookLeft = 286,
+    VehicleLookRight = 287,
+    ReplayStartStopRecording = 288,
+    ReplayStartStopRecordingSecondary = 289,
+    ScaledLookLeftRight = 290,
+    ScaledLookUpDown = 291,
+    ScaledLookUpOnly = 292,
+    ScaledLookDownOnly = 293,
+    ScaledLookLeftOnly = 294,
+    ScaledLookRightOnly = 295,
+    ReplayMarkerDelete = 296,
+    ReplayClipDelete = 297,
+    ReplayPause = 298,
+    ReplayRewind = 299,
+    ReplayFfwd = 300,
+    ReplayNewmarker = 301,
+    ReplayRecord = 302,
+    ReplayScreenshot = 303,
+    ReplayHidehud = 304,
+    ReplayStartpoint = 305,
+    ReplayEndpoint = 306,
+    ReplayAdvance = 307,
+    ReplayBack = 308,
+    ReplayTools = 309,
+    ReplayRestart = 310,
+    ReplayShowhotkey = 311,
+    ReplayCycleMarkerLeft = 312,
+    ReplayCycleMarkerRight = 313,
+    ReplayFOVIncrease = 314,
+    ReplayFOVDecrease = 315,
+    ReplayCameraUp = 316,
+    ReplayCameraDown = 317,
+    ReplaySave = 318,
+    ReplayToggletime = 319,
+    ReplayToggletips = 320,
+    ReplayPreview = 321,
+    ReplayToggleTimeline = 322,
+    ReplayTimelinePickupClip = 323,
+    ReplayTimelineDuplicateClip = 324,
+    ReplayTimelinePlaceClip = 325,
+    ReplayCtrl = 326,
+    ReplayTimelineSave = 327,
+    ReplayPreviewAudio = 328,
+    VehicleDriveLook = 329,
+    VehicleDriveLook2 = 330,
+    VehicleFlyAttack2 = 331,
+    RadioWheelUpDown = 332,
+    RadioWheelLeftRight = 333,
+    VehicleSlowMoUpDown = 334,
+    VehicleSlowMoUpOnly = 335,
+    VehicleSlowMoDownOnly = 336,
+    MapPointOfInterest = 337,
+    ReplaySnapmaticPhoto = 338,
+    VehicleCarJump = 339,
+    VehicleRocketBoost = 340,
+    VehicleParachute = 341,
+    VehicleBikeWings = 342,
+    VehicleFlyBombBay = 343,
+    VehicleFlyCounter = 344,
+    VehicleFlyTransform = 345
+}
+export default Control;
diff --git a/node_modules/@durtyfree/altv-nativeui/src/enums/Font.d.ts b/node_modules/@durtyfree/altv-nativeui/src/enums/Font.d.ts
new file mode 100644
index 0000000..3842ddc
--- /dev/null
+++ b/node_modules/@durtyfree/altv-nativeui/src/enums/Font.d.ts
@@ -0,0 +1,8 @@
+declare enum Font {
+    ChaletLondon = 0,
+    HouseScript = 1,
+    Monospace = 2,
+    CharletComprimeColonge = 4,
+    Pricedown = 7
+}
+export default Font;
diff --git a/node_modules/@durtyfree/altv-nativeui/examples/nativeUI-example/includes/NativeUI/enums/HudColor.ts b/node_modules/@durtyfree/altv-nativeui/src/enums/HudColor.d.ts
similarity index 95%
rename from node_modules/@durtyfree/altv-nativeui/examples/nativeUI-example/includes/NativeUI/enums/HudColor.ts
rename to node_modules/@durtyfree/altv-nativeui/src/enums/HudColor.d.ts
index d7ba54f..f2ac767 100644
--- a/node_modules/@durtyfree/altv-nativeui/examples/nativeUI-example/includes/NativeUI/enums/HudColor.ts
+++ b/node_modules/@durtyfree/altv-nativeui/src/enums/HudColor.d.ts
@@ -1,4 +1,4 @@
-﻿enum HudColor {
+declare enum HudColor {
     HUD_COLOUR_PURE_WHITE = 0,
     HUD_COLOUR_WHITE = 1,
     HUD_COLOUR_BLACK = 2,
@@ -178,7 +178,6 @@
     HUD_COLOUR_VIDEO_EDITOR_AUDIO = 176,
     HUD_COLOUR_VIDEO_EDITOR_TEXT = 177,
     HUD_COLOUR_HB_BLUE = 178,
-    HUD_COLOUR_HB_YELLOW = 179,
+    HUD_COLOUR_HB_YELLOW = 179
 }
-
 export default HudColor;
diff --git a/node_modules/@durtyfree/altv-nativeui/src/items/UIMenuAutoListItem.d.ts b/node_modules/@durtyfree/altv-nativeui/src/items/UIMenuAutoListItem.d.ts
new file mode 100644
index 0000000..f28875a
--- /dev/null
+++ b/node_modules/@durtyfree/altv-nativeui/src/items/UIMenuAutoListItem.d.ts
@@ -0,0 +1,36 @@
+import BadgeStyle from "../enums/BadgeStyle";
+import ResText from "../modules/ResText";
+import Sprite from "../modules/Sprite";
+import UIMenuItem from "./UIMenuItem";
+export default class UIMenuAutoListItem extends UIMenuItem {
+    protected _itemText: ResText;
+    protected _arrowLeft: Sprite;
+    protected _arrowRight: Sprite;
+    private _currentOffset;
+    private _leftMoveThreshold;
+    private _rightMoveThreshold;
+    private _lowerThreshold;
+    private _upperThreshold;
+    private _preCaptionText;
+    private _postCaptionText;
+    private _selectedValue;
+    get PreCaptionText(): string;
+    set PreCaptionText(text: string);
+    get PostCaptionText(): string;
+    set PostCaptionText(text: string);
+    get LeftMoveThreshold(): number;
+    set LeftMoveThreshold(value: number);
+    get RightMoveThreshold(): number;
+    set RightMoveThreshold(value: number);
+    get LowerThreshold(): number;
+    set LowerThreshold(value: number);
+    get UpperThreshold(): number;
+    set UpperThreshold(value: number);
+    get SelectedValue(): number;
+    set SelectedValue(value: number);
+    constructor(text: string, description?: string, lowerThreshold?: number, upperThreshold?: number, startValue?: number, data?: any);
+    SetVerticalPosition(y: number): void;
+    SetRightLabel(text: string): this;
+    SetRightBadge(badge: BadgeStyle): this;
+    Draw(): void;
+}
diff --git a/node_modules/@durtyfree/altv-nativeui/src/items/UIMenuCheckboxItem.d.ts b/node_modules/@durtyfree/altv-nativeui/src/items/UIMenuCheckboxItem.d.ts
new file mode 100644
index 0000000..64f8c06
--- /dev/null
+++ b/node_modules/@durtyfree/altv-nativeui/src/items/UIMenuCheckboxItem.d.ts
@@ -0,0 +1,11 @@
+import BadgeStyle from "../enums/BadgeStyle";
+import UIMenuItem from "./UIMenuItem";
+export default class UIMenuCheckboxItem extends UIMenuItem {
+    private readonly _checkedSprite;
+    Checked: boolean;
+    constructor(text: string, check?: boolean, description?: string);
+    SetVerticalPosition(y: number): void;
+    Draw(): void;
+    SetRightBadge(badge: BadgeStyle): this;
+    SetRightLabel(text: string): this;
+}
diff --git a/node_modules/@durtyfree/altv-nativeui/src/items/UIMenuDynamicListItem.d.ts b/node_modules/@durtyfree/altv-nativeui/src/items/UIMenuDynamicListItem.d.ts
new file mode 100644
index 0000000..6a475c2
--- /dev/null
+++ b/node_modules/@durtyfree/altv-nativeui/src/items/UIMenuDynamicListItem.d.ts
@@ -0,0 +1,34 @@
+import BadgeStyle from "../enums/BadgeStyle";
+import ChangeDirection from "../enums/ChangeDirection";
+import ResText from "../modules/ResText";
+import Sprite from "../modules/Sprite";
+import UIMenuItem from "./UIMenuItem";
+interface SelectionChangeHandler {
+    (item: UIMenuDynamicListItem, selectedValue: string, changeDirection: ChangeDirection): string;
+}
+export default class UIMenuDynamicListItem extends UIMenuItem {
+    protected _itemText: ResText;
+    protected _arrowLeft: Sprite;
+    protected _arrowRight: Sprite;
+    private _currentOffset;
+    private _precaptionText;
+    private _selectedValue;
+    private readonly _selectedStartValueHandler;
+    readonly SelectionChangeHandler: SelectionChangeHandler;
+    SelectionChangeHandlerPromise(item: UIMenuDynamicListItem, selectedValue: string, changeDirection: ChangeDirection): Promise<unknown>;
+    get PreCaptionText(): string;
+    set PreCaptionText(text: string);
+    get SelectedValue(): string;
+    set SelectedValue(value: string);
+    constructor(text: string, selectionChangeHandler: {
+        (item: UIMenuDynamicListItem, selectedValue: string, changeDirection: ChangeDirection): string;
+    }, description?: string, selectedStartValueHandler?: {
+        (): string;
+    }, data?: any);
+    SetVerticalPosition(y: number): void;
+    SetRightLabel(text: string): this;
+    SetRightBadge(badge: BadgeStyle): this;
+    Draw(): void;
+    private isVariableFunction;
+}
+export {};
diff --git a/node_modules/@durtyfree/altv-nativeui/src/items/UIMenuItem.d.ts b/node_modules/@durtyfree/altv-nativeui/src/items/UIMenuItem.d.ts
new file mode 100644
index 0000000..e062889
--- /dev/null
+++ b/node_modules/@durtyfree/altv-nativeui/src/items/UIMenuItem.d.ts
@@ -0,0 +1,51 @@
+import BadgeStyle from "../enums/BadgeStyle";
+import NativeUI from "../NativeUi";
+import ResRectangle from "../modules/ResRectangle";
+import ResText from "../modules/ResText";
+import Sprite from "../modules/Sprite";
+import Color from "../utils/Color";
+import Point from "../utils/Point";
+export default class UIMenuItem {
+    readonly Id: string;
+    static readonly DefaultBackColor: Color;
+    static readonly DefaultHighlightedBackColor: Color;
+    static readonly DefaultForeColor: Color;
+    static readonly DefaultHighlightedForeColor: Color;
+    private _event;
+    protected _rectangle: ResRectangle;
+    protected _text: ResText;
+    protected _description: string;
+    protected _selectedSprite: Sprite;
+    protected _badgeLeft: Sprite;
+    protected _badgeRight: Sprite;
+    protected _labelText: ResText;
+    BackColor: Color;
+    HighlightedBackColor: Color;
+    ForeColor: Color;
+    HighlightedForeColor: Color;
+    Enabled: boolean;
+    Selected: boolean;
+    Hovered: boolean;
+    Data: any;
+    Offset: Point;
+    Parent: NativeUI;
+    get Text(): string;
+    set Text(text: string);
+    get Description(): string;
+    set Description(text: string);
+    RightLabel: string;
+    LeftBadge: BadgeStyle;
+    RightBadge: BadgeStyle;
+    constructor(text: string, description?: string, data?: any);
+    SetVerticalPosition(y: number): void;
+    addEvent(event: string, ...args: any[]): void;
+    fireEvent(): void;
+    Draw(): void;
+    SetLeftBadge(badge: BadgeStyle): void;
+    SetRightBadge(badge: BadgeStyle): void;
+    SetRightLabel(text: string): void;
+    BadgeToSpriteLib(badge: BadgeStyle): "commonmenu" | "mpshopsale" | "mpleaderboard";
+    BadgeToSpriteName(badge: BadgeStyle, selected: boolean): "" | "mp_medal_bronze" | "mp_medal_gold" | "medal_silver" | "mp_alerttriangle" | "mp_hostcrown" | "shop_ammo_icon_b" | "shop_ammo_icon_a" | "shop_armour_icon_b" | "shop_armour_icon_a" | "shop_barber_icon_b" | "shop_barber_icon_a" | "shop_clothing_icon_b" | "shop_clothing_icon_a" | "shop_franklin_icon_b" | "shop_franklin_icon_a" | "shop_garage_bike_icon_b" | "shop_garage_bike_icon_a" | "shop_garage_icon_b" | "shop_garage_icon_a" | "shop_gunclub_icon_b" | "shop_gunclub_icon_a" | "shop_health_icon_b" | "shop_health_icon_a" | "shop_lock" | "shop_makeup_icon_b" | "shop_makeup_icon_a" | "shop_mask_icon_b" | "shop_mask_icon_a" | "shop_michael_icon_b" | "shop_michael_icon_a" | "shop_new_star" | "shop_tattoos_icon_b" | "shop_tattoos_icon_" | "shop_tick_icon" | "shop_trevor_icon_b" | "shop_trevor_icon_a" | "saleicon" | "arrowleft" | "arrowright" | "leaderboard_audio_1" | "leaderboard_audio_2" | "leaderboard_audio_3" | "leaderboard_audio_inactive" | "leaderboard_audio_mute";
+    IsBagdeWhiteSprite(badge: BadgeStyle): boolean;
+    BadgeToColor(badge: BadgeStyle, selected: boolean): Color;
+}
diff --git a/node_modules/@durtyfree/altv-nativeui/src/items/UIMenuListItem.d.ts b/node_modules/@durtyfree/altv-nativeui/src/items/UIMenuListItem.d.ts
new file mode 100644
index 0000000..311523a
--- /dev/null
+++ b/node_modules/@durtyfree/altv-nativeui/src/items/UIMenuListItem.d.ts
@@ -0,0 +1,30 @@
+import BadgeStyle from "../enums/BadgeStyle";
+import ItemsCollection from "../modules/ItemsCollection";
+import ListItem from "../modules/ListItem";
+import ResText from "../modules/ResText";
+import Sprite from "../modules/Sprite";
+import UIMenuItem from "./UIMenuItem";
+export default class UIMenuListItem extends UIMenuItem {
+    ScrollingEnabled: boolean;
+    HoldTimeBeforeScroll: number;
+    protected _itemText: ResText;
+    protected _arrowLeft: Sprite;
+    protected _arrowRight: Sprite;
+    private _currentOffset;
+    private _itemsCollection;
+    get Collection(): ListItem[];
+    set Collection(v: ListItem[]);
+    set SelectedItem(v: ListItem);
+    get SelectedItem(): ListItem;
+    get SelectedValue(): any;
+    protected _index: number;
+    get Index(): number;
+    set Index(value: number);
+    constructor(text: string, description?: string, collection?: ItemsCollection, startIndex?: number, data?: any);
+    setCollection(collection: ItemsCollection): void;
+    setCollectionItem(index: number, item: ListItem | string, resetSelection?: boolean): void;
+    SetVerticalPosition(y: number): void;
+    SetRightLabel(text: string): this;
+    SetRightBadge(badge: BadgeStyle): this;
+    Draw(): void;
+}
diff --git a/node_modules/@durtyfree/altv-nativeui/src/items/UIMenuSliderItem.d.ts b/node_modules/@durtyfree/altv-nativeui/src/items/UIMenuSliderItem.d.ts
new file mode 100644
index 0000000..2c07102
--- /dev/null
+++ b/node_modules/@durtyfree/altv-nativeui/src/items/UIMenuSliderItem.d.ts
@@ -0,0 +1,19 @@
+import BadgeStyle from "../enums/BadgeStyle";
+import UIMenuItem from "./UIMenuItem";
+export default class UIMenuSliderItem extends UIMenuItem {
+    private _arrowLeft;
+    private _arrowRight;
+    private _rectangleBackground;
+    private _rectangleSlider;
+    private _rectangleDivider;
+    private _items;
+    private _index;
+    get Index(): number;
+    set Index(value: number);
+    constructor(text: string, items: any[], index: number, description?: string, divider?: boolean, data?: any);
+    SetVerticalPosition(y: number): void;
+    IndexToItem(index: number): any;
+    Draw(): void;
+    SetRightBadge(badge: BadgeStyle): void;
+    SetRightLabel(text: string): void;
+}
diff --git a/node_modules/@durtyfree/altv-nativeui/src/modules/BigMessage.d.ts b/node_modules/@durtyfree/altv-nativeui/src/modules/BigMessage.d.ts
new file mode 100644
index 0000000..e7ec549
--- /dev/null
+++ b/node_modules/@durtyfree/altv-nativeui/src/modules/BigMessage.d.ts
@@ -0,0 +1,14 @@
+import HudColor from '../enums/HudColor';
+import Message from './Message';
+export default class BigMessage extends Message {
+    static Initialize(scaleForm: string, transitionOutAnimName: string): void;
+    static ShowMissionPassedMessage(msg: string, subtitle?: string, time?: number): void;
+    static ShowColoredShard(msg: string, desc: string, textColor: HudColor, bgColor: HudColor, time?: number): void;
+    static ShowOldMessage(msg: string, time?: number): void;
+    static ShowSimpleShard(title: string, subtitle?: string, time?: number): void;
+    static ShowRankupMessage(msg: string, subtitle: string, rank: number, time?: number): void;
+    static ShowPlaneMessage(title: string, planeName: string, planeHash: number, time?: number): void;
+    static ShowWeaponPurchasedMessage(bigMessage: string, weaponName: string, weaponHash: number, time?: number): void;
+    static ShowWastedMessage(title: string, message: string, color: HudColor, darkenBackground: boolean, time?: number): void;
+    static ShowMpMessageLarge(msg: string, subtitle?: string, time?: number): void;
+}
diff --git a/node_modules/@durtyfree/altv-nativeui/src/modules/Container.d.ts b/node_modules/@durtyfree/altv-nativeui/src/modules/Container.d.ts
new file mode 100644
index 0000000..081dcdf
--- /dev/null
+++ b/node_modules/@durtyfree/altv-nativeui/src/modules/Container.d.ts
@@ -0,0 +1,10 @@
+import Size from "../utils/Size";
+import Rectangle from "./Rectangle";
+import Point from '../utils/Point';
+import Color from '../utils/Color';
+export default class Container extends Rectangle {
+    Items: any[];
+    constructor(pos: Point, size: Size, color: Color);
+    addItem(item: any): void;
+    Draw(offset?: Size): void;
+}
diff --git a/node_modules/@durtyfree/altv-nativeui/src/modules/IElement.d.ts b/node_modules/@durtyfree/altv-nativeui/src/modules/IElement.d.ts
new file mode 100644
index 0000000..df04ef3
--- /dev/null
+++ b/node_modules/@durtyfree/altv-nativeui/src/modules/IElement.d.ts
@@ -0,0 +1,4 @@
+export default class IElement {
+    Enabled: boolean;
+    constructor();
+}
diff --git a/node_modules/@durtyfree/altv-nativeui/src/modules/InstructionalButton.d.ts b/node_modules/@durtyfree/altv-nativeui/src/modules/InstructionalButton.d.ts
new file mode 100644
index 0000000..e39a934
--- /dev/null
+++ b/node_modules/@durtyfree/altv-nativeui/src/modules/InstructionalButton.d.ts
@@ -0,0 +1,13 @@
+import UIMenuItem from "../items/UIMenuItem";
+import Control from '../enums/Control';
+export default class InstructionalButton {
+    Text: string;
+    get ItemBind(): UIMenuItem;
+    private _itemBind;
+    private readonly _buttonString;
+    private readonly _buttonControl;
+    private readonly _usingControls;
+    constructor(text: string, control: Control, buttonString?: string);
+    BindToItem(item: UIMenuItem): void;
+    GetButtonId(): string;
+}
diff --git a/node_modules/@durtyfree/altv-nativeui/src/modules/ItemsCollection.d.ts b/node_modules/@durtyfree/altv-nativeui/src/modules/ItemsCollection.d.ts
new file mode 100644
index 0000000..5cb725a
--- /dev/null
+++ b/node_modules/@durtyfree/altv-nativeui/src/modules/ItemsCollection.d.ts
@@ -0,0 +1,7 @@
+import ListItem from "../modules/ListItem";
+export default class ItemsCollection {
+    private items;
+    constructor(items: ListItem[] | string[] | number[]);
+    length(): number;
+    getListItems(): any[];
+}
diff --git a/node_modules/@durtyfree/altv-nativeui/src/modules/ListItem.d.ts b/node_modules/@durtyfree/altv-nativeui/src/modules/ListItem.d.ts
new file mode 100644
index 0000000..176bb08
--- /dev/null
+++ b/node_modules/@durtyfree/altv-nativeui/src/modules/ListItem.d.ts
@@ -0,0 +1,6 @@
+export default class ListItem {
+    readonly Id: string;
+    DisplayText: string;
+    Data: any;
+    constructor(text?: string, data?: any);
+}
diff --git a/node_modules/@durtyfree/altv-nativeui/src/modules/Message.d.ts b/node_modules/@durtyfree/altv-nativeui/src/modules/Message.d.ts
new file mode 100644
index 0000000..484e6ef
--- /dev/null
+++ b/node_modules/@durtyfree/altv-nativeui/src/modules/Message.d.ts
@@ -0,0 +1,23 @@
+import Scaleform from '../utils/Scaleform';
+export default class Message {
+    private static _messageVisible;
+    private static _transitionOutTimeout;
+    private static _transitionOutFinishedTimeout;
+    private static _delayedTransitionInTimeout;
+    private static _scaleform;
+    private static _transitionOutTimeMs;
+    private static _transitionOutAnimName;
+    protected static Initialize(scaleForm: string, transitionOutAnimName: string): void;
+    static get IsVisible(): boolean;
+    protected static get Scaleform(): Scaleform;
+    private static Load;
+    private static SetDelayedTransition;
+    static ShowCustomShard(funcName: string, time?: number, ...funcArgs: any[]): void;
+    static ShowComplexCustomShard(messageHandler: {
+        (): void;
+    }, time?: number): void;
+    protected static TransitionOut(): void;
+    private static TransitionIn;
+    private static SetTransitionOutTimer;
+    protected static Render(): void;
+}
diff --git a/node_modules/@durtyfree/altv-nativeui/src/modules/MidsizedMessage.d.ts b/node_modules/@durtyfree/altv-nativeui/src/modules/MidsizedMessage.d.ts
new file mode 100644
index 0000000..1c65938
--- /dev/null
+++ b/node_modules/@durtyfree/altv-nativeui/src/modules/MidsizedMessage.d.ts
@@ -0,0 +1,9 @@
+import HudColor from '../enums/HudColor';
+import Message from './Message';
+export default class MidsizedMessage extends Message {
+    static Initialize(scaleForm: string, transitionOutAnimName: string): void;
+    static ShowMidsizedMessage(title: string, message?: string, time?: number): void;
+    static ShowBridgesKnivesProgress(title: string, totalToDo: number, message: string, info: string, completed: number, time?: number): void;
+    static ShowCondensedShardMessage(title: string, message: string, bgColor: HudColor, useDarkerShard: boolean, time?: number): void;
+    static ShowMidsizedShardMessage(title: string, message: string, bgColor: HudColor, useDarkerShard: boolean, useCondensedShard: boolean, time?: number): void;
+}
diff --git a/node_modules/@durtyfree/altv-nativeui/src/modules/Rectangle.d.ts b/node_modules/@durtyfree/altv-nativeui/src/modules/Rectangle.d.ts
new file mode 100644
index 0000000..ddc6476
--- /dev/null
+++ b/node_modules/@durtyfree/altv-nativeui/src/modules/Rectangle.d.ts
@@ -0,0 +1,11 @@
+import Color from "../utils/Color";
+import Point from "../utils/Point";
+import Size from "../utils/Size";
+import IElement from "./IElement";
+export default class Rectangle extends IElement {
+    Pos: Point;
+    Size: Size;
+    Color: Color;
+    constructor(pos: Point, size: Size, color: Color);
+    Draw(pos: Point | Size, size: Size, color: Color): void;
+}
diff --git a/node_modules/@durtyfree/altv-nativeui/src/modules/ResRectangle.d.ts b/node_modules/@durtyfree/altv-nativeui/src/modules/ResRectangle.d.ts
new file mode 100644
index 0000000..9ebbaa2
--- /dev/null
+++ b/node_modules/@durtyfree/altv-nativeui/src/modules/ResRectangle.d.ts
@@ -0,0 +1,10 @@
+import Point from "../utils/Point";
+import Size from "../utils/Size";
+import Rectangle from "./Rectangle";
+import Color from '../utils/Color';
+export default class ResRectangle extends Rectangle {
+    constructor(pos: Point, size: Size, color: Color);
+    Draw(): void;
+    Draw(offset: any): void;
+    Draw(pos: Point | Size, size: Size, color: Color): void;
+}
diff --git a/node_modules/@durtyfree/altv-nativeui/src/modules/ResText.d.ts b/node_modules/@durtyfree/altv-nativeui/src/modules/ResText.d.ts
new file mode 100644
index 0000000..f73e3d1
--- /dev/null
+++ b/node_modules/@durtyfree/altv-nativeui/src/modules/ResText.d.ts
@@ -0,0 +1,17 @@
+import Alignment from "../enums/Alignment";
+import Color from "../utils/Color";
+import Point from "../utils/Point";
+import Size from "../utils/Size";
+import Text from "./Text";
+export default class ResText extends Text {
+    TextAlignment: Alignment;
+    DropShadow: boolean;
+    Outline: boolean;
+    Wrap: number;
+    get WordWrap(): Size;
+    set WordWrap(value: Size);
+    constructor(caption: string, pos: Point, scale: number, color?: Color, font?: number, centered?: Alignment);
+    Draw(): void;
+    Draw(offset: Size): void;
+    Draw(caption: Size, pos: Point, scale: number, color: Color, font: string | number, arg2: any): void;
+}
diff --git a/node_modules/@durtyfree/altv-nativeui/src/modules/Sprite.d.ts b/node_modules/@durtyfree/altv-nativeui/src/modules/Sprite.d.ts
new file mode 100644
index 0000000..c5eb6af
--- /dev/null
+++ b/node_modules/@durtyfree/altv-nativeui/src/modules/Sprite.d.ts
@@ -0,0 +1,19 @@
+import Color from "../utils/Color";
+import Point from "../utils/Point";
+import Size from "../utils/Size";
+export default class Sprite {
+    TextureName: string;
+    Pos: Point;
+    Size: Size;
+    Heading: number;
+    Color: Color;
+    Visible: boolean;
+    private _textureDict;
+    constructor(textureDict: string, textureName: string, pos: Point, size: Size, heading?: number, color?: Color);
+    LoadTextureDictionary(): void;
+    private requestTextureDictPromise;
+    set TextureDict(v: string);
+    get TextureDict(): string;
+    get IsTextureDictionaryLoaded(): boolean;
+    Draw(textureDictionary?: string, textureName?: string, pos?: Point, size?: Size, heading?: number, color?: Color, loadTexture?: boolean): void;
+}
diff --git a/node_modules/@durtyfree/altv-nativeui/src/modules/Text.d.ts b/node_modules/@durtyfree/altv-nativeui/src/modules/Text.d.ts
new file mode 100644
index 0000000..86329b4
--- /dev/null
+++ b/node_modules/@durtyfree/altv-nativeui/src/modules/Text.d.ts
@@ -0,0 +1,16 @@
+import Color from "../utils/Color";
+import Point from "../utils/Point";
+import IElement from "./IElement";
+import Size from '../utils/Size';
+export default class Text extends IElement {
+    Caption: string;
+    Pos: Point;
+    Scale: number;
+    Color: Color;
+    Font: number;
+    Centered: boolean;
+    constructor(caption: string, pos: Point, scale: number, color: Color, font: number, centered: boolean);
+    Draw(caption: Size, pos: Point, scale: number, color: Color, font: string | number, centered: boolean): void;
+    static AddLongString(text: string): void;
+}
+export { Text };
diff --git a/node_modules/@durtyfree/altv-nativeui/src/utils/Color.d.ts b/node_modules/@durtyfree/altv-nativeui/src/utils/Color.d.ts
new file mode 100644
index 0000000..02e0ec5
--- /dev/null
+++ b/node_modules/@durtyfree/altv-nativeui/src/utils/Color.d.ts
@@ -0,0 +1,12 @@
+export default class Color {
+    static Empty: Color;
+    static Transparent: Color;
+    static Black: Color;
+    static White: Color;
+    static WhiteSmoke: Color;
+    R: number;
+    G: number;
+    B: number;
+    A: number;
+    constructor(r: number, g: number, b: number, a?: number);
+}
diff --git a/node_modules/@durtyfree/altv-nativeui/src/utils/Common.d.ts b/node_modules/@durtyfree/altv-nativeui/src/utils/Common.d.ts
new file mode 100644
index 0000000..a33d675
--- /dev/null
+++ b/node_modules/@durtyfree/altv-nativeui/src/utils/Common.d.ts
@@ -0,0 +1,3 @@
+export default class Common {
+    static PlaySound(audioName: string, audioRef: string): void;
+}
diff --git a/node_modules/@durtyfree/altv-nativeui/src/utils/LiteEvent.d.ts b/node_modules/@durtyfree/altv-nativeui/src/utils/LiteEvent.d.ts
new file mode 100644
index 0000000..e37e32a
--- /dev/null
+++ b/node_modules/@durtyfree/altv-nativeui/src/utils/LiteEvent.d.ts
@@ -0,0 +1,21 @@
+interface ILiteEvent {
+    on(handler: {
+        (...args: any[]): void;
+    }): void;
+    off(handler: {
+        (...args: any[]): void;
+    }): void;
+}
+export default class LiteEvent implements ILiteEvent {
+    private handlers;
+    on(handler: {
+        (...args: any[]): void;
+    }): void;
+    off(handler: {
+        (...args: any[]): void;
+    }): void;
+    emit(...args: any[]): void;
+    expose(): ILiteEvent;
+    count(): number;
+}
+export {};
diff --git a/node_modules/@durtyfree/altv-nativeui/src/utils/Point.d.ts b/node_modules/@durtyfree/altv-nativeui/src/utils/Point.d.ts
new file mode 100644
index 0000000..35867d2
--- /dev/null
+++ b/node_modules/@durtyfree/altv-nativeui/src/utils/Point.d.ts
@@ -0,0 +1,10 @@
+export default class Point {
+    X: number;
+    Y: number;
+    constructor(x: number, y: number);
+    static Parse(point: number[]): Point;
+    static Parse(point: {
+        X: number;
+        Y: number;
+    }): Point;
+}
diff --git a/node_modules/@durtyfree/altv-nativeui/src/utils/Scaleform.d.ts b/node_modules/@durtyfree/altv-nativeui/src/utils/Scaleform.d.ts
new file mode 100644
index 0000000..db58d8a
--- /dev/null
+++ b/node_modules/@durtyfree/altv-nativeui/src/utils/Scaleform.d.ts
@@ -0,0 +1,14 @@
+export default class Scaleform {
+    private _handle;
+    private scaleForm;
+    constructor(scaleForm: string);
+    get handle(): number;
+    get isValid(): boolean;
+    get isLoaded(): boolean;
+    private callFunctionHead;
+    callFunction(funcName: string, ...args: any[]): void;
+    callFunctionReturn(funcName: string, ...args: any[]): number;
+    render2D(): void;
+    recreate(): void;
+    destroy(): void;
+}
diff --git a/node_modules/@durtyfree/altv-nativeui/src/utils/Screen.d.ts b/node_modules/@durtyfree/altv-nativeui/src/utils/Screen.d.ts
new file mode 100644
index 0000000..6b9f19b
--- /dev/null
+++ b/node_modules/@durtyfree/altv-nativeui/src/utils/Screen.d.ts
@@ -0,0 +1,15 @@
+import Font from "../enums/Font";
+import Point from "./Point";
+import Size from "./Size";
+export default class Screen {
+    static Width: number;
+    static Height: number;
+    static get ResolutionMaintainRatio(): Size;
+    static MousePosition(relative?: boolean): {
+        X: number;
+        Y: number;
+    };
+    static IsMouseInBounds(topLeft: Point, boxSize: Size): boolean;
+    static GetTextWidth(text: string, font: Font, scale: number): number;
+    static GetLineCount(text: string, position: Point, font: Font, scale: number, wrap: number): number;
+}
diff --git a/node_modules/@durtyfree/altv-nativeui/src/utils/Size.d.ts b/node_modules/@durtyfree/altv-nativeui/src/utils/Size.d.ts
new file mode 100644
index 0000000..3338681
--- /dev/null
+++ b/node_modules/@durtyfree/altv-nativeui/src/utils/Size.d.ts
@@ -0,0 +1,5 @@
+export default class Size {
+    Width: number;
+    Height: number;
+    constructor(w?: number, h?: number);
+}
diff --git a/node_modules/@durtyfree/altv-nativeui/src/utils/UUIDV4.d.ts b/node_modules/@durtyfree/altv-nativeui/src/utils/UUIDV4.d.ts
new file mode 100644
index 0000000..8cd06b1
--- /dev/null
+++ b/node_modules/@durtyfree/altv-nativeui/src/utils/UUIDV4.d.ts
@@ -0,0 +1 @@
+export default function UUIDV4(): string;
diff --git a/node_modules/@durtyfree/altv-nativeui/tsconfig.json b/node_modules/@durtyfree/altv-nativeui/tsconfig.json
deleted file mode 100644
index df88554..0000000
--- a/node_modules/@durtyfree/altv-nativeui/tsconfig.json
+++ /dev/null
@@ -1,23 +0,0 @@
-{
-    "compilerOptions": {
-      "target": "ESNext",
-      "module": "ESNext",
-      "moduleResolution": "Node",
-      "declaration": true,
-      "resolveJsonModule": true,
-      "declarationDir": "dist/nativeui/types",
-      "allowSyntheticDefaultImports": true,
-      "removeComments": true,
-      "sourceMap": false,
-      "typeRoots": ["./node_modules/@types", "./node_modules/@altv"],
-      "noUnusedLocals": true,
-      "noUnusedParameters": false,
-      "noImplicitReturns": true,
-      "allowJs": false,
-      "emitDecoratorMetadata": true,
-      "experimentalDecorators": true
-    },
-    "include": [
-      "src"
-    ]
-  }
\ No newline at end of file
